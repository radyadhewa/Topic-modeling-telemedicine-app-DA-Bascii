(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   2412744,      44141]
NotebookOptionsPosition[   2398060,      43886]
NotebookOutlinePosition[   2398526,      43904]
CellTagsIndexPosition[   2398483,      43901]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Hoax News Detection by It\[CloseCurlyQuote]s Headline", "Title",
 CellChangeTimes->{{3.9409773350554028`*^9, 
  3.94097737552791*^9}},ExpressionUUID->"c11fae8b-c376-0d48-9faf-\
c6eb54e4cd43"],

Cell["\<\
Natural Language Processing on Detecting a Hoax News using Indonesian \
Languages\
\>", "Subtitle",
 CellChangeTimes->{{3.9409773605241814`*^9, 
  3.940977417527727*^9}},ExpressionUUID->"4b6e9c16-0a37-ed44-af82-\
458cfed1889c"],

Cell["by: Dhewa Radya | 6701011256", "Author",
 CellChangeTimes->{{3.9409802496685944`*^9, 3.9409802533967876`*^9}, {
  3.9409802868969173`*^9, 
  3.940980295503784*^9}},ExpressionUUID->"cd11e50a-1595-4240-9bab-\
e96f5c79dc33"],

Cell[CellGroupData[{

Cell["Data Preparation", "Section",
 CellChangeTimes->{{3.9409774259410954`*^9, 
  3.9409774371009827`*^9}},ExpressionUUID->"71c22328-a905-2e44-ba7d-\
42c772832173"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", " ", "=", " ", 
   RowBox[{
   "Import", "[", 
    "\"\<D:\\\\Coding\\\\school\\\\Chula Big Data Class\\\\data berita \
jabar.csv\>\"", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.9409480713815327`*^9, 3.9409481100008183`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"25088308-0438-814f-9282-b716465a1d1e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataset", " ", "=", " ", 
  RowBox[{"Dataset", "[", "data", "]"}]}]], "Code",
 CellChangeTimes->{{3.9409481214501495`*^9, 3.940948131375494*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"909732c1-338c-c54a-b3c3-b7a3891e6904"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{
       "id", "kode_provinsi", "nama_provinsi", "judul_berita", 
        "klasifikasi_utama", "klasifikasi_menyinggung", "status_berita", 
        "bulan", "jumlah_aduan", "satuan", "tahun"}, {
       1, 32, "JAWA BARAT", 
        "RS HASAN SADIKIN BANDUNG ISOLASI PASIEN TERDUGA VIRUS CORONA", 0, 0, 
        "BENAR", "JANUARI", 19, "ADUAN", 2020}, {
       2, 32, "JAWA BARAT", 
        "SELEBARAN BERLOGO POLDA METRO JAYA : WASPADA PENCULIKAN ANAK 12 \
TAHUN, PELAKU MENYAMAR SEBAGAI BUMIL", 0, 0, "DISINFORMASI (HOAKS)", 
        "JANUARI", 6, "ADUAN", 2020}, {
       3, 32, "JAWA BARAT", 
        "ARTI HURUF ARAB PADA BUKU IQRA 1, CORONA DICIPTAKAN PADA ZAMAN PENUH \
KEBOHONGAN", 0, 0, "DISINFORMASI (HOAKS)", "JANUARI", 3, "ADUAN", 2020}, {
       4, 32, "JAWA BARAT", 
        "CIPANAS (PUNCAK) BARU SAJA DILANDA BANJIR BANDANG, ALIRAN AIRNYA \
BISA MASUK JKT BESOK PAGI", 0, 0, "DISINFORMASI (HOAKS)", "JANUARI", 3, 
        "ADUAN", 2020}, {
       5, 32, "JAWA BARAT", 
        "DITOLAK DI BERBAGAI NEGARA, RATUSAN TURIS CHINA DISAMBUT DI \
INONESIA", 0, 0, "BENAR", "JANUARI", 3, "ADUAN", 2020}, {
       6, 32, "JAWA BARAT", 
        "DUA LAKI-LAKI PENIPU MENCARI DANA PAKAI BAJU LAMBANG PANCASILA", 0, 
        0, "DISINFORMASI (HOAKS)", "JANUARI", 3, "ADUAN", 2020}, {
       7, 32, "JAWA BARAT", 
        "KABAR PENEMUAN JENAZAH SISWA SEKOLAH DASAR DI KEMAYORAN", 0, 0, 
        "DISINFORMASI (HOAKS)", "JANUARI", 3, "ADUAN", 2020}, {
       8, 32, "JAWA BARAT", 
        "VIRAL BAYI USIA 2 BULAN DI SUKABUMI MENINGGAL DIDUGA KARENA \
IMUNISASI", 0, 0, "BENAR", "JANUARI", 3, "ADUAN", 2020}, {
       9, 32, "JAWA BARAT", 
        "APLIKASI WHATSAPP TELAH DIBLOKIR OLEH HACKER KELAS DUNIA BERINISIAL \
FFM", 0, 0, "DISINFORMASI (HOAKS)", "JANUARI", 2, "ADUAN", 2020}, {
       10, 32, "JAWA BARAT", "BIAYA TILANG TERBARU DI INDONESIA", 0, 0, 
        "DISINFORMASI (HOAKS)", "JANUARI", 2, "ADUAN", 2020}, {
       11, 32, "JAWA BARAT", 
        "CORONA VIRUS UDAH NYAMPE KE BANDUNG, DI RSHS UDAH ADA 1 PASIEN YANG \
FIX CORONA VIRUS, 1 PASEIN SUSPECT", 0, 0, "MISINFORMASI (HOAKS)", "JANUARI", 
        2, "ADUAN", 2020}, {
       12, 32, "JAWA BARAT", 
        "DUA ORANG KENAKAN BAJU BERLAMBANG PANCASILA LAKUKAN HIPNOTIS \
BERMODUS MINTA BANTUAN PEDULI PULAU SEBUKU", 0, 0, "DISINFORMASI (HOAKS)", 
        "JANUARI", 2, "ADUAN", 2020}, {
       13, 32, "JAWA BARAT", 
        "INFO KEPADA REKAN-REKAN : DI RSHS BANDUNG UDAH ADA PASIEN SUSPECT \
VIRUS CORONA RUJUKAN DARI RS CAHYA KAWALUYAAN", 0, 0, "MISINFORMASI (HOAKS)", 
        "JANUARI", 2, "ADUAN", 2020}, {
       14, 32, "JAWA BARAT", 
        "PEMBERITAHUAN KEMENTERIAN KESEHATAN : VIRUS CORONA KALI INI SERIUS, \
JAGA TENGGOROKAN TETAP LEMBAB, MINUMLAH 50-80 CC AIR HANGAT, 30-50 CC UNTUK \
ANAK-ANAK", 0, 0, "DISINFORMASI (HOAKS)", "JANUARI", 2, "ADUAN", 2020}, {
       15, 32, "JAWA BARAT", 
        "PENTING! KEMENKES RI SIAGAKAN 19 DAERAH WASPADA VIRUS CORONA", 0, 0, 
        "BENAR", "JANUARI", 2, "ADUAN", 2020}, {
       16, 32, "JAWA BARAT", 
        "ADA 136 PASIEN DALAM PENGAWASAN VIRUS CORONA DI INDONESIA", 0, 0, 
        "MISINFORMASI (HOAKS)", "FEBRUARI", 22, "ADUAN", 2020}, {
       17, 32, "JAWA BARAT", 
        "HIMBAUAN DARI KBRI KL UNTUK TIDAK MENGKONSUMSI MAKANAN PRODUK CHINA",
         0, 0, "DISINFORMASI (HOAKS)", "FEBRUARI", 17, "ADUAN", 2020}, {
       18, 32, "JAWA BARAT", 
        "MARET 2020 AKAN ADA PEMBUATAN SIM KOLEKTIF DI SELURUH SAMSAT \
INDONESIA", 0, 0, "DISINFORMASI (HOAKS)", "FEBRUARI", 13, "ADUAN", 2020}, {
       19, 32, "JAWA BARAT", "PASIEN VIRUS CORONA DI APARTEMEN TAMAN ANGGREK",
         0, 0, "MISINFORMASI (HOAKS)", "FEBRUARI", 8, "ADUAN", 2020}, {
       20, 32, "JAWA BARAT", 
        "VIDEO WARGA CHINA IKUT SHALAT GARA-GARA VIRUS CORONA", 0, 0, 
        "DISINFORMASI (HOAKS)", "FEBRUARI", 8, "ADUAN", 2020}, {
       21, 32, "JAWA BARAT", "INFORMASI UJI COBA TILANG ELEKTRONIK DI BOGOR", 
        0, 0, "DISINFORMASI (HOAKS)", "FEBRUARI", 7, "ADUAN", 2020}, {
       22, 32, "JAWA BARAT", "PINGGIR TOL CIPULARANG KM 118 KEMBALI LONGSOR", 
        0, 0, "BENAR", "FEBRUARI", 6, "ADUAN", 2020}, {
       23, 32, "JAWA BARAT", 
        "INFO DARI DUBES KBRI : JANGAN MAKAN DULU PRODUKSI NEGERI CINA, \
PEKERJA PABRIKNYA PENGIDAP VIRUS CARONA", 0, 0, "DISINFORMASI (HOAKS)", 
        "FEBRUARI", 5, "ADUAN", 2020}, {
       24, 32, "JAWA BARAT", 
        "KOMPAS TV MENYIARKAN 5 PASIEN VIRUS CORONA DI SEMARANG, 1 ORANG \
MENINGGAL", 0, 0, "DISINFORMASI (HOAKS)", "FEBRUARI", 5, "ADUAN", 2020}, {
       25, 32, "JAWA BARAT", 
        "FOTO SEORANG ANAK LAKI-LAKI YANG TAMPAK SEDANG DIMANDIKAN DENGAN \
BEKAS JAHITAN DIBAGIAN PERUT BAWAH HINGGA BAGIAN DADA", 0, 0, 
        "DISINFORMASI (HOAKS)", "FEBRUARI", 4, "ADUAN", 2020}, {
       26, 32, "JAWA BARAT", 
        "HINDARI PENYEBARAN VIRUS, TIONGKOK MINTA PERSETUJUAN PENGADILAN \
UNTUK MEMBUNUH LEBIH DARI 20.000 PASIEN CORONAVIRUS", 0, 0, 
        "DISINFORMASI (HOAKS)", "FEBRUARI", 4, "ADUAN", 2020}, {
       27, 32, "JAWA BARAT", "INFO PEMBUATAN SIM KOLEKTIF", 0, 0, 
        "DISINFORMASI (HOAKS)", "FEBRUARI", 4, "ADUAN", 2020}, {
       28, 32, "JAWA BARAT", 
        "MINYAK MASAK JENAMA ASRI ADALAH PRODUK SYARIKAT LEONG HUP PENTERNAK \
BABI TERBESAR DI MELAKA MALAYSIA", 0, 0, "DISINFORMASI (HOAKS)", "FEBRUARI", 
        4, "ADUAN", 2020}, {
       29, 32, "JAWA BARAT", 
        "MINYAK MASAK JENAMA ASRI MILIK SYARIKAT LEONG HUP PENTERNAK BABI \
TERBESAR DI MELAKA", 0, 0, "DISINFORMASI (HOAKS)", "FEBRUARI", 4, "ADUAN", 
        2020}, {30, 32, "JAWA BARAT", 
        "TUJUH PENUMPANG LION AIR RUTE TIONGKOK - MANADO TERINFEKSI VIRUS \
CORONA", 0, 0, "MISINFORMASI (HOAKS)", "FEBRUARI", 4, "ADUAN", 2020}, {
       31, 32, "JAWA BARAT", 
        "PUKUL 23.00 WIB MALAM INI, PESAWAT HELIKOPTER MALAYSIA DAN SINGAPURA \
AKAN SEMPROTKAN RACUN PEMBASMI CORONA COVID-19", 0, 0, "DISINFORMASI (HOAKS)",
         "MARET", 93, "ADUAN", 2020}, {
       32, 32, "JAWA BARAT", 
        "ALAMAT PASIEN POSITIF CORONA YANG MENINGGAL DI RSHS", 0, 0, 
        "MISINFORMASI (HOAKS)", "MARET", 49, "ADUAN", 2020}, {
       33, 32, "JAWA BARAT", 
        "RIDWAN KAMIL : 30 MARET - 20 APRIL 2020 AREA BANDUNG, CIMAHI, \
CIBIRU, CILEUNYI, LEMBANG AKAN LOCKDOWN", 0, 0, "DISINFORMASI (HOAKS)", 
        "MARET", 49, "ADUAN", 2020}, {
       34, 32, "JAWA BARAT", 
        "FOTO PASIEN POSITIF CORONA YANG KABUR DARI RUMAH SAKIT ADALAH DRIVER \
GOJEK", 0, 0, "MISINFORMASI (HOAKS)", "MARET", 41, "ADUAN", 2020}, {
       35, 32, "JAWA BARAT", 
        "VOICE NOTE : RSHS BANDUNG TANGANI RESIDEN ANESTESI YANG MENINGGAL \
DUNIA, DUA ORANG DIISOLASI DAN LIMA ORANG BERSTATUS SUSPECT COVID-19", 0, 0, 
        "DISINFORMASI (HOAKS)", "MARET", 41, "ADUAN", 2020}, {
       36, 32, "JAWA BARAT", 
        "PESAN LARANGAN KELUAR RUMAH AKIBAT PUNCAK INKUBASI CORONA COVID-19", 
        0, 0, "DISINFORMASI (HOAKS)", "MARET", 37, "ADUAN", 2020}, {
       37, 32, "JAWA BARAT", 
        "CHINA BERHASIL CIPTAKAN VAKSIN COVID-19 DAN SIAP DI PRODUKSI MASSAL",
         0, 0, "BENAR", "MARET", 33, "ADUAN", 2020}, {
       38, 32, "JAWA BARAT", "VIRUS BARU YAITU VIRUS HANTA MUNCUL DI CHINA", 
        0, 0, "BENAR", "MARET", 26, "ADUAN", 2020}, {
       39, 32, "JAWA BARAT", 
        "PESAN BERANTAI TENTANG PUNCAK PENYEBARAN CORONA", 0, 0, 
        "DISINFORMASI (HOAKS)", "MARET", 21, "ADUAN", 2020}, {
       40, 32, "JAWA BARAT", 
        "VOICE NOTE YANG MENGATASNAMAKAN RSHS TENTANG REDZONE DAN PASIEN DI \
RSHS", 0, 0, "DISINFORMASI (HOAKS)", "MARET", 18, "ADUAN", 2020}, {
       41, 32, "JAWA BARAT", 
        "TERUNGKAP, 238 WNI DARI WUHAN TAK DI TES VIRUS CORONA, ALATNYA \
MAHAL", 0, 0, "BENAR", "MARET", 17, "ADUAN", 2020}, {
       42, 32, "JAWA BARAT", "DUA ORANG POSITIF VIRUS CORONA DI INDONESIA", 0,
         0, "BENAR", "MARET", 16, "ADUAN", 2020}, {
       43, 32, "JAWA BARAT", 
        "PEMERINTAH MEMPERPANJANG STATUS DARURAT BENCANA COVID-19 HINGGA 29 \
MEI", 0, 0, "BENAR", "MARET", 16, "ADUAN", 2020}, {
       44, 32, "JAWA BARAT", 
        "SEMUA MASYARAKAT YANG PUNYA E-KTP, MULAI 28 MARET BERHAK MENDAPAT \
KONPENSASI SEJUMLAH RP. 1.250.000", 0, 0, "MISINFORMASI (HOAKS)", "MARET", 15,
         "ADUAN", 2020}, {
       45, 32, "JAWA BARAT", 
        "UTUSAN RIDWAN KAMIL AKAN MELAKUKAN LOCKDOWN DI KOTA BANDUNG", 0, 0, 
        "DISINFORMASI (HOAKS)", "MARET", 14, "ADUAN", 2020}, {
       46, 32, "JAWA BARAT", 
        "ANGIN DARI UTARA KE SELATAN MEMBAWA WABAH PENYAKIT MELEWATI \
INDONESIA MENUJU AUSTRALIA", 0, 0, "DISINFORMASI (HOAKS)", "APRIL", 84, 
        "ADUAN", 2020}, {
       47, 32, "JAWA BARAT", 
        "PESAN BERANTAI HASIL RAPAT DENGAN DINAS INDAG KOTA BANDUNG TENTANG \
INFO PSBB DI BANDUNG RAYA", 0, 0, "MISINFORMASI (HOAKS)", "APRIL", 38, 
        "ADUAN", 2020}, {
       48, 32, "JAWA BARAT", 
        "POLRI AKAN MELAKUKAN RAZIA GABUNGAN TERKAIT BALAS DENDAM KELUARGA \
GENG MOTOR DAN PELAKU PEMBEGALAN", 0, 0, "DISINFORMASI (HOAKS)", "APRIL", 27, 
        "ADUAN", 2020}, {
       49, 32, "JAWA BARAT", 
        "HIMBAUAN UNTUK BERHENTI TOTAL SELAMA 3 HARI DARI TANGGAL 10-12 APRIL \
2020", 0, 0, "DISINFORMASI (HOAKS)", "APRIL", 26, "ADUAN", 2020}, {
       50, 32, "JAWA BARAT", 
        "INFORMASI TENTANG ADANYA PEMERASAN DENGAN SENJATA TAJAM DI BEBERAPA \
RUAS JALAN KOTA BANDUNG", 0, 0, "DISINFORMASI (HOAKS)", "APRIL", 21, "ADUAN", 
        2020}, {51, 32, "JAWA BARAT", 
        "MINIMARKET DI ANTAPANI BANDUNG DITUTUP KARENA KARYAWANNYA POSITIF \
COVID19", 0, 0, "BENAR", "APRIL", 21, "ADUAN", 2020}, {
       52, 32, "JAWA BARAT", 
        "PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", 0, 0, 
        "DISINFORMASI (HOAKS)", "APRIL", 18, "ADUAN", 2020}, {
       53, 32, "JAWA BARAT", 
        "RUTE PATROLI SKALA BESAR POLDA JABAR TANGGAL 10-12 APRIL 2020", 0, 0,
         "BENAR", "APRIL", 18, "ADUAN", 2020}, {
       54, 32, "JAWA BARAT", "KOMINFO LUNCURKAN APLIKASI PEDULI LINDUNGI", 0, 
        0, "BENAR", "APRIL", 17, "ADUAN", 2020}, {
       55, 32, "JAWA BARAT", 
        "PESAN BERANTAI: AKSI BALAS DENDAM PARA PEMBEGAL DAN GENG MOTOR PADA \
SELASA MALAM", 0, 0, "DISINFORMASI (HOAKS)", "APRIL", 16, "ADUAN", 2020}, {
       56, 32, "JAWA BARAT", 
        "PESAN PEMERINTAH TETAP DIRUMAH & JAGA JARAK, SEBAGAI INSENTIF \
PEMERINTAH GRATISKAN AKSES INTERNET", 0, 0, "DISINFORMASI (HOAKS)", "APRIL", 
        16, "ADUAN", 2020}, {
       57, 32, "JAWA BARAT", 
        "PROGRAM KARTU PRAKERJA DARI DISNAKERTRANS JABAR", 0, 0, "BENAR", 
        "APRIL", 11, "ADUAN", 2020}, {
       58, 32, "JAWA BARAT", 
        "ALFAMART BAGI-BAGI 6000 KUPON SENILAI RP. 2 JUTA", 0, 0, 
        "DISINFORMASI (HOAKS)", "APRIL", 10, "ADUAN", 2020}, {
       59, 32, "JAWA BARAT", 
        "VIDEO WARGA KELUYURAN DI ATAS JAM 2 SIANG DIANCAM PUKUL ROTAN SAAT \
PENERAPAN PSBB BANDUNG RAYA", 0, 0, "DISINFORMASI (HOAKS)", "APRIL", 10, 
        "ADUAN", 2020}, {
       60, 32, "JAWA BARAT", "LINK TES COVID19 DAPAT HADIAH", 0, 0, 
        "DISINFORMASI (HOAKS)", "APRIL", 9, "ADUAN", 2020}, {
       61, 32, "JAWA BARAT", 
        "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, KARENA ITU \
MODUS OPERANDI PKI", 0, 0, "DISINFORMASI (HOAKS)", "MEI", 48, "ADUAN", 
        2020}, {62, 32, "JAWA BARAT", 
        "PEMERINTAH INDONESIA MEMPERTIMBANGKAN MEMAKAI STRATEGI HERD \
IMMUNITY", 0, 0, "MISINFORMASI (HOAKS)", "MEI", 21, "ADUAN", 2020}, {
       63, 32, "JAWA BARAT", 
        "KEMENTERIAN KESEHATAN ITALIA ; COVID19 BUKAN KARENA VIRUS MELAINKAN \
BAKTERI DAN DIPERKUAT RADIASI 5G MNYEBABKAN PERADANGAN DAN HIPOKSIA", 0, 0, 
        "MISINFORMASI (HOAKS)", "MEI", 17, "ADUAN", 2020}, {
       64, 32, "JAWA BARAT", 
        "PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", 0, 0, 
        "DISINFORMASI (HOAKS)", "MEI", 17, "ADUAN", 2020}, {
       65, 32, "JAWA BARAT", 
        "LEBIH DAHSYAT DARI SERANGAN COVID-19, WABAH GIGITAN LEBAH MEMATIKAN \
KINI SERANG INDIA, CHINA DAN TURKI", 0, 0, "DISINFORMASI (HOAKS)", "MEI", 15, 
        "ADUAN", 2020}, {
       66, 32, "JAWA BARAT", 
        "PENGUNGKAPAN PENJUALAN DAGING BABI DI KABUPATEN BANDUNG", 0, 0, 
        "BENAR", "MEI", 15, "ADUAN", 2020}, {
       67, 32, "JAWA BARAT", 
        "RIDWAN KAMIL IZINKAN PENGURUS MASJID LAKSANAKAN SOLAT JUMAT DAN IDUL \
FITRI", 0, 0, "BENAR", "MEI", 15, "ADUAN", 2020}, {
       68, 32, "JAWA BARAT", 
        "VIDEO SEORANG IBU DAN KEDUA ANAKNYA GANTUNG DIRI DISEBABKAN \
LOCKDOWN", 0, 0, "DISINFORMASI (HOAKS)", "MEI", 15, "ADUAN", 2020}, {
       69, 32, "JAWA BARAT", 
        "VIDEO KERAMAIAN PASAR ANDIR BANDUNG DI TENGAH PSBB", 0, 0, 
        "DISINFORMASI (HOAKS)", "MEI", 14, "ADUAN", 2020}, {
       70, 32, "JAWA BARAT", 
        "DR. DR. SITI FADILAH SUPARI, SP.JP(K) : VAKSIN BILL GATES JANGAN \
DIGUNAKAN DI INDONESIA", 0, 0, "MISINFORMASI (HOAKS)", "MEI", 13, "ADUAN", 
        2020}, {71, 32, "JAWA BARAT", 
        "PSBB JAWA BARAT DI PERPANJANG SAMPAI 12 JUNI 2020", 0, 0, "BENAR", 
        "MEI", 13, "ADUAN", 2020}, {
       72, 32, "JAWA BARAT", 
        "TERSEBAR FOTO WANITA PASIEN POSITIF COVID19 YANG DISEBUTKAN KABUR \
DARI RUMAH SAKIT DI CIMAHI", 0, 0, "MISINFORMASI (HOAKS)", "MEI", 12, "ADUAN",
         2020}, {
       73, 32, "JAWA BARAT", 
        "5000 USTADZ DI JABAR AKAN DISUNTIK COVID-19 SAMPAI MATI", 0, 0, 
        "DISINFORMASI (HOAKS)", "MEI", 11, "ADUAN", 2020}, {
       74, 32, "JAWA BARAT", 
        "KISAH ABK INDONESIA DI KAPAL CHINA YANG DI PERLAKUKAN TIDAK \
MANUSIAWI HINGGA MENINGGAL MAYATNYA DI BUANG KE LAUT", 0, 0, "BENAR", "MEI", 
        10, "ADUAN", 2020}, {
       75, 32, "JAWA BARAT", 
        "PEDAGANG PASAR KORDON BUBAT SUDAH BANYAK YANG POSITIF COVID19", 0, 0,
         "MISINFORMASI (HOAKS)", "MEI", 10, "ADUAN", 2020}, {
       76, 32, "JAWA BARAT", 
        "KEMENTERIAN KESEHATAN ITALIA ; COVID19 BUKAN KARENA VIRUS MELAINKAN \
BAKTERI DAN DIPERKUAT RADIASI 5G MNYEBABKAN PERADANGAN DAN HIPOKSIA", 0, 0, 
        "MISINFORMASI (HOAKS)", "JUNI", 49, "ADUAN", 2020}, {
       77, 32, "JAWA BARAT", 
        "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", 0, 0, 
        "DISINFORMASI (HOAKS)", "JUNI", 13, "ADUAN", 2020}, {
       78, 32, "JAWA BARAT", 
        "RUMAH SAKIT PANCARAN KASIH MANADO SOGOK KELUARGA PASIEN YANG \
MENINGGAL AGAR PASIEN DIJADIKAN KORBAN COVID19", 0, 0, "DISINFORMASI (HOAKS)",
         "JUNI", 13, "ADUAN", 2020}, {
       79, 32, "JAWA BARAT", 
        "4 PEDAGANG POSITIF CORONA, 3 PASAR DI KOTA BANDUNG DITUTUP", 0, 0, 
        "BENAR", "JUNI", 11, "ADUAN", 2020}, {
       80, 32, "JAWA BARAT", 
        "CORONA MELANDA, BEBERAPA DISPENDA KOTA/KABUPATEN BERIKAN INSENTIF \
TAGIHAN PBB", 0, 0, "BENAR", "JUNI", 9, "ADUAN", 2020}, {
       81, 32, "JAWA BARAT", 
        "TERAPKAN PSBB PROPORSIONAL, BEBERAPA RUAS JALAN DI KOTA BANDUNG \
KEMBALI DITUTUP", 0, 0, "BENAR", "JUNI", 8, "ADUAN", 2020}, {
       82, 32, "JAWA BARAT", 
        "KANDUNG BAKTERI BERBAHAYA, KEMENTARIAN PERTANIAN MUSNAHKAN JAMUR \
ENOKI", 0, 0, "BENAR", "JUNI", 6, "ADUAN", 2020}, {
       83, 32, "JAWA BARAT", 
        "RIDWAN KAMIL SEBUT SEKOLAH DI JABAR AKAN DIBUKA PADA JANUARI 2021", 
        0, 0, "BENAR", "JUNI", 6, "ADUAN", 2020}, {
       84, 32, "JAWA BARAT", 
        "BOGOR SAAT INI JADI LAUTAN MERAH MEMBARA, PENYEBARAN VIRUSNYA BANYAK \
SEKALI", 0, 0, "BENAR", "JUNI", 5, "ADUAN", 2020}, {
       85, 32, "JAWA BARAT", 
        "TAK PAKAI MASKER DAN SARUNG TANGAN : JENIS PELANGGARAN YANG TERTERA \
DALAM LEMBAR SURAT TILANG", 0, 0, "MISINFORMASI (HOAKS)", "JUNI", 5, "ADUAN", 
        2020}, {86, 32, "JAWA BARAT", 
        "ANIES IJINKAN DISKOTEK DAN PANTAI PIJAT KEMBALI BEROPERASI", 0, 0, 
        "DISINFORMASI (HOAKS)", "JUNI", 4, "ADUAN", 2020}, {
       87, 32, "JAWA BARAT", 
        "ANTISEPTIC POVIDONE ATAU BETADINE TERBUKTI EFEKTIF MEMBUNUH 99.99% \
VIRUS COVID19 DALAM 30 DETIK", 0, 0, "BENAR", "JUNI", 4, "ADUAN", 2020}, {
       88, 32, "JAWA BARAT", 
        "IDE AL QURAN NUSANTARA MULAI DI REALISASIKAN, ARTI SURAT AL-MAIDAH \
51 BERUBAH DARI PEMIMPIN MENJADI TEMAN SETIA", 0, 0, "DISINFORMASI (HOAKS)", 
        "JUNI", 4, "ADUAN", 2020}, {
       89, 32, "JAWA BARAT", 
        "KHAWATIR BANGKITKAN PAHAM KOMUNIS, MUI KELUARKAN MAKLUMAT TOLAK RUU \
HIP", 0, 0, "BENAR", "JUNI", 4, "ADUAN", 2020}, {
       90, 32, "JAWA BARAT", 
        "27 TENAGA MEDIS DI 7 PUSKESMAS DI KOTA BANDUNG TERPAPAR VIRUS \
CORONA", 0, 0, "BENAR", "JUNI", 3, "ADUAN", 2020}, {
       91, 32, "JAWA BARAT", 
        "RATUSAN SISWA SECAPA AD BANDUNG POSITIF COVID-19", 0, 0, "BENAR", 
        "JULI", 31, "ADUAN", 2020}, {
       92, 32, "JAWA BARAT", 
        "LEBIH DARI 40 ORANG ASN SETDA JABAR TERINDIKASI POSITIF COVID-19, \
GEDUNG SATE DITUTUP SEMENTARA", 0, 0, "BENAR", "JULI", 23, "ADUAN", 2020}, {
       93, 32, "JAWA BARAT", 
        "MAHKAMAH AGUNG KABULKAN GUGATAN PILPRES 2019, KEMENANGAN JOKOWI \
DIBATALKAN", 0, 0, "MISINFORMASI (HOAKS)", "JULI", 22, "ADUAN", 2020}, {
       94, 32, "JAWA BARAT", 
        "MULAI 27 JULI 2020 BAGI YANG TIDAK BERMASKER DI TEMPAT UMUM DI JAWA \
BARAT KENA DENDA 100-150RIBU", 0, 0, "BENAR", "JULI", 21, "ADUAN", 2020}, {
       95, 32, "JAWA BARAT", 
        "WHO : PENULARAN CORONA TAK LAGI HANYA LEWAT DROPLET TAPI JUGA UDARA",
         0, 0, "DISINFORMASI (HOAKS)", "JULI", 19, "ADUAN", 2020}, {
       96, 32, "JAWA BARAT", 
        "ISRAEL BERJANJI BAHWA INDONESIA AKAN DIBUAT SEPERTI PALESTINA", 0, 0,
         "DISINFORMASI (HOAKS)", "JULI", 16, "ADUAN", 2020}, {
       97, 32, "JAWA BARAT", 
        "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 0, 0, 
        "DISINFORMASI (HOAKS)", "JULI", 14, "ADUAN", 2020}, {
       98, 32, "JAWA BARAT", 
        "RADIASI LASER THERMO GUN BERBAHAYA BAGI TUBUH MANUSIA", 0, 0, 
        "DISINFORMASI (HOAKS)", "JULI", 14, "ADUAN", 2020}, {
       99, 32, "JAWA BARAT", "99 PERSONEL TNI PUDIKOM CIMAHI POSITIF CORONA", 
        0, 0, "BENAR", "JULI", 12, "ADUAN", 2020}, {
       100, 32, "JAWA BARAT", 
        "MATA PELAJARAN PAI DAN BAHASA ARAB AKAN DIHAPUS DARI KURIKULUM", 0, 
        0, "MISINFORMASI (HOAKS)", "JULI", 12, "ADUAN", 2020}, {
       101, 32, "JAWA BARAT", 
        "PESAN BERANTAI : RAZIA PENGGUNAAN MASKER DI KABUPATEN BANDUNG", 0, 0,
         "BENAR", "JULI", 11, "ADUAN", 2020}, {
       102, 32, "JAWA BARAT", 
        "PERPRES KARTU KERJA DI REVISI, PESERTA WAJIB KEMBALIKAN UANG \
BANTUAN", 0, 0, "BENAR", "JULI", 8, "ADUAN", 2020}, {
       103, 32, "JAWA BARAT", 
        "RATUSAN SISWA SECAPA AD BANDUNG TERPAPAR COVID-19", 0, 0, "BENAR", 
        "JULI", 8, "ADUAN", 2020}, {
       104, 32, "JAWA BARAT", 
        "ARIEF PUYONO USULKAN JUDI KASINO DAN TOGEL DI LEGALKAN", 0, 0, 
        "BENAR", "JULI", 7, "ADUAN", 2020}, {
       105, 32, "JAWA BARAT", 
        "KEBIJAKAN PEMDA JABAR TENTANG DENDA BAGI MASYARAKAT YANG TIDAK \
MENGGUNAKAN MASKER", 0, 0, "DISINFORMASI (HOAKS)", "JULI", 6, "ADUAN", 
        2020}, {106, 32, "JAWA BARAT", 
        "PEMERINTAH AKAN SEDIAKAN LAPTOP GRATIS UNTUK SISWA DAN GURU", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "AGUSTUS", 17,
         "ADUAN", 2020}, {
       107, 32, "JAWA BARAT", 
        "DI TENGAH PANDEMI COVID-19, PELAKU UMKM DI KOTA BANDUNG AKAN TERIMA \
BANTUAN MODAL USAHA", "EKONOMI", "EKONOMI", "BENAR", "AGUSTUS", 11, "ADUAN", 
        2020}, {108, 32, "JAWA BARAT", 
        "DI HARI KEMERDEKAAN RI KE-75 TAHUN, BI DAN KEMENKEU TERBITKAN UANG \
BARU PECAHAN 75.000", "EKONOMI", "EKONOMI", "BENAR", "AGUSTUS", 10, "ADUAN", 
        2020}, {109, 32, "JAWA BARAT", 
        "VIDEO SERANGAN RUDAL SEBELUM LEDAKAN DI BEIRUT LEBANON (VERSI 2)", 
        "KRIMINALITAS", "POLITIK", "DISINFORMASI (HOAKS)", "AGUSTUS", 10, 
        "ADUAN", 2020}, {
       110, 32, "JAWA BARAT", 
        "INFO RAZIA MASKER BESAR-BESARAN DI JABODETABEK LIBATKAN PEMDA, \
KEJAKSAAN DAN PM", "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", 
        "DISINFORMASI (HOAKS)", "AGUSTUS", 9, "ADUAN", 2020}, {
       111, 32, "JAWA BARAT", 
        "DAFTAR KARTU INDONESIA PINTAR SAMPAI DENGAN TANGGAL 25 AGUSTUS", 
        "HUKUM DAN REGULASI", "PENDIDIKAN", "DISINFORMASI (HOAKS)", "AGUSTUS",
         8, "ADUAN", 2020}, {
       112, 32, "JAWA BARAT", "KUOTA BELAJAR TELKOMSEL 10GB HARGA RP10", 
        "PENDIDIKAN", "PENDIDIKAN", "BENAR", "AGUSTUS", 7, "ADUAN", 2020}, {
       113, 32, "JAWA BARAT", 
        "RIDWAN KAMIL DAFTARKAN DIRI SEBAGAI RELAWAN UJI KLINIS VAKSIN VIRS \
CORONA DARI CHINA", "FIGUR", "KESEHATAN", "BENAR", "AGUSTUS", 6, "ADUAN", 
        2020}, {114, 32, "JAWA BARAT", 
        "ULANG TAHUN KE-10, WHATSAPP BAGIKAN KONEKSI INTERNET GRATIS 35GB \
SELAMA 6 BULAN", "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", 
        "AGUSTUS", 6, "ADUAN", 2020}, {
       115, 32, "JAWA BARAT", 
        "BROADCAST PERAMPOKAN BERMODUS PEMBAGIAN MASKER GRATIS MENGANDUNG \
BIUS", "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "AGUSTUS", 4, 
        "ADUAN", 2020}, {
       116, 32, "JAWA BARAT", "HURRY UP AND GET FREE SHOES FROM ADIDAS", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "AGUSTUS", 4, 
        "ADUAN", 2020}, {
       117, 32, "JAWA BARAT", 
        "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", "KESEHATAN", 
        "KESEHATAN", "DISINFORMASI (HOAKS)", "AGUSTUS", 3, "ADUAN", 2020}, {
       118, 32, "JAWA BARAT", 
        "HYDROXYCHLOROQUINE, ZINC DAN ZITHROMAX TERBUKTI MEMBANTU KESEMBUHAN \
COVID-19", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "AGUSTUS", 3, 
        "ADUAN", 2020}, {
       119, 32, "JAWA BARAT", 
        "KECAMATAN CIMAUNG KABUPATEN BANDUNG ZONA MERAH COVID-19, WISATA \
GUNUNG PUNTANG DITUTUP SEMENTARA", "HUKUM DAN REGULASI", "KESEHATAN", "BENAR",
         "AGUSTUS", 3, "ADUAN", 2020}, {
       120, 32, "JAWA BARAT", 
        "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, KARENA ITU \
MODUS OPERANDI PKI", "KESEHATAN", "POLITIK", "DISINFORMASI (HOAKS)", 
        "AGUSTUS", 3, "ADUAN", 2020}, {
       121, 32, "JAWA BARAT", 
        "BIMA ARYA GELAR RAZIA GDS, SISWA YANG TERJARING DIBERI SANKSI \
MENYEMPROT LINGKUNGAN DENGAN RADIUS 1000 METER", "HUKUM DAN REGULASI", 
        "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", "SEPTEMBER", 46, 
        "ADUAN", 2020}, {
       122, 32, "JAWA BARAT", 
        "ADIDAS MENAWARKAN 3100 SEPATU GRATIS, T-SHIRT, DAN MASKER", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "SEPTEMBER", 
        17, "ADUAN", 2020}, {
       123, 32, "JAWA BARAT", 
        "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", "KESEHATAN", 
        "KESEHATAN", "MISINFORMASI (HOAKS)", "SEPTEMBER", 10, "ADUAN", 
        2020}, {124, 32, "JAWA BARAT", 
        "BROADCAST PERAMPOKAN BERMODUS PEMBAGIAN MASKER GRATIS MENGANDUNG \
BIUS", "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "SEPTEMBER", 7,
         "ADUAN", 2020}, {
       125, 32, "JAWA BARAT", 
        "IMBAUAN DARI PANGLIMA PEMBEBASAN RAKYAT INDONESIA AGAR TINGKATKAN \
KEWASPADAAN PADA TANGGAL 29 DAN 30 SEPTEMBER 2020", "POLITIK", "POLITIK", 
        "DISINFORMASI (HOAKS)", "SEPTEMBER", 7, "ADUAN", 2020}, {
       126, 32, "JAWA BARAT", "PETA BANDUNG KOTA ZONA HITAM SEBARAN COVID19", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "SEPTEMBER", 6, 
        "ADUAN", 2020}, {
       127, 32, "JAWA BARAT", 
        "FOTO PELAKU PENUSUKAN SYEKH ALI JABER DENGAN BENDERA PKI", "POLITIK",
         "POLITIK,SARA", "DISINFORMASI (HOAKS)", "SEPTEMBER", 5, "ADUAN", 
        2020}, {128, 32, "JAWA BARAT", 
        "FOTO PENUSUK SYEKH ALI JABER MEMBAWA BENDERA TAUHID", "POLITIK", 
        "SARA", "DISINFORMASI (HOAKS)", "SEPTEMBER", 4, "ADUAN", 2020}, {
       129, 32, "JAWA BARAT", 
        "PENDATAAN GURU HONORER DI JAWA BARAT YANG AKAN DAPAT BANSOS DARI \
KEMENSOS", "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)",
         "SEPTEMBER", 4, "ADUAN", 2020}, {
       130, 32, "JAWA BARAT", 
        "100 GB DATA INTERNET TANPA PENGISIAN ULANG APA PUN UNTUK QUARANTINE \
(CORONAVIRUS)", "KRIMINALITAS", "KESEHATAN", "DISINFORMASI (HOAKS)", 
        "SEPTEMBER", 3, "ADUAN", 2020}, {
       131, 32, "JAWA BARAT", 
        "IMBAUAN BAGI MUI, PIMPINAN PONPES, ULAMA DAN TOKOH MASYARAKAT UNTUK \
TOLAK RENCANA VAKSINASI CORONA ASAL TIONGKOK KARENA MENGANDUNG BABI", 
        "KESEHATAN", "SARA", "DISINFORMASI (HOAKS)", "SEPTEMBER", 3, "ADUAN", 
        2020}, {132, 32, "JAWA BARAT", "PEMBACOKAN IMAM MESJID DI OKU SUMSEL",
         "KRIMINALITAS", "KRIMINALITAS", "BENAR", "SEPTEMBER", 3, "ADUAN", 
        2020}, {133, 32, "JAWA BARAT", 
        "POTENSI TSUNAMI 20 MTER DIPREDIKSI AKAN TERJADI DI PANTAI SELATAN \
JAWA BARAT DAN TIMUR", "PENDIDIKAN", "BENCANA ALAM", "BENAR", "SEPTEMBER", 3, 
        "ADUAN", 2020}, {
       134, 32, "JAWA BARAT", 
        "TOKOPEDIA GELAR PROMOSI DATA INTERNET 100 GB TANPA ISI ULANG", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "SEPTEMBER", 
        3, "ADUAN", 2020}, {
       135, 32, "JAWA BARAT", 
        "VIDEO BANJIR BANDANG 21 SEPTEMBER 2020 DI CICURUG SUKABUMI, \
HANYUTKAN RIBUAN RUMAH DAN MOBIL", "BENCANA ALAM", "BENCANA ALAM", 
        "DISINFORMASI (HOAKS)", "SEPTEMBER", 3, "ADUAN", 2020}, {
       136, 32, "JAWA BARAT", 
        "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "OKTOBER", 67, "ADUAN", 2020}, {
       137, 32, "JAWA BARAT", 
        "PENYATAAN ALIANSI DOKTER DUNIA BAHWA COVID19 TIDAK BERBAHAYA", 
        "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "OKTOBER", 32, 
        "ADUAN", 2020}, {
       138, 32, "JAWA BARAT", 
        "FAKTA BROADCAST 13 POINT UU CIPTA KERJA (OMNIBUS LAW)", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "OKTOBER", 18, "ADUAN", 2020}, {
       139, 32, "JAWA BARAT", 
        "PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", "KRIMINALITAS",
         "TEKNOLOGI", "DISINFORMASI (HOAKS)", "OKTOBER", 16, "ADUAN", 2020}, {
       140, 32, "JAWA BARAT", 
        "VOUCHER GAS GRATIS SENILAI 600 RIBU UNTUK ISI BAHAN BAKAR", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "OKTOBER", 14,
         "ADUAN", 2020}, {
       141, 32, "JAWA BARAT", 
        "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, KARENA ITU \
MODUS OPERANDI PKI", "KESEHATAN", "POLITIK", "DISINFORMASI (HOAKS)", 
        "OKTOBER", 12, "ADUAN", 2020}, {
       142, 32, "JAWA BARAT", 
        "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, FACEBOOK", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "OKTOBER", 7, 
        "ADUAN", 2020}, {
       143, 32, "JAWA BARAT", 
        "PEMERINTAH SADAP TELEPON DAN MEDSOS SEMUA WARGA", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "OKTOBER", 7, "ADUAN", 2020}, {
       144, 32, "JAWA BARAT", 
        "POIN-POIN UU CIPTA KERJA YANG MENYENGSARAKAN DAN MEMBUNUH RAKYAT \
SENDIRI", "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "OKTOBER", 7, "ADUAN", 2020}, {
       145, 32, "JAWA BARAT", 
        "SIMPAN NOMER WA +62 8999900411 UNTUK MEMPERMUDAH MENCARI KALIMAT \
DALAM KITAB AL QURAN", "TEKNOLOGI", "SARA", "BENAR", "OKTOBER", 7, "ADUAN", 
        2020}, {146, 32, "JAWA BARAT", 
        "ACARA DEMO OMNIBUS LAW DI ISTANA PRESIDEN HINGGA JOKOWI LENGSER", 
        "POLITIK", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", "OKTOBER", 6,
         "ADUAN", 2020}, {
       147, 32, "JAWA BARAT", 
        "PERNYATAAN ALIANSI DOKTER LINTAS NEGARA EROPA : COVID19 TIDAK \
BERBAHAYA", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "OKTOBER", 5, 
        "ADUAN", 2020}, {
       148, 32, "JAWA BARAT", 
        "RAYAKAN ULANG TAHUN KFC TAWARKAN 3000 SNACK BUCKET UNTUK SEMUA \
ORANG", "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "OKTOBER", 5, 
        "ADUAN", 2020}, {
       149, 32, "JAWA BARAT", 
        "SINOVAC YANG AKAN DIVAKSINKAN KE 175 JUTA RAKYAT INDONESIA TERNYATA \
VAKSIN BERBAHAYA", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", 
        "OKTOBER", 5, "ADUAN", 2020}, {
       150, 32, "JAWA BARAT", 
        "BIAYA TILANG TERBARU DI INDONESIA : KAPOLRI BARU MANTAP", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "OKTOBER", 4, "ADUAN", 2020}, {
       151, 32, "JAWA BARAT", 
        "VIDEO BOLA MATA JENAZAH DIDUGA PASIEN COVID19 DI PROBOLINGGO HILANG",
         "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "NOVEMBER", 8, 
        "ADUAN", 2020}, {
       152, 32, "JAWA BARAT", 
        "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "NOVEMBER", 5, "ADUAN", 2020}, {
       153, 32, "JAWA BARAT", 
        "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "NOVEMBER", 4,
         "ADUAN", 2020}, {
       154, 32, "JAWA BARAT", 
        "KOREA SELATAN KELABAKAN LIHAT WARGANYA MENINGGAL SATU PERSATU USAI \
DISUNTIK VAKSIN", "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", 
        "NOVEMBER", 4, "ADUAN", 2020}, {
       155, 32, "JAWA BARAT", 
        "LEWAT AKHIR TAHUN 2020 PENUKARAN TABUNG GAS ELPIJI BIRU 12 KG KE \
WARNA PINK BERBIAYA 500 RIBU", "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", 
        "DISINFORMASI (HOAKS)", "NOVEMBER", 4, "ADUAN", 2020}, {
       156, 32, "JAWA BARAT", 
        "RAZIA MASKER SERENTAK DAN AKAN KENA DENDA 250RB", 
        "HUKUM DAN REGULASI", "KESEHATAN", "DISINFORMASI (HOAKS)", "NOVEMBER",
         3, "ADUAN", 2020}, {
       157, 32, "JAWA BARAT", 
        "VIDEO WEJANGAN BUPATI SITUBONDO BEBERAPA JAM SEBELUM WAFAT", "FIGUR",
         "FIGUR", "DISINFORMASI (HOAKS)", "NOVEMBER", 3, "ADUAN", 2020}, {
       158, 32, "JAWA BARAT", 
        "DAPATKAN UANG 200 RIBU DAN BONUS TAMBAHAN DENGAN BERGABUNG DI \
BUZZBREAK", "TEKNOLOGI", "TEKNOLOGI", "BENAR", "NOVEMBER", 2, "ADUAN", 
        2020}, {159, 32, "JAWA BARAT", 
        "EVENT LAZADA SHARE POCKET, DAPATKAN CREDIT BELANJA SEBESAR \
RP150.000", "TEKNOLOGI", "TEKNOLOGI", "BENAR", "NOVEMBER", 2, "ADUAN", 
        2020}, {160, 32, "JAWA BARAT", 
        "HATI-HATI, BEBERAPA WARGA KOTA BANDUNG TERPAPAR COVID-19, SEBAGIAN \
MENINGGAL DUNIA", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", 
        "NOVEMBER", 2, "ADUAN", 2020}, {
       161, 32, "JAWA BARAT", 
        "INDOMARET BAGIKAN 5000 VOUCHER GRATIS SENILAI RP 2 JUTA", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "NOVEMBER", 2,
         "ADUAN", 2020}, {
       162, 32, "JAWA BARAT", 
        "INFO AKAN ADA RAZIA GABUNGAN BESOK, KADAPATAN TAK PAKAI MASKER \
LANGSUNG DIDENDA RP 250.000", "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", 
        "DISINFORMASI (HOAKS)", "NOVEMBER", 2, "ADUAN", 2020}, {
       163, 32, "JAWA BARAT", 
        "MEDIA AUSTRALIA MENYEBUT HRS MANTAN BURONAN PORNOGRAFI BALIK KE \
INDONESIA UNTUK LUNCURKAN REVOLUSI MORAL", "FIGUR", "FIGUR", "BENAR", 
        "NOVEMBER", 2, "ADUAN", 2020}, {
       164, 32, "JAWA BARAT", 
        "RAYAKAN ULANG TAHUN KFC TAWARKAN 3000 SNACK BUCKET UNTUK SEMUA \
ORANG", "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "NOVEMBER", 2,
         "ADUAN", 2020}, {
       165, 32, "JAWA BARAT", 
        "5 DOKTER MENINGGAL DUNIA KARENA COVID-19 PADA 18 NOVEMBER 2020", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "NOVEMBER", 1, 
        "ADUAN", 2020}, {
       166, 32, "JAWA BARAT", 
        "PENDAFTARAN INTERNET GRATIS 50 GB GELOMBANG KE-2", "EKONOMI", 
        "EKONOMI", "DISINFORMASI (HOAKS)", "DESEMBER", 16, "ADUAN", 2020}, {
       167, 32, "JAWA BARAT", 
        "PENDAFTARAN SUBSIDI KUOTA INTERNET SEBESAR 35 GIGABYTE", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 
        14, "ADUAN", 2020}, {
       168, 32, "JAWA BARAT", 
        "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, FACEBOOK", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 
        13, "ADUAN", 2020}, {
       169, 32, "JAWA BARAT", 
        "TEMPAT TIDUR PASIEN COVID-19 DI BEBERAPA RS KOTA BANDUNG PENUH, \
KONSUMSI MAKANAN ALKALI DENGAN PH LEBIH TINGGI BISA BUNUH VIRUS COVID-19", 
        "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "DESEMBER", 12, 
        "ADUAN", 2020}, {
       170, 32, "JAWA BARAT", 
        "BIMA ARYA GELAR RAZIA GDS, SISWA YANG TERJARING DIBERI SANKSI \
MENYEMPROT LINGKUNGAN DENGAN RADIUS 1000 METER", "HUKUM DAN REGULASI", 
        "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", "DESEMBER", 8, "ADUAN", 
        2020}, {171, 32, "JAWA BARAT", 
        "JOKOWI TAK MAU DISUNTIK VAKSIN DULUAN", "FIGUR", "FIGUR", 
        "DISINFORMASI (HOAKS)", "DESEMBER", 4, "ADUAN", 2020}, {
       172, 32, "JAWA BARAT", 
        "KONSUMSI MAKANAN ALKALI DENGAN PH LEBIH TINGGI BISA BUNUH VIRUS \
COVID-19", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "DESEMBER", 4, 
        "ADUAN", 2020}, {
       173, 32, "JAWA BARAT", "KUOTA BELAJAR TELKOMSEL 10GB HARGA RP10", 
        "PENDIDIKAN", "PENDIDIKAN", "BENAR", "DESEMBER", 4, "ADUAN", 2020}, {
       174, 32, "JAWA BARAT", 
        "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "DESEMBER", 3, "ADUAN", 2020}, {
       175, 32, "JAWA BARAT", 
        "KABAR BAIK!!! SEMANGKUK AIR BAWANG PUTIH YANG BARU DIREBUS DAPAT \
SEMBUHKAN VIRUS CORONA", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", 
        "DESEMBER", 3, "ADUAN", 2020}, {
       176, 32, "JAWA BARAT", 
        "KUOTA INTERNET 100 GB GRATIS TANPA ISI ULANG KARENA PANDEMI COVID19",
         "TEKNOLOGI", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "DESEMBER", 3, 
        "ADUAN", 2020}, {
       177, 32, "JAWA BARAT", 
        "TKW ASAL MADIUN SETENGAH LUMPUH SETELAH DISUNTIK VAKSIN", 
        "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "DESEMBER", 3, 
        "ADUAN", 2020}, {
       178, 32, "JAWA BARAT", "VOUCHER TAHUN BARU BERHADIAH DARI ALFAMART", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 3,
         "ADUAN", 2020}, {
       179, 32, "JAWA BARAT", 
        "ALFAMART TAWARKAN VOUCHER RP 800.000 UNTUK SEMUA ORANG", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 2,
         "ADUAN", 2020}, {
       180, 32, "JAWA BARAT", 
        "BUKTI KOMNAS HAM SUDAH LENGKAP, 100 JUTA UNTUK TUTUP MULUT KELUARGA \
LASKAR", "HUKUM DAN REGULASI", "SARA", "DISINFORMASI (HOAKS)", "DESEMBER", 2, 
        "ADUAN", 2020}, {
       181, 32, "JAWA BARAT", 
        "STATUS BERLOGO WHATSAPP ADALAH PENIPUAN UNTUK ALIHKAN DATA PRIBADI \
DAN REKENING BANK", "TEKNOLOGI", "TEKNOLOGI", "DISINFORMASI (HOAKS)", 
        "JANUARI", 25, "ADUAN", 2021}, {
       182, 32, "JAWA BARAT", "SUBSIDI KUOTA INTERNET 75GB", "KRIMINALITAS", 
        "KRIMINALITAS", "DISINFORMASI (HOAKS)", "JANUARI", 24, "ADUAN", 
        2021}, {183, 32, "JAWA BARAT", 
        "CAIRAN VAKSIN TIDAK MASUK KE TUBUH JOKOWI", "KESEHATAN", "KESEHATAN",
         "DISINFORMASI (HOAKS)", "JANUARI", 13, "ADUAN", 2021}, {
       184, 32, "JAWA BARAT", 
        "BANTUAN SOSIAL FINANSIAL RP. 3.550.000 BAGI YANG KERJA TAHUN 2000 \
DAN 2021", "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "JANUARI", 
        9, "ADUAN", 2021}, {
       185, 32, "JAWA BARAT", 
        "KORBAN BERGELIMPANGAN, RATUSAN WARGA TERKAPAR USAI DISUNTIK SINOVAC",
         "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "JANUARI", 9, 
        "ADUAN", 2021}, {
       186, 32, "JAWA BARAT", 
        "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "JANUARI", 7, "ADUAN", 2021}, {
       187, 32, "JAWA BARAT", "LINK PENDAFTARAN KARTU PRAKERJA GELOMBANG 12", 
        "HUKUM DAN REGULASI", "KRIMINALITAS", "DISINFORMASI (HOAKS)", 
        "JANUARI", 7, "ADUAN", 2021}, {
       188, 32, "JAWA BARAT", 
        "VIDEO SEORANG PRIA PINGSAN SESUDAH DISUNTIK VAKSIN", "KESEHATAN", 
        "KESEHATAN", "MISINFORMASI (HOAKS)", "JANUARI", 7, "ADUAN", 2021}, {
       189, 32, "JAWA BARAT", 
        "BRIGJEN HENDRA KURNIAWAN ADALAH ANAK KANDUNG PRESIDEN CINA XI \
JINPING", "FIGUR", "FIGUR", "DISINFORMASI (HOAKS)", "JANUARI", 6, "ADUAN", 
        2021}, {190, 32, "JAWA BARAT", 
        "KASDIM 0817 GRESIK MAYOR SUGENG RIYADI MENINGGAL AKIBAT SIANGNYA \
DISUNTIK VAKSIN", "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "JANUARI",
         6, "ADUAN", 2021}, {
       191, 32, "JAWA BARAT", 
        "WASPADA POTENSI GEMPA AKIBAT SESAR LEMBANG BANDUNG, BMKG TEKANKAN \
PENTINGNYA MITIGASI", "BENCANA ALAM", "BENCANA ALAM", "BENAR", "JANUARI", 6, 
        "ADUAN", 2021}, {
       192, 32, "JAWA BARAT", 
        "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, FACEBOOK", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "JANUARI", 5, "ADUAN", 2021}, {
       193, 32, "JAWA BARAT", 
        "CARA CEK CALON PENERIMA VAKSIN COVID19 GRATIS MELALUI WEBSITE \
PEDULILINDUNGI.ID", "KESEHATAN", "KESEHATAN", "BENAR", "JANUARI", 5, "ADUAN", 
        2021}, {194, 32, "JAWA BARAT", 
        "LINK PENDAFTARAN BANPRES UMKM TAHAP II", "HUKUM DAN REGULASI", 
        "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", "JANUARI", 5, "ADUAN", 
        2021}, {195, 32, "JAWA BARAT", 
        "PULUHAN SANTRI KERACUNAN AKIBAT VAKSIN COVID-19", "KESEHATAN", 
        "KESEHATAN", "DISINFORMASI (HOAKS)", "JANUARI", 5, "ADUAN", 2021}, {
       196, 32, "JAWA BARAT", 
        "KOMINFO BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, SISWA, \
MAHASISWA SELAMA MASA PANDEMI", "KRIMINALITAS", "TEKNOLOGI", 
        "DISINFORMASI (HOAKS)", "FEBRUARI", 24, "ADUAN", 2021}, {
       197, 32, "JAWA BARAT", "LINK PENDAFTARAN KARTU PRAKERJA GELOMBANG 12", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "FEBRUARI", 
        20, "ADUAN", 2021}, {
       198, 32, "JAWA BARAT", 
        "PESAN BERANTAI BERISI INFORMASI PENDAFTARAN VAKSINASI COVID-19 UNTUK \
LANSIA", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "FEBRUARI", 8, 
        "ADUAN", 2021}, {
       199, 32, "JAWA BARAT", 
        "JOKOWI BUKA PINTU IZIN INVESTASI UNTUK INDUSTRI MIRAS BESAR SAMPAI \
ECERAN", "HUKUM DAN REGULASI", "EKONOMI", "BENAR", "FEBRUARI", 7, "ADUAN", 
        2021}, {200, 32, "JAWA BARAT", 
        "BIAYA TILANG TERBARU DI INDONESIA : KAPOLRI BARU MANTAP", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "FEBRUARI", 5, "ADUAN", 2021}, {
       201, 32, "JAWA BARAT", 
        "KEMENDIKBUD BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, \
SISWA, MAHASISWA SELAMA MASA PANDEMI", "KRIMINALITAS", "KESEHATAN", 
        "DISINFORMASI (HOAKS)", "FEBRUARI", 5, "ADUAN", 2021}, {
       202, 32, "JAWA BARAT", 
        "INDUSTRI ARAK HINGGA TUAK DISAHKAN, GUBERNUR BALI TERIMA KASIH \
KEPADA PRESIDEN JOKOWI", "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "BENAR", 
        "FEBRUARI", 3, "ADUAN", 2021}, {
       203, 32, "JAWA BARAT", 
        "ITALY TELAH MELAKUKAN PROSES BEDAH MAYAT TERHADAP PASIEN CORONA YANG \
TELAH MENINGGAL", "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", 
        "FEBRUARI", 3, "ADUAN", 2021}, {
       204, 32, "JAWA BARAT", 
        "SMS PEMBERITAHUAN PENERIMA DANA BANTUAN DARI KANTOR BPJS PUSAT", 
        "HUKUM DAN REGULASI,KRIMINALITAS", "KESEHATAN,KRIMINALITAS", 
        "DISINFORMASI (HOAKS)", "FEBRUARI", 3, "ADUAN", 2021}, {
       205, 32, "JAWA BARAT", 
        "UANG REDENOMINASI PECAHAN RP 100 BERGAMBAR JOKOWI", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "FEBRUARI", 3, "ADUAN", 2021}, {
       206, 32, "JAWA BARAT", "AL-QURAN PALSU KEMBALI BEREDAR", "SARA", 
        "SARA", "DISINFORMASI (HOAKS)", "FEBRUARI", 2, "ADUAN", 2021}, {
       207, 32, "JAWA BARAT", 
        "ARAB SAUDI TOLAK JEMAAH HAJI INDONESIA KARENA BELUM BAYAR AKOMODASI",
         "HUKUM DAN REGULASI", "SARA", "DISINFORMASI (HOAKS)", "FEBRUARI", 2, 
        "ADUAN", 2021}, {
       208, 32, "JAWA BARAT", 
        "BANTUAN SOSIAL FINANSIAL RP. 3.550.000 BAGI YANG KERJA TAHUN 2000 \
DAN 2021", "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "FEBRUARI",
         2, "ADUAN", 2021}, {
       209, 32, "JAWA BARAT", 
        "BENDUNGAN WALAHAR AIRNYA MELUAP, YANG DI KARAWANG SIAP-SIAP", 
        "BENCANA ALAM", "BENCANA ALAM", "DISINFORMASI (HOAKS)", "FEBRUARI", 2,
         "ADUAN", 2021}, {
       210, 32, "JAWA BARAT", 
        "JOKOWI LEGALKAN MIRAS HINGGA KELAS ECERAN, KETUM MUHAMMADIYAH: \
BANGSA KITA SUDAH KEHILANGAN ARAH", "HUKUM DAN REGULASI", "EKONOMI", "BENAR", 
        "FEBRUARI", 2, "ADUAN", 2021}, {
       211, 32, "JAWA BARAT", 
        "TUJUH PENUMPANG LION AIR RUTE TIONGKOK - MANADO TERINFEKSI VIRUS \
CORONA", "MISINFORMASI (HOAKS)", 0, 0, "FEBRUARI", 4, "ADUAN", 2021}, {
       212, 32, "JAWA BARAT", 
        "BPJS KESEHATAN SALURKAN BANSOS FINANSIAL BAGI YANG BEKERJA ANTARA \
TAHUN 2000 DAN 2021", "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", 
        "MARET", 23, "ADUAN", 2021}, {
       213, 32, "JAWA BARAT", 
        "SUBSIDI PULSA 200 RIBU DAN KUOTA 50 GB KEMENDIKBUD DIPERPANJANG \
LAGI", "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "MARET", 11, 
        "ADUAN", 2021}, {
       214, 32, "JAWA BARAT", 
        "JOKOWI BUKA PINTU IZIN INVESTASI UNTUK INDUSTRI MIRAS BESAR SAMPAI \
ECERAN", "HUKUM DAN REGULASI", "EKONOMI", "BENAR", "MARET", 10, "ADUAN", 
        2021}, {215, 32, "JAWA BARAT", "SANKSI MUDIK", "HUKUM DAN REGULASI", 
        "TRANSPORTASI", "DISINFORMASI (HOAKS)", "MARET", 9, "ADUAN", 2021}, {
       216, 32, "JAWA BARAT", 
        "GURU DI SUKABUMI JADI SASARAN KEMARAHAN PERANGKAT DESA GEGARA \
POSTING JALAN RUSAK", "INFRASTRUKTUR", "INFRASTRUKTUR", "BENAR", "MARET", 5, 
        "ADUAN", 2021}, {
       217, 32, "JAWA BARAT", 
        "KEMENDIKBUD BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, \
SISWA, MAHASISWA SELAMA MASA PANDEMI", "KRIMINALITAS", "KESEHATAN", 
        "DISINFORMASI (HOAKS)", "MARET", 5, "ADUAN", 2021}, {
       218, 32, "JAWA BARAT", "TILANG ELEKTRONIK BERLAKU MULAI MARET 2021", 
        "HUKUM DAN REGULASI", "TRANSPORTASI", "BENAR", "MARET", 5, "ADUAN", 
        2021}, {219, 32, "JAWA BARAT", 
        "VAKSINASI COVID-19 UNTUK LANSIA (USIA DIATAS 60) BISA TANPA ONLINE \
LANGSUNG DATANG KE LOKASI", "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", 
        "MARET", 5, "ADUAN", 2021}, {
       220, 32, "JAWA BARAT", 
        "GURU HONORER DI LELES GARUT JADI LUMPUH SETELAH MENDAPAT VAKSIN \
KEDUA", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "MARET", 4, "ADUAN",
         2021}, {
       221, 32, "JAWA BARAT", 
        "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "MARET", 3, 
        "ADUAN", 2021}, {
       222, 32, "JAWA BARAT", 
        "KFC SEDIAKAN HADIAH BUCKET AYAM DI PERINGATAN HARI PEREMPUAN \
INTERNASIONAL 2021", "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", 
        "MARET", 3, "ADUAN", 2021}, {
       223, 32, "JAWA BARAT", 
        "MUAL HINGGA BENGKAK, WARTAWAN JAWA POS TV DILARIKAN KE IGD PASCA \
DIVAKSIN SINOVAC", "KESEHATAN", "KESEHATAN", "BENAR", "MARET", 3, "ADUAN", 
        2021}, {224, 32, "JAWA BARAT", "FOTO BOTOL MIRAS DENGAN LABEL HALAL", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "MARET", 2, "ADUAN", 2021}, {
       225, 32, "JAWA BARAT", 
        "DIRUT VIVA COSMETIC SURABAYA, PAK SUSANTO MENINGGAL 3 HARI KEMUDIAN \
DI RS RKZ KARENA COVID SETELAH VAKSIN PERTAMA", "KESEHATAN", "KESEHATAN", 
        "DISINFORMASI (HOAKS)", "MARET", 2, "ADUAN", 2021}, {
       226, 32, "JAWA BARAT", 
        "JUAL MINUMAN KERAS HUKUMNYA BOLEH UNTUK MEMBANTU KAS NEGARA", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "MARET", 2, "ADUAN", 2021}, {
       227, 32, "JAWA BARAT", 
        "SUBSIDI PULSA 200 RIBU DAN KUOTA 95 GB KEMENDIKBUD RI", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "APRIL", 13, 
        "ADUAN", 2021}, {
       228, 32, "JAWA BARAT", 
        "RILIS NAMA-NAMA DOKTER YANG WAFAT DI HARI YANG SAMA KARENA COVID19", 
        "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "APRIL", 11, 
        "ADUAN", 2021}, {
       229, 32, "JAWA BARAT", "VIDEO CACING DI MASKER IMPOR ASAL CHINA", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "APRIL", 7, "ADUAN",
         2021}, {
       230, 32, "JAWA BARAT", "BANTUAN SOSIAL FINANSIAL BRI RP. 5.500.000", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "APRIL", 6, 
        "ADUAN", 2021}, {
       231, 32, "JAWA BARAT", "POSTINGAN STATUS AKUN YANG DIHACK", 
        "KRIMINALITAS", "TEKNOLOGI", "BENAR", "APRIL", 5, "ADUAN", 2021}, {
       232, 32, "JAWA BARAT", "BANTUAN SOSIAL FINANSIAL BJB RP. 5.500.000", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "APRIL", 4, 
        "ADUAN", 2021}, {
       233, 32, "JAWA BARAT", 
        "CARA MENDAPATKAN SUBSIDI LISTRIK PLN DENGAN KLIK TAUTAN INI", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "APRIL", 4, 
        "ADUAN", 2021}, {
       234, 32, "JAWA BARAT", 
        "GURU SUKABUMI LUMPUH USAI VAKSIN COVID-19 DOSIS 2", "KESEHATAN", 
        "KESEHATAN", "BENAR", "APRIL", 4, "ADUAN", 2021}, {
       235, 32, "JAWA BARAT", 
        "LINK ULTAH INDOMIE KE-60 BERHADIAH 1000 SMARTWATCH", "KRIMINALITAS", 
        "TEKNOLOGI", "DISINFORMASI (HOAKS)", "APRIL", 4, "ADUAN", 2021}, {
       236, 32, "JAWA BARAT", 
        "LINK ULTAH TELKOMSEL KE-60 BERHADIAH 1000 SMARTWATCH", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "APRIL", 4, 
        "ADUAN", 2021}, {
       237, 32, "JAWA BARAT", 
        "ANGGOTA BRIMOB MALUKU MENINGGAL DUNIA SETELAH DIVAKSIN ASTRAZENECA", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "APRIL", 3, "ADUAN",
         2021}, {
       238, 32, "JAWA BARAT", 
        "CINA TELAH MENYEBAR PENYAKIT LEWAT MASKER BARU YANG MASUK KE \
INDONESIA", "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "APRIL", 3, 
        "ADUAN", 2021}, {
       239, 32, "JAWA BARAT", "FOTO KARTINI MEMAKAI HIJAB", "FIGUR", "SARA", 
        "DISINFORMASI (HOAKS)", "APRIL", 3, "ADUAN", 2021}, {
       240, 32, "JAWA BARAT", 
        "LINK ULTAH INDOFOOD KE-50 BERHADIAH 1000 SMARTWATCH", "KRIMINALITAS",
         "TEKNOLOGI", "DISINFORMASI (HOAKS)", "APRIL", 3, "ADUAN", 2021}, {
       241, 32, "JAWA BARAT", 
        "RATUSAN WN INDIA MASUK INDONESIA KE INDONESIA DI SAAT COVID-19 \
MEROKET DI INDIA", "KESEHATAN", "HUKUM DAN REGULASI", "BENAR", "APRIL", 3, 
        "ADUAN", 2021}, {
       242, 32, "JAWA BARAT", 
        "PULUHAN WARGA CHINA TIBA DI BANDARA SOETTA SELASA (4/5) SORE, \
LANGSUNG DIJEMPUT BUS", "HUKUM DAN REGULASI", "SARA", "BENAR", "MEI", 8, 
        "ADUAN", 2021}, {
       243, 32, "JAWA BARAT", 
        "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "MEI", 6, 
        "ADUAN", 2021}, {
       244, 32, "JAWA BARAT", 
        "RUSIA TIDAK MENEMUKAN VIRUS DARI HASIL OTOPSI JENAZAH COVID-19", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "MEI", 6, "ADUAN", 
        2021}, {245, 32, "JAWA BARAT", 
        "YANG SUDAH DIVAKSIN SIAP-SIAP MATI DINI DALAM JANGKA WAKTU 2 TAHUN", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "MEI", 6, "ADUAN", 
        2021}, {246, 32, "JAWA BARAT", 
        "GURU SUKABUMI LUMPUH USAI VAKSIN COVID-19 DOSIS 2", "KESEHATAN", 
        "KESEHATAN", "BENAR", "MEI", 5, "ADUAN", 2021}, {
       247, 32, "JAWA BARAT", 
        "PENYEKATAN MUDIK DI PERBATASAN BEKASI-BOGOR, TAK TANGGUNG- TANGGUNG \
TNI NURUNIN TANK BAJA", "HUKUM DAN REGULASI", "POLITIK", 
        "DISINFORMASI (HOAKS)", "MEI", 5, "ADUAN", 2021}, {
       248, 32, "JAWA BARAT", 
        "BENDA BERMAGNET BISA MENEMPEL DI LENGAN PENERIMA VAKSIN CORONA", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "MEI", 4, "ADUAN", 
        2021}, {249, 32, "JAWA BARAT", 
        "TULISAN ILMIAH IDI : COVID-19 ADALAH PENGELABUAN DAN PEMBODOHAN \
GLOBAL", "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "MEI", 4, "ADUAN", 
        2021}, {250, 32, "JAWA BARAT", 
        "CAMPURAN KELAPA MUDA, JERUK NIPIS, GARAM DAN MADU LENYAPKAN VIRUS \
CORONA", "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "MEI", 3, "ADUAN", 
        2021}, {251, 32, "JAWA BARAT", "GALANG DANA UNTUK PALESTINA", 
        "KRIMINALITAS", "KRIMINALITAS", "BENAR", "MEI", 3, "ADUAN", 2021}, {
       252, 32, "JAWA BARAT", 
        "LINK ULTAH COFFESHOP JANJI JIWA KE-30 BERHADIAH 1000 SMARTWATCH", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "MEI", 3, 
        "ADUAN", 2021}, {
       253, 32, "JAWA BARAT", 
        "PDIP USUL KE PEMERINTAH AGAR SELURUH PESANTREN DI INDONESIA DITUTUP",
         "POLITIK", "SARA", "DISINFORMASI (HOAKS)", "MEI", 3, "ADUAN", 
        2021}, {254, 32, "JAWA BARAT", 
        "PENGGUNAAN MASKER SEBABKAN MANUSIA KERACUNAN CO2", "KESEHATAN", 
        "KESEHATAN", "DISINFORMASI (HOAKS)", "MEI", 3, "ADUAN", 2021}, {
       255, 32, "JAWA BARAT", 
        "VIDEO MOBIL IRINGAN-IRINGAN JOKOWI MUDIK, RI 1 PULANG KAMPUNG", 
        "HUKUM DAN REGULASI", "FIGUR", "DISINFORMASI (HOAKS)", "MEI", 3, 
        "ADUAN", 2021}, {
       256, 32, "JAWA BARAT", 
        "7 BUMN BAKAL DIBUBARKAN. PLN DLM TAHAP RESTRUKTURISASI", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "MEI", 2, "ADUAN", 2021}, {
       257, 32, "JAWA BARAT", 
        "LINK BANTUAN UMKM BRI TAHAP 3 SEBESAR RP 2.100.000", "KRIMINALITAS", 
        "TEKNOLOGI", "DISINFORMASI (HOAKS)", "JUNI", 14, "ADUAN", 2021}, {
       258, 32, "JAWA BARAT", 
        "CAMPURAN KELAPA MUDA, JERUK NIPIS, GARAM DAN MADU LENYAPKAN VIRUS \
CORONA", "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "JUNI", 10, 
        "ADUAN", 2021}, {
       259, 32, "JAWA BARAT", 
        "RUSIA TIDAK MENEMUKAN VIRUS DARI HASIL OTOPSI JENAZAH COVID-19", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "JUNI", 9, "ADUAN", 
        2021}, {260, 32, "JAWA BARAT", 
        "RSHS DAN BEBERAPA RUMAH SAKIT DI BANDUNG DIPENUHI PASIEN COVID-19 \
DAN BANYAK YANG MENINGGAL DI UGD", "KESEHATAN", "KESEHATAN", 
        "DISINFORMASI (HOAKS)", "JUNI", 8, "ADUAN", 2021}, {
       261, 32, "JAWA BARAT", 
        "700 LEBIH JENAZAH DIMAKAMAKAN SECARA COVID-19, TERNYATA HASIL SWAB \
NEGATIF", "KESEHATAN", "HUKUM DAN REGULASI", "BENAR", "JUNI", 6, "ADUAN", 
        2021}, {262, 32, "JAWA BARAT", 
        "DR. SITI FADILAH (MANTAN MENKES) DAN NIDOM : GAGALKAH HERD IMUNITY \
?", "KESEHATAN", "KESEHATAN", "BENAR", "JUNI", 6, "ADUAN", 2021}, {
       263, 32, "JAWA BARAT", 
        "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "JUNI", 6, 
        "ADUAN", 2021}, {
       264, 32, "JAWA BARAT", 
        "SURAT EDARAN DIRJEN PELAYANAN KESEHATAN TENTANG PEMANFAATAN OBAT \
TRADISIONAL UNTUK PEMELIHARAAN KESEHATAN", "KESEHATAN", "KESEHATAN", "BENAR", 
        "JUNI", 6, "ADUAN", 2021}, {
       265, 32, "JAWA BARAT", 
        "INFO VAKSINASI COVID-19 DI PUSSENIF PPI SUPRATMAN BANDUNG", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "JUNI", 4, "ADUAN", 
        2021}, {266, 32, "JAWA BARAT", 
        "SURAT KLARIFIKASI KUOTA HAJI INDONESIA DARI KEDUTAAN ARAB SAUDI", 
        "HUKUM DAN REGULASI", "SARA", "BENAR", "JUNI", 4, "ADUAN", 2021}, {
       267, 32, "JAWA BARAT", 
        "VIDEO PASIEN COVID KEHABISAN RUANGAN DI RS BEKASI DAN TERLANTAR DI \
PARKIRAN", "KESEHATAN", "KESEHATAN", "BENAR", "JUNI", 4, "ADUAN", 2021}, {
       268, 32, "JAWA BARAT", 
        "AKUN WHATSAPP MENCATUT FOTO DAN NAMA ABDY YUHANA ANGGOTA DPRD JAWA \
BARAT", "FIGUR", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "JUNI", 3, "ADUAN", 
        2021}, {269, 32, "JAWA BARAT", 
        "ARTIKEL MENGATASNAMAKAN BRIGJEN TNI (PURN) DR. MARDJO SUBIANDONO \
AJAK WARGA BANGUN OPTIMISME HADAPI COVID 19", "KESEHATAN", "FIGUR", 
        "DISINFORMASI (HOAKS)", "JUNI", 3, "ADUAN", 2021}, {
       270, 32, "JAWA BARAT", 
        "JADWAL PELAKSANAAN VAKISNASI COVID19 DI KOTA BANDUNG", "KESEHATAN", 
        "KESEHATAN", "BENAR", "JUNI", 3, "ADUAN", 2021}, {
       271, 32, "JAWA BARAT", 
        "PELAKSANAAN VAKSINASI DI GRAND BALLROOM SUDIRMAN BANDUNG BANYAK YANG \
TERPAPAR COVID-19", "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "JUNI", 
        3, "ADUAN", 2021}, {
       272, 32, "JAWA BARAT", "LINK BANTUAN SOSIAL TUNAI PPKM DARURAT", 
        "HUKUM DAN REGULASI", "KESEHATAN", "DISINFORMASI (HOAKS)", "JULI", 37,
         "ADUAN", 2021}, {
       273, 32, "JAWA BARAT", 
        "PENUTUPAN SPBU SEMENTARA 12 JULI 2021-17 JULI 2021", 
        "HUKUM DAN REGULASI", "KESEHATAN", "DISINFORMASI (HOAKS)", "JULI", 17,
         "ADUAN", 2021}, {
       274, 32, "JAWA BARAT", 
        "VIDEO ALAT UJI SWAB ANTIGEN DI TETES AIR KERAN HASILNYA POSITIF \
COVID", "KESEHATAN", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "JULI", 8, "ADUAN", 
        2021}, {275, 32, "JAWA BARAT", 
        "MANTAN MENKES SITI FADILAH SUDAH SERING KENA COVID-19 SEJAK DULU", 
        "KESEHATAN", "FIGUR", "DISINFORMASI (HOAKS)", "JULI", 6, "ADUAN", 
        2021}, {276, 32, "JAWA BARAT", 
        "VIDEO BERITA DARI CNN INDONESIA POTENSI BAHAYA VAKSIN COVID - 19", 
        "KESEHATAN", "KESEHATAN", "BENAR", "JULI", 5, "ADUAN", 2021}, {
       277, 32, "JAWA BARAT", 
        "VIDEO JOKOWI DITENGAH KERUMUNAN WARGA TIONGKOK TANPA MEMAKAI MASKER",
         "KESEHATAN,POLITIK", "KESEHATAN,POLITIK", "DISINFORMASI (HOAKS)", 
        "JULI", 5, "ADUAN", 2021}, {
       278, 32, "JAWA BARAT", 
        "WARGA YANG MEMILIKI KARTU VAKSIN COVID-19 AKAN TERIMA BANTUAN \
KOMPENSASI PPKM SEBESAR 1 JUTA", "KRIMINALITAS", "KESEHATAN", 
        "DISINFORMASI (HOAKS)", "JULI", 5, "ADUAN", 2021}, {
       279, 32, "JAWA BARAT", 
        "BANTUAN BEASISWA ANAK PEDAGANG KECIL TERDAMPAK PPKM DARURAT", 
        "KESEHATAN", "EKONOMI", "BENAR", "JULI", 4, "ADUAN", 2021}, {
       280, 32, "JAWA BARAT", 
        "CHINA MINTA PULAU KALIMANTAN SEBAGAI JAMINAN UTANG INDONESIA", 
        "POLITIK", "SARA", "MISINFORMASI (HOAKS)", "JULI", 4, "ADUAN", 
        2021}, {281, 32, "JAWA BARAT", 
        "CORONA VIRUS TERTULIS DI BUKU PELAJARAN IPA TAHUN 2017", "KESEHATAN",
         "KESEHATAN", "BENAR", "JULI", 4, "ADUAN", 2021}, {
       282, 32, "JAWA BARAT", 
        "JIKA SEDANG FLU, JANGAN LAKUKAN SWAB TEST NANTI POSITIF COVID-19", 
        "KESEHATAN", "KESEHATAN", "MISINFORMASI (HOAKS)", "JULI", 4, "ADUAN", 
        2021}, {283, 32, "JAWA BARAT", 
        "LINK SUBSIDI PULSA 250 RIBU DAN KUOTA 75 GB KEMENDIKBUD", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "JULI", 4, 
        "ADUAN", 2021}, {
       284, 32, "JAWA BARAT", "TANGGAL BERAKHIRNYA PROYEK KOPIT", "KESEHATAN",
         "EKONOMI", "DISINFORMASI (HOAKS)", "JULI", 4, "ADUAN", 2021}, {
       285, 32, "JAWA BARAT", "TOLONG SEBARKAN BUAT BANTU PEDAGANG KECIL", 
        "KESEHATAN", "EKONOMI", "BENAR", "JULI", 4, "ADUAN", 2021}, {
       286, 32, "JAWA BARAT", 
        "YANG SUDAH DIVAKSIN SIAP-SIAP MATI DINI DALAM JANGKA WAKTU 2 TAHUN", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "JULI", 4, "ADUAN", 
        2021}, {287, 32, "JAWA BARAT", 
        "SURAT EDARAN DEWAN MASJID INDONESIA TENTANG SHOLAT JUM'AT DUA \
GELOMBANG GANJIL GENAP", "HUKUM DAN REGULASI", "SARA", "BENAR", "AGUSTUS", 12,
         "ADUAN", 2021}, {
       288, 32, "JAWA BARAT", 
        "PERINGATI HUT RI KE-76, KOMINFO BERIKAN KUOTA INTERNET GRATIS 150GB",
         "EKONOMI", "EKONOMI", "DISINFORMASI (HOAKS)", "AGUSTUS", 6, "ADUAN", 
        2021}, {289, 32, "JAWA BARAT", 
        "LINK BANTUAN SEBESAR RP 500.000 DARI KEMENTRIAN SOSIAL RI", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "AGUSTUS", 4, 
        "ADUAN", 2021}, {
       290, 32, "JAWA BARAT", 
        "CEGAH KEBOCORAN DATA, 2.453 PRODUK DAN JASA CETAK KARTU VAKSIN \
DIBLOKIR", "HUKUM DAN REGULASI", "TEKNOLOGI", "BENAR", "AGUSTUS", 3, "ADUAN", 
        2021}, {291, 32, "JAWA BARAT", 
        "INFORMASI RAZIA ZEBRA SERENTAK DI KOTA BANDUNG TANGGAL 31 AGUSTUS \
2021", "HUKUM DAN REGULASI", "TRANSPORTASI", "DISINFORMASI (HOAKS)", 
        "AGUSTUS", 3, "ADUAN", 2021}, {
       292, 32, "JAWA BARAT", 
        "LINK SURVEY UNDIAN BERHADIAH DALAM RANGKA ULTAH HONDA KE-70", 
        "KRIMINALITAS,TEKNOLOGI", "TEKNOLOGI", "DISINFORMASI (HOAKS)", 
        "AGUSTUS", 3, "ADUAN", 2021}, {
       293, 32, "JAWA BARAT", 
        "LOWONGAN KERJA MENJADI CREW RUNNER PON PAPUA 2021", "KRIMINALITAS", 
        "OLAHRAGA", "DISINFORMASI (HOAKS)", "AGUSTUS", 3, "ADUAN", 2021}, {
       294, 32, "JAWA BARAT", 
        "PEMBERITAHUAN PENIPUAN PESAN SINGKAT BERISI FORMAT ISIAN KELUHAN \
DARI MASYARAKAT SETELAH DIVAKSIN", "KESEHATAN", "KESEHATAN", "BENAR", 
        "AGUSTUS", 3, "ADUAN", 2021}, {
       295, 32, "JAWA BARAT", 
        "PENCETAKAN KARTU VAKSIN MEMUNGKINKAN MELANGGAR HAK KONSUMEN", 
        "HUKUM DAN REGULASI", "TEKNOLOGI", "BENAR", "AGUSTUS", 3, "ADUAN", 
        2021}, {296, 32, "JAWA BARAT", 
        "PERUBAHAN HARI LIBUR NASIONAL DAN CUTI BERSAMA TAHUN 2021", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "BENAR", "AGUSTUS", 3, 
        "ADUAN", 2021}, {
       297, 32, "JAWA BARAT", 
        "BANTUAN KUOTA DATA INTERNET KEMENDIKBUD TAHUN 2021 SUBSIDI PULSA 200 \
RIBU DAN KUOTA 50 GB", "PENDIDIKAN", "EKONOMI", "DISINFORMASI (HOAKS)", 
        "AGUSTUS", 2, "ADUAN", 2021}, {
       298, 32, "JAWA BARAT", 
        "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "AGUSTUS", 2, 
        "ADUAN", 2021}, {
       299, 32, "JAWA BARAT", 
        "PEMBERITAHUAN BANTUAN KESEHATAN DAN MODAL USAHA DARI BPJS", 
        "HUKUM DAN REGULASI", "KESEHATAN", "DISINFORMASI (HOAKS)", "AGUSTUS", 
        2, "ADUAN", 2021}, {
       300, 32, "JAWA BARAT", "RI IMPOR CABE 27 RIBU TON CABE", 
        "HUKUM DAN REGULASI", "PANGAN", "BENAR", "AGUSTUS", 2, "ADUAN", 
        2021}, {301, 32, "JAWA BARAT", 
        "SUBSIDI PULSA 200 RIBU DAN KUOTA 50 GB KEMENDIKBUD DIPERPANJANG \
LAGI", "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "AGUSTUS", 2, 
        "ADUAN", 2021}, {
       302, 32, "JAWA BARAT", 
        "RAYAKAN ULTAHNYA KE-120, BRI BAGIKAN HADIAH 2 JUTA RUPIAH LEWAT \
KUISIONER ONLINE", "EKONOMI", "KRIMINALITAS", "DISINFORMASI (HOAKS)", 
        "SEPTEMBER", 9, "ADUAN", 2021}, {
       303, 32, "JAWA BARAT", 
        "LAYANAN INTERNET MATI TOTAL PADA 24 HINGGA 30 SEPTEMBER 2021", 
        "TEKNOLOGI", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "SEPTEMBER", 3, 
        "ADUAN", 2021}, {
       304, 32, "JAWA BARAT", "LINK DANA BANTUAN 150 JUTA BPJS KESEHATAN", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "SEPTEMBER", 
        3, "ADUAN", 2021}, {
       305, 32, "JAWA BARAT", "LINK HADIAH RESMI 175 JUTA DARI WHATSAPP 2021",
         "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "SEPTEMBER", 3, 
        "ADUAN", 2021}, {
       306, 32, "JAWA BARAT", "PENDAFTARAN VAKSIN NUSANTARA", "KESEHATAN", 
        "KESEHATAN", "DISINFORMASI (HOAKS)", "SEPTEMBER", 3, "ADUAN", 2021}, {
       307, 32, "JAWA BARAT", 
        "RUMOR DOKTER PALSU SEBARKAN VIRUS AIDS DENGAN BERPURA-PURA MENGUKUR \
GULA DARAH SECARA GRATIS", "KESEHATAN", "KRIMINALITAS", 
        "DISINFORMASI (HOAKS)", "SEPTEMBER", 3, "ADUAN", 2021}, {
       308, 32, "JAWA BARAT", 
        "FOTO PERBAIKAN KABEL INTERNET BAWAH LAUT INDIEHOME", 0, 0, 0, 
        "SEPTEMBER", 3, "ADUAN", 2021}, {
       309, 32, "JAWA BARAT", 
        "RILIS TERBARU WHO : RENTANG USIA PEMUDA ADALAH 18-65 TAHUN", 
        "TEKNOLOGI", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "SEPTEMBER", 2, 
        "ADUAN", 2021}, {
       310, 32, "JAWA BARAT", 
        "SEJUMLAH NOMOR TELEPON LUAR NEGERI INI BISA SALIN DAFTAR KONTAK", 
        "FENOMENA", "FENOMENA", "DISINFORMASI (HOAKS)", "SEPTEMBER", 2, 
        "ADUAN", 2021}, {
       311, 32, "JAWA BARAT", "SITUS PALSU MENGATASNAMAKAN PEDULILINDUNGI", 
        "TEKNOLOGI", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "SEPTEMBER", 2, 
        "ADUAN", 2021}, {
       312, 32, "JAWA BARAT", 
        "SMS PEMBERITAHUAN PEMENANG UNDIAN KE-2 DARI PT SHOPEE SEBESAR RP 185 \
JUTA", "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "SEPTEMBER", 2, 
        "ADUAN", 2021}, {
       313, 32, "JAWA BARAT", 
        "19 AGUSTUS 2021 MASKAPAI BATIK AIR JEMPUT WNI YANG ADA DI \
AFGHANISTAN", "EKONOMI", "EKONOMI", "DISINFORMASI (HOAKS)", "SEPTEMBER", 2, 
        "ADUAN", 2021}, {
       314, 32, "JAWA BARAT", 
        "9 BULAN JADI MENAG, KEKAYAAN YAQUT MELESAT 1.000%", "TRANSPORTASI", 
        "TRANSPORTASI", "DISINFORMASI (HOAKS)", "SEPTEMBER", 1, "ADUAN", 
        2021}, {315, 32, "JAWA BARAT", 
        "ADA VIDEO MENAG YAQUT CHOLIL QOUMAS DIBAPTIS PINDAH AGAMA", "FIGUR", 
        "POLITIK", "DISINFORMASI (HOAKS)", "SEPTEMBER", 1, "ADUAN", 2021}, {
       316, 32, "JAWA BARAT", 
        "AJAKAN MENGINSTAL APLIKASI TRACETOGETHER UNTUK MENDUKUNG KEPUTUSAN \
KEMKOMINFO TENTANG UPAYA PENANGANAN COVID-19", "FIGUR", "SARA", 
        "DISINFORMASI (HOAKS)", "SEPTEMBER", 1, "ADUAN", 2021}, {
       317, 32, "JAWA BARAT", "HADIAH ULANG TAHUN BRI KE 120", "KRIMINALITAS",
         "KRIMINALITAS", "DISINFORMASI (HOAKS)", "OKTOBER", 3, "ADUAN", 
        2021}, {318, 32, "JAWA BARAT", 
        "PARTAI PRIMA BUATAN ANAK-ANAK KOMUNIS", "POLITIK", "POLITIK", 
        "DISINFORMASI (HOAKS)", "OKTOBER", 3, "ADUAN", 2021}, {
       319, 32, "JAWA BARAT", 
        "DAFTAR KENDARAAN LELANG NONEKSEKUSI DARI KEMENTRIAN KEUANGAN \
REPUBLIK INDONESIA", "EKONOMI", "EKONOMI", "DISINFORMASI (HOAKS)", "OKTOBER", 
        2, "ADUAN", 2021}, {
       320, 32, "JAWA BARAT", 
        "GELAR ICF CHAMPIONSHIP 2021, JALAN MENUJU KOTA GARUT PADA 26 OKTOBER \
2021 DITUTUP", "TRANSPORTASI", "ENTERTAIMENT", "BENAR", "OKTOBER", 2, "ADUAN",
         2021}, {
       321, 32, "JAWA BARAT", 
        "LINK SUBSIDI DARI PERTAMINA VIA SMS RP. 189 JUTA", "KRIMINALITAS", 
        "KRIMINALITAS", "DISINFORMASI (HOAKS)", "OKTOBER", 2, "ADUAN", 
        2021}, {322, 32, "JAWA BARAT", 
        "MISIONARIS MEREBAK, TERMASUK DI SUMBAR", 0, 0, 0, "OKTOBER", 2, 
        "ADUAN", 2021}, {
       323, 32, "JAWA BARAT", 
        "PENGUMUMAN : PEMBERHENTIAN SEMENTARA OPERASIONAL BUS KOTA DAMRI \
BANDUNG", "HUKUM DAN REGULASI", "TRANSPORTASI", "BENAR", "OKTOBER", 2, 
        "ADUAN", 2021}, {
       324, 32, "JAWA BARAT", 
        "PERNYATAAN EKS PETINGGI INTELIJEN SAUDI TENTANG MOHAMMED BIN SALMAN",
         0, 0, 0, "OKTOBER", 2, "ADUAN", 2021}, {
       325, 32, "JAWA BARAT", 
        "TAWARAN KUOTA GRATIS 50 GB DI PERAYAAN ULANG TAHUN WHATSAPP", 
        "KRIMINALITAS", "TEKNOLOGI", "DISINFORMASI (HOAKS)", "OKTOBER", 2, 
        "ADUAN", 2021}, {
       326, 32, "JAWA BARAT", "VAKSINASI MILENIAL JABAR", "KESEHATAN", 
        "KESEHATAN", "BENAR", "OKTOBER", 1, "ADUAN", 2021}, {
       327, 32, "JAWA BARAT", 
        "20 RIBU LAPORAN KEBUTAAN USAI VAKSINASI DI EROPA", "KESEHATAN", 
        "KESEHATAN", "DISINFORMASI (HOAKS)", "OKTOBER", 1, "ADUAN", 2021}, {
       328, 32, "JAWA BARAT", "ADA WALI ALLAH DI SURADE SUKABUMI", "FIGUR", 
        "SARA", "MISINFORMASI (HOAKS)", "OKTOBER", 1, "ADUAN", 2021}, {
       329, 32, "JAWA BARAT", "AIR REBUSAN DAUN SIRI DAPAT SEMBUHKAN KATARAK",
         "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "OKTOBER", 1, 
        "ADUAN", 2021}, {
       330, 32, "JAWA BARAT", 
        "AJID TEROBOS BANGUNAN SD YANG AMBRUK DEMI SELAMATKAN FOTO JIHYO", 
        "FIGUR", "FIGUR", "DISINFORMASI (HOAKS)", "OKTOBER", 1, "ADUAN", 
        2021}, {331, 32, "JAWA BARAT", "AKUN INSTGRAM LAPTOP BM STORE", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "OKTOBER", 1, 
        "ADUAN", 2021}, {
       332, 32, "JAWA BARAT", 
        "VIDEO : 500 TON PISANG DARI SOMALIA TERKONTAMINASI CACING \
HELICOBACTER", "PANGAN", "PANGAN", "DISINFORMASI (HOAKS)", "NOVEMBER", 3, 
        "ADUAN", 2021}, {
       333, 32, "JAWA BARAT", 
        "DARI DITLANTAS POLDA, BESOK ADA RAZIA MASKER SERENTAK DISELURUH \
WILAYAH INDONESIA", "HUKUM DAN REGULASI", "KESEHATAN", "DISINFORMASI (HOAKS)",
         "NOVEMBER", 2, "ADUAN", 2021}, {
       334, 32, "JAWA BARAT", "UANG BARU PECAHAN 1.0 BERNILAI 1 JUTA RUPIAH", 
        "EKONOMI", "EKONOMI", "DISINFORMASI (HOAKS)", "NOVEMBER", 2, "ADUAN", 
        2021}, {335, 32, "JAWA BARAT", 
        "WASPADA PENCULIKAN ANAK DENGAN MODUS PENJUAL, OM TELOLET, ORANG \
GILA, IBU HAMIL, PENGEMIS", "KRIMINALITAS", "KRIMINALITAS", 
        "DISINFORMASI (HOAKS)", "NOVEMBER", 2, "ADUAN", 2021}, {
       336, 32, "JAWA BARAT", "ACHA SEPTRIASA MENINGGAL DUNIA", "FIGUR", 
        "FIGUR", "DISINFORMASI (HOAKS)", "NOVEMBER", 1, "ADUAN", 2021}, {
       337, 32, "JAWA BARAT", 
        "ADE ARMANDO : DALAM AL-QURAN TAK ADA PERINTAH SHOLAT 5 WAKTU", 
        "SARA", "SARA", "BENAR", "NOVEMBER", 1, "ADUAN", 2021}, {
       338, 32, "JAWA BARAT", 
        "ADE ARMANDO : SAYA BERAGAMA ISLAM TAPI TIDAK PERCAYA SYARIAT ISLAM \
HARUS DIJALANKAN", "SARA", "SARA", "BENAR", "NOVEMBER", 1, "ADUAN", 2021}, {
       339, 32, "JAWA BARAT", 
        "AKUN WHATSAPP MENGATASNAMAKAN BUPATI INDRAMAYU", "FIGUR", 
        "KRIMINALITAS", "DISINFORMASI (HOAKS)", "NOVEMBER", 1, "ADUAN", 
        2021}, {340, 32, "JAWA BARAT", 
        "AKUN WHATSAPP MENGATASNAMAKAN KAPOLDA JAWA BARAT AHMAD DOFIRI", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "NOVEMBER", 1,
         "ADUAN", 2021}, {
       341, 32, "JAWA BARAT", 
        "AKUN WHATSAPP MENGATASNAMAKAN WAKIL KETUA DPRD KOTA CIREBON", 
        "FIGUR", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "NOVEMBER", 1, 
        "ADUAN", 2021}, {
       342, 32, "JAWA BARAT", 
        "ALIANSI DOKTER DUNIA SEBUT VARIAN DELTA TIDAK PERNAH ADA", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "NOVEMBER", 1, 
        "ADUAN", 2021}, {
       343, 32, "JAWA BARAT", 
        "ANGGOTA DPR : PERMENDIKBUD 30 LEGALKAN SEKS BEBAS DAN LGBT ASAL \
KORBAN SETUJU", "HUKUM DAN REGULASI", "PENDIDIKAN", "DISINFORMASI (HOAKS)", 
        "NOVEMBER", 1, "ADUAN", 2021}, {
       344, 32, "JAWA BARAT", 
        "BAHAN BURGER KFC 15% AYAM DAN SISANYA BAHAN TIDAK LAYAK KONSUMSI", 
        "PANGAN", "PANGAN", "DISINFORMASI (HOAKS)", "NOVEMBER", 1, "ADUAN", 
        2021}, {345, 32, "JAWA BARAT", "BAHAYA VAKSIN BERISIKO TINGGI", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "NOVEMBER", 1, 
        "ADUAN", 2021}, {
       346, 32, "JAWA BARAT", 
        "BANK INDONESIA TAWARKAN INVESTASI ONLINE LEWAT TELEGRAM", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "NOVEMBER", 1,
         "ADUAN", 2021}, {
       347, 32, "JAWA BARAT", "LOWONGAN KERJA DISKOMINFO JABAR", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "BENAR", "DESEMBER", 7, 
        "ADUAN", 2021}, {
       348, 32, "JAWA BARAT", 
        "HADIAH ULANG TAHUN BRI KE - 130 UANG TUNAI SEBESAR 2 JUTA RUPIAH", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 4,
         "ADUAN", 2021}, {
       349, 32, "JAWA BARAT", "REKRUTMEN DISKOMINFO JABAR MEMINTA BIAYA", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 3,
         "ADUAN", 2021}, {
       350, 32, "JAWA BARAT", 
        "SMS PEMBERITAHUAN PEMENANG UNDIAN KE-2 DARI PT SHOPEE SEBESAR RP 185 \
JUTA", "EKONOMI", "EKONOMI", "DISINFORMASI (HOAKS)", "DESEMBER", 3, "ADUAN", 
        2021}, {351, 32, "JAWA BARAT", 
        "HARI JADI JNE YANG KE-31 MELALUI KUISIONER ANDA AKAN MENDAPATKAN \
UANG TUNAI 2 JUTA RUPIAH", "KRIMINALITAS", "KRIMINALITAS", 
        "DISINFORMASI (HOAKS)", "DESEMBER", 2, "ADUAN", 2021}, {
       352, 32, "JAWA BARAT", 
        "SERUAN ISI PENUH TANGKI BBM KARENA KARYAWAN PERTAMINA MOGOK KERJA", 
        "TRANSPORTASI", "TRANSPORTASI", "DISINFORMASI (HOAKS)", "DESEMBER", 2,
         "ADUAN", 2021}, {
       353, 32, "JAWA BARAT", 
        "ULTAH KE-50 KIMIA FARMA BAGIKAN UANG 2 JUTA RUPIAH", "KRIMINALITAS", 
        "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 2, "ADUAN", 
        2021}, {354, 32, "JAWA BARAT", 
        "WASPADA MENGAKU MAHASISWA MEMINTA FOTO KTP UNTUK PINJOL", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 2,
         "ADUAN", 2021}, {
       355, 32, "JAWA BARAT", "1,4 JUTA WARGA CHINA IKUT TES PNS 2021", 
        "HUKUM DAN REGULASI", "HUKUM DAN REGULASI", "DISINFORMASI (HOAKS)", 
        "DESEMBER", 1, "ADUAN", 2021}, {
       356, 32, "JAWA BARAT", "AKUN PT PETROKIMIA GRESIK", "KRIMINALITAS", 
        "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 1, "ADUAN", 
        2021}, {357, 32, "JAWA BARAT", 
        "AKUN WHATSAPP MENGATASNAMAKAN KAPOLDA JAWA BARAT AHMAD DOFIRI", 
        "KRIMINALITAS", "KRIMINALITAS", "DISINFORMASI (HOAKS)", "DESEMBER", 1,
         "ADUAN", 2021}, {
       358, 32, "JAWA BARAT", 
        "BEJAT! GURU NGAJI DI DEPOK CABULI 10 ANAK MURIDNYA", "KRIMINALITAS", 
        "KRIMINALITAS", "BENAR", "DESEMBER", 1, "ADUAN", 2021}, {
       359, 32, "JAWA BARAT", 
        "BENARKAH JANTUNG MANUSIA BERHENTI BERDETAK SAAT BERSIN?", 
        "KESEHATAN", "KESEHATAN", "DISINFORMASI (HOAKS)", "DESEMBER", 1, 
        "ADUAN", 2021}, {
       360, 32, "JAWA BARAT", 
        "BENARKAH KONSUMSI SAYUR PAKIS MENGAKIBATKAN KANKER LAMBUNG", 
        "KESEHATAN", "PANGAN", "DISINFORMASI (HOAKS)", "DESEMBER", 1, "ADUAN",
         2021}, {
       361, 32, "JAWA BARAT", 
        "DUBAI BERDUKA, TABRAKAN TRUK TANGKI DAN MENYEBABKAN KEBAKARAN BESAR \
DI JALAN TOL DUBAI", "TRANSPORTASI", "TRANSPORTASI", "DISINFORMASI (HOAKS)", 
        "DESEMBER", 1, "ADUAN", 2021}}, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[136.5], 
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[100.80000000000001`], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[63.], 
           TypeSystem`PackageScope`UnknownShape[False]}], 
         DirectedInfinity[1], 10, {All}]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`Atom[
          TypeSystem`Enumeration["JAWA BARAT", "nama_provinsi"]], 
         TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, 
         TypeSystem`Atom[String], TypeSystem`AnyType, 
         TypeSystem`Atom[
          TypeSystem`Enumeration["ADUAN", "satuan"]], TypeSystem`AnyType}], 
       362], "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[136.5], 
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[100.80000000000001`], 
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[63.], 
           TypeSystem`PackageScope`UnknownShape[False]}], 
         DirectedInfinity[1], 10, {All}]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`Atom[
          TypeSystem`Enumeration["JAWA BARAT", "nama_provinsi"]], 
         TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`AnyType, 
         TypeSystem`Atom[String], TypeSystem`AnyType, 
         TypeSystem`Atom[
          TypeSystem`Enumeration["ADUAN", "satuan"]], TypeSystem`AnyType}], 
       362], "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 
     10, "DataRowCount" -> 362, "DataColumnCount" -> 11, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation["id", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{22.400000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["kode_provinsi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["nama_provinsi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["judul_berita", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["klasifikasi_utama", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{190.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["klasifikasi_menyinggung", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{257.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["status_berita", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["bulan", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["jumlah_aduan", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{134.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["satuan", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "RS HASAN SADIKIN BANDUNG ISOLASI PASIEN TERDUGA VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "SELEBARAN BERLOGO POLDA METRO JAYA : WASPADA PENCULIKAN ANAK \
12 TAHUN, PELAKU MENYAMAR SEBAGAI BUMIL", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "ARTI HURUF ARAB PADA BUKU IQRA 1, CORONA DICIPTAKAN PADA ZAMAN \
PENUH KEBOHONGAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "CIPANAS (PUNCAK) BARU SAJA DILANDA BANJIR BANDANG, ALIRAN \
AIRNYA BISA MASUK JKT BESOK PAGI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "DITOLAK DI BERBAGAI NEGARA, RATUSAN TURIS CHINA DISAMBUT DI \
INONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "DUA LAKI-LAKI PENIPU MENCARI DANA PAKAI BAJU LAMBANG \
PANCASILA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "KABAR PENEMUAN JENAZAH SISWA SEKOLAH DASAR DI KEMAYORAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "VIRAL BAYI USIA 2 BULAN DI SUKABUMI MENINGGAL DIDUGA KARENA \
IMUNISASI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "APLIKASI WHATSAPP TELAH DIBLOKIR OLEH HACKER KELAS DUNIA \
BERINISIAL FFM", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["10"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BIAYA TILANG TERBARU DI INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["11"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "CORONA VIRUS UDAH NYAMPE KE BANDUNG, DI RSHS UDAH ADA 1 PASIEN \
YANG FIX CORONA VIRUS, 1 PASEIN SUSPECT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["12"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "DUA ORANG KENAKAN BAJU BERLAMBANG PANCASILA LAKUKAN HIPNOTIS \
BERMODUS MINTA BANTUAN PEDULI PULAU SEBUKU", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["13"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "INFO KEPADA REKAN-REKAN : DI RSHS BANDUNG UDAH ADA PASIEN \
SUSPECT VIRUS CORONA RUJUKAN DARI RS CAHYA KAWALUYAAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["14"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "PEMBERITAHUAN KEMENTERIAN KESEHATAN : VIRUS CORONA KALI INI \
SERIUS, JAGA TENGGOROKAN TETAP LEMBAB, MINUMLAH 50-80 CC AIR HANGAT, 30-50 CC \
UNTUK ANAK-ANAK", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["15"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "PENTING! KEMENKES RI SIAGAKAN 19 DAERAH WASPADA VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JANUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["16"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "ADA 136 PASIEN DALAM PENGAWASAN VIRUS CORONA DI INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEBRUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["22"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["17"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "HIMBAUAN DARI KBRI KL UNTUK TIDAK MENGKONSUMSI MAKANAN PRODUK \
CHINA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEBRUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["17"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["18"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "MARET 2020 AKAN ADA PEMBUATAN SIM KOLEKTIF DI SELURUH SAMSAT \
INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEBRUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["13"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["19"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["JAWA BARAT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{136.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["PASIEN VIRUS CORONA DI APARTEMEN TAMAN ANGGREK", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEBRUARI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["ADUAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 362, 1], {1, 362 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 362, 1], {1, 362 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[362, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[362, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 362, 1], {1, 362 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 362, 1], {1, 362 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]], 
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 11, 1], {1, 11 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 11, 1], {1, 11 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[11, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[11, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 11, 1], {1, 11 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 11, 1], {1, 11 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[
               TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       2334.950634002685, {255.18506044921872`, 260.34380068359377`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      2334.950634002685, {255.18506044921872`, 260.34380068359377`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.940948122359665*^9, 3.9409481319240227`*^9}, 
   3.940955741423786*^9, 3.9409560275159645`*^9, 3.9409872326529865`*^9, 
   3.9418657016776695`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"1e1e9d1f-d7f1-de49-8061-23039040d11a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dimData", " ", "=", " ", 
  RowBox[{"Dimensions", "[", "dataset", "]"}]}]], "Code",
 CellChangeTimes->{{3.940948198302561*^9, 3.940948210617819*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"2c70602b-3308-ab4a-a4c9-91896a30605a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"362", ",", "11"}], "}"}]], "Output",
 CellChangeTimes->{3.9409490557902164`*^9, 3.940956027680456*^9, 
  3.9409872332241*^9, 3.941865704414507*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"898345fb-9ed2-fd46-b905-07668f574d0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"selectedData", " ", "=", " ", 
  RowBox[{"dataset", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"2", ";;"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"4", ",", " ", "7"}], "}"}]}], "]"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.940949061960079*^9, 3.940949124647146*^9}, {
  3.940949180530369*^9, 3.940949206932419*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"c3cbd4b5-fd67-0f4b-ae53-eb5f2a4a7732"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{
       "RS HASAN SADIKIN BANDUNG ISOLASI PASIEN TERDUGA VIRUS CORONA", 
        "BENAR"}, {
       "SELEBARAN BERLOGO POLDA METRO JAYA : WASPADA PENCULIKAN ANAK 12 \
TAHUN, PELAKU MENYAMAR SEBAGAI BUMIL", "DISINFORMASI (HOAKS)"}, {
       "ARTI HURUF ARAB PADA BUKU IQRA 1, CORONA DICIPTAKAN PADA ZAMAN PENUH \
KEBOHONGAN", "DISINFORMASI (HOAKS)"}, {
       "CIPANAS (PUNCAK) BARU SAJA DILANDA BANJIR BANDANG, ALIRAN AIRNYA BISA \
MASUK JKT BESOK PAGI", "DISINFORMASI (HOAKS)"}, {
       "DITOLAK DI BERBAGAI NEGARA, RATUSAN TURIS CHINA DISAMBUT DI INONESIA",
         "BENAR"}, {
       "DUA LAKI-LAKI PENIPU MENCARI DANA PAKAI BAJU LAMBANG PANCASILA", 
        "DISINFORMASI (HOAKS)"}, {
       "KABAR PENEMUAN JENAZAH SISWA SEKOLAH DASAR DI KEMAYORAN", 
        "DISINFORMASI (HOAKS)"}, {
       "VIRAL BAYI USIA 2 BULAN DI SUKABUMI MENINGGAL DIDUGA KARENA \
IMUNISASI", "BENAR"}, {
       "APLIKASI WHATSAPP TELAH DIBLOKIR OLEH HACKER KELAS DUNIA BERINISIAL \
FFM", "DISINFORMASI (HOAKS)"}, {
       "BIAYA TILANG TERBARU DI INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "CORONA VIRUS UDAH NYAMPE KE BANDUNG, DI RSHS UDAH ADA 1 PASIEN YANG \
FIX CORONA VIRUS, 1 PASEIN SUSPECT", "MISINFORMASI (HOAKS)"}, {
       "DUA ORANG KENAKAN BAJU BERLAMBANG PANCASILA LAKUKAN HIPNOTIS BERMODUS \
MINTA BANTUAN PEDULI PULAU SEBUKU", "DISINFORMASI (HOAKS)"}, {
       "INFO KEPADA REKAN-REKAN : DI RSHS BANDUNG UDAH ADA PASIEN SUSPECT \
VIRUS CORONA RUJUKAN DARI RS CAHYA KAWALUYAAN", "MISINFORMASI (HOAKS)"}, {
       "PEMBERITAHUAN KEMENTERIAN KESEHATAN : VIRUS CORONA KALI INI SERIUS, \
JAGA TENGGOROKAN TETAP LEMBAB, MINUMLAH 50-80 CC AIR HANGAT, 30-50 CC UNTUK \
ANAK-ANAK", "DISINFORMASI (HOAKS)"}, {
       "PENTING! KEMENKES RI SIAGAKAN 19 DAERAH WASPADA VIRUS CORONA", 
        "BENAR"}, {
       "ADA 136 PASIEN DALAM PENGAWASAN VIRUS CORONA DI INDONESIA", 
        "MISINFORMASI (HOAKS)"}, {
       "HIMBAUAN DARI KBRI KL UNTUK TIDAK MENGKONSUMSI MAKANAN PRODUK CHINA", 
        "DISINFORMASI (HOAKS)"}, {
       "MARET 2020 AKAN ADA PEMBUATAN SIM KOLEKTIF DI SELURUH SAMSAT \
INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "PASIEN VIRUS CORONA DI APARTEMEN TAMAN ANGGREK", 
        "MISINFORMASI (HOAKS)"}, {
       "VIDEO WARGA CHINA IKUT SHALAT GARA-GARA VIRUS CORONA", 
        "DISINFORMASI (HOAKS)"}, {
       "INFORMASI UJI COBA TILANG ELEKTRONIK DI BOGOR", 
        "DISINFORMASI (HOAKS)"}, {
       "PINGGIR TOL CIPULARANG KM 118 KEMBALI LONGSOR", "BENAR"}, {
       "INFO DARI DUBES KBRI : JANGAN MAKAN DULU PRODUKSI NEGERI CINA, \
PEKERJA PABRIKNYA PENGIDAP VIRUS CARONA", "DISINFORMASI (HOAKS)"}, {
       "KOMPAS TV MENYIARKAN 5 PASIEN VIRUS CORONA DI SEMARANG, 1 ORANG \
MENINGGAL", "DISINFORMASI (HOAKS)"}, {
       "FOTO SEORANG ANAK LAKI-LAKI YANG TAMPAK SEDANG DIMANDIKAN DENGAN \
BEKAS JAHITAN DIBAGIAN PERUT BAWAH HINGGA BAGIAN DADA", 
        "DISINFORMASI (HOAKS)"}, {
       "HINDARI PENYEBARAN VIRUS, TIONGKOK MINTA PERSETUJUAN PENGADILAN UNTUK \
MEMBUNUH LEBIH DARI 20.000 PASIEN CORONAVIRUS", "DISINFORMASI (HOAKS)"}, {
       "INFO PEMBUATAN SIM KOLEKTIF", "DISINFORMASI (HOAKS)"}, {
       "MINYAK MASAK JENAMA ASRI ADALAH PRODUK SYARIKAT LEONG HUP PENTERNAK \
BABI TERBESAR DI MELAKA MALAYSIA", "DISINFORMASI (HOAKS)"}, {
       "MINYAK MASAK JENAMA ASRI MILIK SYARIKAT LEONG HUP PENTERNAK BABI \
TERBESAR DI MELAKA", "DISINFORMASI (HOAKS)"}, {
       "TUJUH PENUMPANG LION AIR RUTE TIONGKOK - MANADO TERINFEKSI VIRUS \
CORONA", "MISINFORMASI (HOAKS)"}, {
       "PUKUL 23.00 WIB MALAM INI, PESAWAT HELIKOPTER MALAYSIA DAN SINGAPURA \
AKAN SEMPROTKAN RACUN PEMBASMI CORONA COVID-19", "DISINFORMASI (HOAKS)"}, {
       "ALAMAT PASIEN POSITIF CORONA YANG MENINGGAL DI RSHS", 
        "MISINFORMASI (HOAKS)"}, {
       "RIDWAN KAMIL : 30 MARET - 20 APRIL 2020 AREA BANDUNG, CIMAHI, CIBIRU, \
CILEUNYI, LEMBANG AKAN LOCKDOWN", "DISINFORMASI (HOAKS)"}, {
       "FOTO PASIEN POSITIF CORONA YANG KABUR DARI RUMAH SAKIT ADALAH DRIVER \
GOJEK", "MISINFORMASI (HOAKS)"}, {
       "VOICE NOTE : RSHS BANDUNG TANGANI RESIDEN ANESTESI YANG MENINGGAL \
DUNIA, DUA ORANG DIISOLASI DAN LIMA ORANG BERSTATUS SUSPECT COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "PESAN LARANGAN KELUAR RUMAH AKIBAT PUNCAK INKUBASI CORONA COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "CHINA BERHASIL CIPTAKAN VAKSIN COVID-19 DAN SIAP DI PRODUKSI MASSAL", 
        "BENAR"}, {"VIRUS BARU YAITU VIRUS HANTA MUNCUL DI CHINA", "BENAR"}, {
       "PESAN BERANTAI TENTANG PUNCAK PENYEBARAN CORONA", 
        "DISINFORMASI (HOAKS)"}, {
       "VOICE NOTE YANG MENGATASNAMAKAN RSHS TENTANG REDZONE DAN PASIEN DI \
RSHS", "DISINFORMASI (HOAKS)"}, {
       "TERUNGKAP, 238 WNI DARI WUHAN TAK DI TES VIRUS CORONA, ALATNYA MAHAL",
         "BENAR"}, {"DUA ORANG POSITIF VIRUS CORONA DI INDONESIA", "BENAR"}, {
       "PEMERINTAH MEMPERPANJANG STATUS DARURAT BENCANA COVID-19 HINGGA 29 \
MEI", "BENAR"}, {
       "SEMUA MASYARAKAT YANG PUNYA E-KTP, MULAI 28 MARET BERHAK MENDAPAT \
KONPENSASI SEJUMLAH RP. 1.250.000", "MISINFORMASI (HOAKS)"}, {
       "UTUSAN RIDWAN KAMIL AKAN MELAKUKAN LOCKDOWN DI KOTA BANDUNG", 
        "DISINFORMASI (HOAKS)"}, {
       "ANGIN DARI UTARA KE SELATAN MEMBAWA WABAH PENYAKIT MELEWATI INDONESIA \
MENUJU AUSTRALIA", "DISINFORMASI (HOAKS)"}, {
       "PESAN BERANTAI HASIL RAPAT DENGAN DINAS INDAG KOTA BANDUNG TENTANG \
INFO PSBB DI BANDUNG RAYA", "MISINFORMASI (HOAKS)"}, {
       "POLRI AKAN MELAKUKAN RAZIA GABUNGAN TERKAIT BALAS DENDAM KELUARGA \
GENG MOTOR DAN PELAKU PEMBEGALAN", "DISINFORMASI (HOAKS)"}, {
       "HIMBAUAN UNTUK BERHENTI TOTAL SELAMA 3 HARI DARI TANGGAL 10-12 APRIL \
2020", "DISINFORMASI (HOAKS)"}, {
       "INFORMASI TENTANG ADANYA PEMERASAN DENGAN SENJATA TAJAM DI BEBERAPA \
RUAS JALAN KOTA BANDUNG", "DISINFORMASI (HOAKS)"}, {
       "MINIMARKET DI ANTAPANI BANDUNG DITUTUP KARENA KARYAWANNYA POSITIF \
COVID19", "BENAR"}, {
       "PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", 
        "DISINFORMASI (HOAKS)"}, {
       "RUTE PATROLI SKALA BESAR POLDA JABAR TANGGAL 10-12 APRIL 2020", 
        "BENAR"}, {"KOMINFO LUNCURKAN APLIKASI PEDULI LINDUNGI", "BENAR"}, {
       "PESAN BERANTAI: AKSI BALAS DENDAM PARA PEMBEGAL DAN GENG MOTOR PADA \
SELASA MALAM", "DISINFORMASI (HOAKS)"}, {
       "PESAN PEMERINTAH TETAP DIRUMAH & JAGA JARAK, SEBAGAI INSENTIF \
PEMERINTAH GRATISKAN AKSES INTERNET", "DISINFORMASI (HOAKS)"}, {
       "PROGRAM KARTU PRAKERJA DARI DISNAKERTRANS JABAR", "BENAR"}, {
       "ALFAMART BAGI-BAGI 6000 KUPON SENILAI RP. 2 JUTA", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO WARGA KELUYURAN DI ATAS JAM 2 SIANG DIANCAM PUKUL ROTAN SAAT \
PENERAPAN PSBB BANDUNG RAYA", "DISINFORMASI (HOAKS)"}, {
       "LINK TES COVID19 DAPAT HADIAH", "DISINFORMASI (HOAKS)"}, {
       "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, KARENA ITU \
MODUS OPERANDI PKI", "DISINFORMASI (HOAKS)"}, {
       "PEMERINTAH INDONESIA MEMPERTIMBANGKAN MEMAKAI STRATEGI HERD IMMUNITY",
         "MISINFORMASI (HOAKS)"}, {
       "KEMENTERIAN KESEHATAN ITALIA ; COVID19 BUKAN KARENA VIRUS MELAINKAN \
BAKTERI DAN DIPERKUAT RADIASI 5G MNYEBABKAN PERADANGAN DAN HIPOKSIA", 
        "MISINFORMASI (HOAKS)"}, {
       "PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", 
        "DISINFORMASI (HOAKS)"}, {
       "LEBIH DAHSYAT DARI SERANGAN COVID-19, WABAH GIGITAN LEBAH MEMATIKAN \
KINI SERANG INDIA, CHINA DAN TURKI", "DISINFORMASI (HOAKS)"}, {
       "PENGUNGKAPAN PENJUALAN DAGING BABI DI KABUPATEN BANDUNG", "BENAR"}, {
       "RIDWAN KAMIL IZINKAN PENGURUS MASJID LAKSANAKAN SOLAT JUMAT DAN IDUL \
FITRI", "BENAR"}, {
       "VIDEO SEORANG IBU DAN KEDUA ANAKNYA GANTUNG DIRI DISEBABKAN LOCKDOWN",
         "DISINFORMASI (HOAKS)"}, {
       "VIDEO KERAMAIAN PASAR ANDIR BANDUNG DI TENGAH PSBB", 
        "DISINFORMASI (HOAKS)"}, {
       "DR. DR. SITI FADILAH SUPARI, SP.JP(K) : VAKSIN BILL GATES JANGAN \
DIGUNAKAN DI INDONESIA", "MISINFORMASI (HOAKS)"}, {
       "PSBB JAWA BARAT DI PERPANJANG SAMPAI 12 JUNI 2020", "BENAR"}, {
       "TERSEBAR FOTO WANITA PASIEN POSITIF COVID19 YANG DISEBUTKAN KABUR \
DARI RUMAH SAKIT DI CIMAHI", "MISINFORMASI (HOAKS)"}, {
       "5000 USTADZ DI JABAR AKAN DISUNTIK COVID-19 SAMPAI MATI", 
        "DISINFORMASI (HOAKS)"}, {
       "KISAH ABK INDONESIA DI KAPAL CHINA YANG DI PERLAKUKAN TIDAK MANUSIAWI \
HINGGA MENINGGAL MAYATNYA DI BUANG KE LAUT", "BENAR"}, {
       "PEDAGANG PASAR KORDON BUBAT SUDAH BANYAK YANG POSITIF COVID19", 
        "MISINFORMASI (HOAKS)"}, {
       "KEMENTERIAN KESEHATAN ITALIA ; COVID19 BUKAN KARENA VIRUS MELAINKAN \
BAKTERI DAN DIPERKUAT RADIASI 5G MNYEBABKAN PERADANGAN DAN HIPOKSIA", 
        "MISINFORMASI (HOAKS)"}, {
       "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", 
        "DISINFORMASI (HOAKS)"}, {
       "RUMAH SAKIT PANCARAN KASIH MANADO SOGOK KELUARGA PASIEN YANG \
MENINGGAL AGAR PASIEN DIJADIKAN KORBAN COVID19", "DISINFORMASI (HOAKS)"}, {
       "4 PEDAGANG POSITIF CORONA, 3 PASAR DI KOTA BANDUNG DITUTUP", 
        "BENAR"}, {
       "CORONA MELANDA, BEBERAPA DISPENDA KOTA/KABUPATEN BERIKAN INSENTIF \
TAGIHAN PBB", "BENAR"}, {
       "TERAPKAN PSBB PROPORSIONAL, BEBERAPA RUAS JALAN DI KOTA BANDUNG \
KEMBALI DITUTUP", "BENAR"}, {
       "KANDUNG BAKTERI BERBAHAYA, KEMENTARIAN PERTANIAN MUSNAHKAN JAMUR \
ENOKI", "BENAR"}, {
       "RIDWAN KAMIL SEBUT SEKOLAH DI JABAR AKAN DIBUKA PADA JANUARI 2021", 
        "BENAR"}, {
       "BOGOR SAAT INI JADI LAUTAN MERAH MEMBARA, PENYEBARAN VIRUSNYA BANYAK \
SEKALI", "BENAR"}, {
       "TAK PAKAI MASKER DAN SARUNG TANGAN : JENIS PELANGGARAN YANG TERTERA \
DALAM LEMBAR SURAT TILANG", "MISINFORMASI (HOAKS)"}, {
       "ANIES IJINKAN DISKOTEK DAN PANTAI PIJAT KEMBALI BEROPERASI", 
        "DISINFORMASI (HOAKS)"}, {
       "ANTISEPTIC POVIDONE ATAU BETADINE TERBUKTI EFEKTIF MEMBUNUH 99.99% \
VIRUS COVID19 DALAM 30 DETIK", "BENAR"}, {
       "IDE AL QURAN NUSANTARA MULAI DI REALISASIKAN, ARTI SURAT AL-MAIDAH 51 \
BERUBAH DARI PEMIMPIN MENJADI TEMAN SETIA", "DISINFORMASI (HOAKS)"}, {
       "KHAWATIR BANGKITKAN PAHAM KOMUNIS, MUI KELUARKAN MAKLUMAT TOLAK RUU \
HIP", "BENAR"}, {
       "27 TENAGA MEDIS DI 7 PUSKESMAS DI KOTA BANDUNG TERPAPAR VIRUS CORONA",
         "BENAR"}, {
       "RATUSAN SISWA SECAPA AD BANDUNG POSITIF COVID-19", "BENAR"}, {
       "LEBIH DARI 40 ORANG ASN SETDA JABAR TERINDIKASI POSITIF COVID-19, \
GEDUNG SATE DITUTUP SEMENTARA", "BENAR"}, {
       "MAHKAMAH AGUNG KABULKAN GUGATAN PILPRES 2019, KEMENANGAN JOKOWI \
DIBATALKAN", "MISINFORMASI (HOAKS)"}, {
       "MULAI 27 JULI 2020 BAGI YANG TIDAK BERMASKER DI TEMPAT UMUM DI JAWA \
BARAT KENA DENDA 100-150RIBU", "BENAR"}, {
       "WHO : PENULARAN CORONA TAK LAGI HANYA LEWAT DROPLET TAPI JUGA UDARA", 
        "DISINFORMASI (HOAKS)"}, {
       "ISRAEL BERJANJI BAHWA INDONESIA AKAN DIBUAT SEPERTI PALESTINA", 
        "DISINFORMASI (HOAKS)"}, {
       "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 
        "DISINFORMASI (HOAKS)"}, {
       "RADIASI LASER THERMO GUN BERBAHAYA BAGI TUBUH MANUSIA", 
        "DISINFORMASI (HOAKS)"}, {
       "99 PERSONEL TNI PUDIKOM CIMAHI POSITIF CORONA", "BENAR"}, {
       "MATA PELAJARAN PAI DAN BAHASA ARAB AKAN DIHAPUS DARI KURIKULUM", 
        "MISINFORMASI (HOAKS)"}, {
       "PESAN BERANTAI : RAZIA PENGGUNAAN MASKER DI KABUPATEN BANDUNG", 
        "BENAR"}, {
       "PERPRES KARTU KERJA DI REVISI, PESERTA WAJIB KEMBALIKAN UANG BANTUAN",
         "BENAR"}, {
       "RATUSAN SISWA SECAPA AD BANDUNG TERPAPAR COVID-19", "BENAR"}, {
       "ARIEF PUYONO USULKAN JUDI KASINO DAN TOGEL DI LEGALKAN", "BENAR"}, {
       "KEBIJAKAN PEMDA JABAR TENTANG DENDA BAGI MASYARAKAT YANG TIDAK \
MENGGUNAKAN MASKER", "DISINFORMASI (HOAKS)"}, {
       "PEMERINTAH AKAN SEDIAKAN LAPTOP GRATIS UNTUK SISWA DAN GURU", 
        "DISINFORMASI (HOAKS)"}, {
       "DI TENGAH PANDEMI COVID-19, PELAKU UMKM DI KOTA BANDUNG AKAN TERIMA \
BANTUAN MODAL USAHA", "BENAR"}, {
       "DI HARI KEMERDEKAAN RI KE-75 TAHUN, BI DAN KEMENKEU TERBITKAN UANG \
BARU PECAHAN 75.000", "BENAR"}, {
       "VIDEO SERANGAN RUDAL SEBELUM LEDAKAN DI BEIRUT LEBANON (VERSI 2)", 
        "DISINFORMASI (HOAKS)"}, {
       "INFO RAZIA MASKER BESAR-BESARAN DI JABODETABEK LIBATKAN PEMDA, \
KEJAKSAAN DAN PM", "DISINFORMASI (HOAKS)"}, {
       "DAFTAR KARTU INDONESIA PINTAR SAMPAI DENGAN TANGGAL 25 AGUSTUS", 
        "DISINFORMASI (HOAKS)"}, {
       "KUOTA BELAJAR TELKOMSEL 10GB HARGA RP10", "BENAR"}, {
       "RIDWAN KAMIL DAFTARKAN DIRI SEBAGAI RELAWAN UJI KLINIS VAKSIN VIRS \
CORONA DARI CHINA", "BENAR"}, {
       "ULANG TAHUN KE-10, WHATSAPP BAGIKAN KONEKSI INTERNET GRATIS 35GB \
SELAMA 6 BULAN", "DISINFORMASI (HOAKS)"}, {
       "BROADCAST PERAMPOKAN BERMODUS PEMBAGIAN MASKER GRATIS MENGANDUNG \
BIUS", "DISINFORMASI (HOAKS)"}, {
       "HURRY UP AND GET FREE SHOES FROM ADIDAS", "DISINFORMASI (HOAKS)"}, {
       "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", 
        "DISINFORMASI (HOAKS)"}, {
       "HYDROXYCHLOROQUINE, ZINC DAN ZITHROMAX TERBUKTI MEMBANTU KESEMBUHAN \
COVID-19", "MISINFORMASI (HOAKS)"}, {
       "KECAMATAN CIMAUNG KABUPATEN BANDUNG ZONA MERAH COVID-19, WISATA \
GUNUNG PUNTANG DITUTUP SEMENTARA", "BENAR"}, {
       "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, KARENA ITU \
MODUS OPERANDI PKI", "DISINFORMASI (HOAKS)"}, {
       "BIMA ARYA GELAR RAZIA GDS, SISWA YANG TERJARING DIBERI SANKSI \
MENYEMPROT LINGKUNGAN DENGAN RADIUS 1000 METER", "DISINFORMASI (HOAKS)"}, {
       "ADIDAS MENAWARKAN 3100 SEPATU GRATIS, T-SHIRT, DAN MASKER", 
        "DISINFORMASI (HOAKS)"}, {
       "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", 
        "MISINFORMASI (HOAKS)"}, {
       "BROADCAST PERAMPOKAN BERMODUS PEMBAGIAN MASKER GRATIS MENGANDUNG \
BIUS", "DISINFORMASI (HOAKS)"}, {
       "IMBAUAN DARI PANGLIMA PEMBEBASAN RAKYAT INDONESIA AGAR TINGKATKAN \
KEWASPADAAN PADA TANGGAL 29 DAN 30 SEPTEMBER 2020", "DISINFORMASI (HOAKS)"}, {
       "PETA BANDUNG KOTA ZONA HITAM SEBARAN COVID19", 
        "DISINFORMASI (HOAKS)"}, {
       "FOTO PELAKU PENUSUKAN SYEKH ALI JABER DENGAN BENDERA PKI", 
        "DISINFORMASI (HOAKS)"}, {
       "FOTO PENUSUK SYEKH ALI JABER MEMBAWA BENDERA TAUHID", 
        "DISINFORMASI (HOAKS)"}, {
       "PENDATAAN GURU HONORER DI JAWA BARAT YANG AKAN DAPAT BANSOS DARI \
KEMENSOS", "DISINFORMASI (HOAKS)"}, {
       "100 GB DATA INTERNET TANPA PENGISIAN ULANG APA PUN UNTUK QUARANTINE \
(CORONAVIRUS)", "DISINFORMASI (HOAKS)"}, {
       "IMBAUAN BAGI MUI, PIMPINAN PONPES, ULAMA DAN TOKOH MASYARAKAT UNTUK \
TOLAK RENCANA VAKSINASI CORONA ASAL TIONGKOK KARENA MENGANDUNG BABI", 
        "DISINFORMASI (HOAKS)"}, {
       "PEMBACOKAN IMAM MESJID DI OKU SUMSEL", "BENAR"}, {
       "POTENSI TSUNAMI 20 MTER DIPREDIKSI AKAN TERJADI DI PANTAI SELATAN \
JAWA BARAT DAN TIMUR", "BENAR"}, {
       "TOKOPEDIA GELAR PROMOSI DATA INTERNET 100 GB TANPA ISI ULANG", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO BANJIR BANDANG 21 SEPTEMBER 2020 DI CICURUG SUKABUMI, HANYUTKAN \
RIBUAN RUMAH DAN MOBIL", "DISINFORMASI (HOAKS)"}, {
       "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "DISINFORMASI (HOAKS)"}, {
       "PENYATAAN ALIANSI DOKTER DUNIA BAHWA COVID19 TIDAK BERBAHAYA", 
        "MISINFORMASI (HOAKS)"}, {
       "FAKTA BROADCAST 13 POINT UU CIPTA KERJA (OMNIBUS LAW)", 
        "DISINFORMASI (HOAKS)"}, {
       "PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", 
        "DISINFORMASI (HOAKS)"}, {
       "VOUCHER GAS GRATIS SENILAI 600 RIBU UNTUK ISI BAHAN BAKAR", 
        "DISINFORMASI (HOAKS)"}, {
       "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, KARENA ITU \
MODUS OPERANDI PKI", "DISINFORMASI (HOAKS)"}, {
       "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, FACEBOOK", 
        "DISINFORMASI (HOAKS)"}, {
       "PEMERINTAH SADAP TELEPON DAN MEDSOS SEMUA WARGA", 
        "DISINFORMASI (HOAKS)"}, {
       "POIN-POIN UU CIPTA KERJA YANG MENYENGSARAKAN DAN MEMBUNUH RAKYAT \
SENDIRI", "DISINFORMASI (HOAKS)"}, {
       "SIMPAN NOMER WA +62 8999900411 UNTUK MEMPERMUDAH MENCARI KALIMAT \
DALAM KITAB AL QURAN", "BENAR"}, {
       "ACARA DEMO OMNIBUS LAW DI ISTANA PRESIDEN HINGGA JOKOWI LENGSER", 
        "DISINFORMASI (HOAKS)"}, {
       "PERNYATAAN ALIANSI DOKTER LINTAS NEGARA EROPA : COVID19 TIDAK \
BERBAHAYA", "MISINFORMASI (HOAKS)"}, {
       "RAYAKAN ULANG TAHUN KFC TAWARKAN 3000 SNACK BUCKET UNTUK SEMUA ORANG",
         "DISINFORMASI (HOAKS)"}, {
       "SINOVAC YANG AKAN DIVAKSINKAN KE 175 JUTA RAKYAT INDONESIA TERNYATA \
VAKSIN BERBAHAYA", "MISINFORMASI (HOAKS)"}, {
       "BIAYA TILANG TERBARU DI INDONESIA : KAPOLRI BARU MANTAP", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO BOLA MATA JENAZAH DIDUGA PASIEN COVID19 DI PROBOLINGGO HILANG", 
        "DISINFORMASI (HOAKS)"}, {
       "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "DISINFORMASI (HOAKS)"}, {
       "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 
        "DISINFORMASI (HOAKS)"}, {
       "KOREA SELATAN KELABAKAN LIHAT WARGANYA MENINGGAL SATU PERSATU USAI \
DISUNTIK VAKSIN", "DISINFORMASI (HOAKS)"}, {
       "LEWAT AKHIR TAHUN 2020 PENUKARAN TABUNG GAS ELPIJI BIRU 12 KG KE \
WARNA PINK BERBIAYA 500 RIBU", "DISINFORMASI (HOAKS)"}, {
       "RAZIA MASKER SERENTAK DAN AKAN KENA DENDA 250RB", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO WEJANGAN BUPATI SITUBONDO BEBERAPA JAM SEBELUM WAFAT", 
        "DISINFORMASI (HOAKS)"}, {
       "DAPATKAN UANG 200 RIBU DAN BONUS TAMBAHAN DENGAN BERGABUNG DI \
BUZZBREAK", "BENAR"}, {
       "EVENT LAZADA SHARE POCKET, DAPATKAN CREDIT BELANJA SEBESAR RP150.000",
         "BENAR"}, {
       "HATI-HATI, BEBERAPA WARGA KOTA BANDUNG TERPAPAR COVID-19, SEBAGIAN \
MENINGGAL DUNIA", "MISINFORMASI (HOAKS)"}, {
       "INDOMARET BAGIKAN 5000 VOUCHER GRATIS SENILAI RP 2 JUTA", 
        "DISINFORMASI (HOAKS)"}, {
       "INFO AKAN ADA RAZIA GABUNGAN BESOK, KADAPATAN TAK PAKAI MASKER \
LANGSUNG DIDENDA RP 250.000", "DISINFORMASI (HOAKS)"}, {
       "MEDIA AUSTRALIA MENYEBUT HRS MANTAN BURONAN PORNOGRAFI BALIK KE \
INDONESIA UNTUK LUNCURKAN REVOLUSI MORAL", "BENAR"}, {
       "RAYAKAN ULANG TAHUN KFC TAWARKAN 3000 SNACK BUCKET UNTUK SEMUA ORANG",
         "DISINFORMASI (HOAKS)"}, {
       "5 DOKTER MENINGGAL DUNIA KARENA COVID-19 PADA 18 NOVEMBER 2020", 
        "DISINFORMASI (HOAKS)"}, {
       "PENDAFTARAN INTERNET GRATIS 50 GB GELOMBANG KE-2", 
        "DISINFORMASI (HOAKS)"}, {
       "PENDAFTARAN SUBSIDI KUOTA INTERNET SEBESAR 35 GIGABYTE", 
        "DISINFORMASI (HOAKS)"}, {
       "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, FACEBOOK", 
        "DISINFORMASI (HOAKS)"}, {
       "TEMPAT TIDUR PASIEN COVID-19 DI BEBERAPA RS KOTA BANDUNG PENUH, \
KONSUMSI MAKANAN ALKALI DENGAN PH LEBIH TINGGI BISA BUNUH VIRUS COVID-19", 
        "MISINFORMASI (HOAKS)"}, {
       "BIMA ARYA GELAR RAZIA GDS, SISWA YANG TERJARING DIBERI SANKSI \
MENYEMPROT LINGKUNGAN DENGAN RADIUS 1000 METER", "DISINFORMASI (HOAKS)"}, {
       "JOKOWI TAK MAU DISUNTIK VAKSIN DULUAN", "DISINFORMASI (HOAKS)"}, {
       "KONSUMSI MAKANAN ALKALI DENGAN PH LEBIH TINGGI BISA BUNUH VIRUS \
COVID-19", "MISINFORMASI (HOAKS)"}, {
       "KUOTA BELAJAR TELKOMSEL 10GB HARGA RP10", "BENAR"}, {
       "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "DISINFORMASI (HOAKS)"}, {
       "KABAR BAIK!!! SEMANGKUK AIR BAWANG PUTIH YANG BARU DIREBUS DAPAT \
SEMBUHKAN VIRUS CORONA", "MISINFORMASI (HOAKS)"}, {
       "KUOTA INTERNET 100 GB GRATIS TANPA ISI ULANG KARENA PANDEMI COVID19", 
        "DISINFORMASI (HOAKS)"}, {
       "TKW ASAL MADIUN SETENGAH LUMPUH SETELAH DISUNTIK VAKSIN", 
        "MISINFORMASI (HOAKS)"}, {
       "VOUCHER TAHUN BARU BERHADIAH DARI ALFAMART", 
        "DISINFORMASI (HOAKS)"}, {
       "ALFAMART TAWARKAN VOUCHER RP 800.000 UNTUK SEMUA ORANG", 
        "DISINFORMASI (HOAKS)"}, {
       "BUKTI KOMNAS HAM SUDAH LENGKAP, 100 JUTA UNTUK TUTUP MULUT KELUARGA \
LASKAR", "DISINFORMASI (HOAKS)"}, {
       "STATUS BERLOGO WHATSAPP ADALAH PENIPUAN UNTUK ALIHKAN DATA PRIBADI \
DAN REKENING BANK", "DISINFORMASI (HOAKS)"}, {
       "SUBSIDI KUOTA INTERNET 75GB", "DISINFORMASI (HOAKS)"}, {
       "CAIRAN VAKSIN TIDAK MASUK KE TUBUH JOKOWI", "DISINFORMASI (HOAKS)"}, {
       "BANTUAN SOSIAL FINANSIAL RP. 3.550.000 BAGI YANG KERJA TAHUN 2000 DAN \
2021", "DISINFORMASI (HOAKS)"}, {
       "KORBAN BERGELIMPANGAN, RATUSAN WARGA TERKAPAR USAI DISUNTIK SINOVAC", 
        "DISINFORMASI (HOAKS)"}, {
       "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK PENDAFTARAN KARTU PRAKERJA GELOMBANG 12", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO SEORANG PRIA PINGSAN SESUDAH DISUNTIK VAKSIN", 
        "MISINFORMASI (HOAKS)"}, {
       "BRIGJEN HENDRA KURNIAWAN ADALAH ANAK KANDUNG PRESIDEN CINA XI \
JINPING", "DISINFORMASI (HOAKS)"}, {
       "KASDIM 0817 GRESIK MAYOR SUGENG RIYADI MENINGGAL AKIBAT SIANGNYA \
DISUNTIK VAKSIN", "DISINFORMASI (HOAKS)"}, {
       "WASPADA POTENSI GEMPA AKIBAT SESAR LEMBANG BANDUNG, BMKG TEKANKAN \
PENTINGNYA MITIGASI", "BENAR"}, {
       "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, FACEBOOK", 
        "DISINFORMASI (HOAKS)"}, {
       "CARA CEK CALON PENERIMA VAKSIN COVID19 GRATIS MELALUI WEBSITE \
PEDULILINDUNGI.ID", "BENAR"}, {
       "LINK PENDAFTARAN BANPRES UMKM TAHAP II", "DISINFORMASI (HOAKS)"}, {
       "PULUHAN SANTRI KERACUNAN AKIBAT VAKSIN COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "KOMINFO BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, SISWA, \
MAHASISWA SELAMA MASA PANDEMI", "DISINFORMASI (HOAKS)"}, {
       "LINK PENDAFTARAN KARTU PRAKERJA GELOMBANG 12", 
        "DISINFORMASI (HOAKS)"}, {
       "PESAN BERANTAI BERISI INFORMASI PENDAFTARAN VAKSINASI COVID-19 UNTUK \
LANSIA", "MISINFORMASI (HOAKS)"}, {
       "JOKOWI BUKA PINTU IZIN INVESTASI UNTUK INDUSTRI MIRAS BESAR SAMPAI \
ECERAN", "BENAR"}, {
       "BIAYA TILANG TERBARU DI INDONESIA : KAPOLRI BARU MANTAP", 
        "DISINFORMASI (HOAKS)"}, {
       "KEMENDIKBUD BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, \
SISWA, MAHASISWA SELAMA MASA PANDEMI", "DISINFORMASI (HOAKS)"}, {
       "INDUSTRI ARAK HINGGA TUAK DISAHKAN, GUBERNUR BALI TERIMA KASIH KEPADA \
PRESIDEN JOKOWI", "BENAR"}, {
       "ITALY TELAH MELAKUKAN PROSES BEDAH MAYAT TERHADAP PASIEN CORONA YANG \
TELAH MENINGGAL", "DISINFORMASI (HOAKS)"}, {
       "SMS PEMBERITAHUAN PENERIMA DANA BANTUAN DARI KANTOR BPJS PUSAT", 
        "DISINFORMASI (HOAKS)"}, {
       "UANG REDENOMINASI PECAHAN RP 100 BERGAMBAR JOKOWI", 
        "DISINFORMASI (HOAKS)"}, {
       "AL-QURAN PALSU KEMBALI BEREDAR", "DISINFORMASI (HOAKS)"}, {
       "ARAB SAUDI TOLAK JEMAAH HAJI INDONESIA KARENA BELUM BAYAR AKOMODASI", 
        "DISINFORMASI (HOAKS)"}, {
       "BANTUAN SOSIAL FINANSIAL RP. 3.550.000 BAGI YANG KERJA TAHUN 2000 DAN \
2021", "DISINFORMASI (HOAKS)"}, {
       "BENDUNGAN WALAHAR AIRNYA MELUAP, YANG DI KARAWANG SIAP-SIAP", 
        "DISINFORMASI (HOAKS)"}, {
       "JOKOWI LEGALKAN MIRAS HINGGA KELAS ECERAN, KETUM MUHAMMADIYAH: BANGSA \
KITA SUDAH KEHILANGAN ARAH", "BENAR"}, {
       "TUJUH PENUMPANG LION AIR RUTE TIONGKOK - MANADO TERINFEKSI VIRUS \
CORONA", 0}, {
       "BPJS KESEHATAN SALURKAN BANSOS FINANSIAL BAGI YANG BEKERJA ANTARA \
TAHUN 2000 DAN 2021", "DISINFORMASI (HOAKS)"}, {
       "SUBSIDI PULSA 200 RIBU DAN KUOTA 50 GB KEMENDIKBUD DIPERPANJANG LAGI",
         "DISINFORMASI (HOAKS)"}, {
       "JOKOWI BUKA PINTU IZIN INVESTASI UNTUK INDUSTRI MIRAS BESAR SAMPAI \
ECERAN", "BENAR"}, {"SANKSI MUDIK", "DISINFORMASI (HOAKS)"}, {
       "GURU DI SUKABUMI JADI SASARAN KEMARAHAN PERANGKAT DESA GEGARA POSTING \
JALAN RUSAK", "BENAR"}, {
       "KEMENDIKBUD BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, \
SISWA, MAHASISWA SELAMA MASA PANDEMI", "DISINFORMASI (HOAKS)"}, {
       "TILANG ELEKTRONIK BERLAKU MULAI MARET 2021", "BENAR"}, {
       "VAKSINASI COVID-19 UNTUK LANSIA (USIA DIATAS 60) BISA TANPA ONLINE \
LANGSUNG DATANG KE LOKASI", "DISINFORMASI (HOAKS)"}, {
       "GURU HONORER DI LELES GARUT JADI LUMPUH SETELAH MENDAPAT VAKSIN \
KEDUA", "MISINFORMASI (HOAKS)"}, {
       "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 
        "DISINFORMASI (HOAKS)"}, {
       "KFC SEDIAKAN HADIAH BUCKET AYAM DI PERINGATAN HARI PEREMPUAN \
INTERNASIONAL 2021", "DISINFORMASI (HOAKS)"}, {
       "MUAL HINGGA BENGKAK, WARTAWAN JAWA POS TV DILARIKAN KE IGD PASCA \
DIVAKSIN SINOVAC", "BENAR"}, {
       "FOTO BOTOL MIRAS DENGAN LABEL HALAL", "DISINFORMASI (HOAKS)"}, {
       "DIRUT VIVA COSMETIC SURABAYA, PAK SUSANTO MENINGGAL 3 HARI KEMUDIAN \
DI RS RKZ KARENA COVID SETELAH VAKSIN PERTAMA", "DISINFORMASI (HOAKS)"}, {
       "JUAL MINUMAN KERAS HUKUMNYA BOLEH UNTUK MEMBANTU KAS NEGARA", 
        "DISINFORMASI (HOAKS)"}, {
       "SUBSIDI PULSA 200 RIBU DAN KUOTA 95 GB KEMENDIKBUD RI", 
        "DISINFORMASI (HOAKS)"}, {
       "RILIS NAMA-NAMA DOKTER YANG WAFAT DI HARI YANG SAMA KARENA COVID19", 
        "MISINFORMASI (HOAKS)"}, {
       "VIDEO CACING DI MASKER IMPOR ASAL CHINA", "DISINFORMASI (HOAKS)"}, {
       "BANTUAN SOSIAL FINANSIAL BRI RP. 5.500.000", 
        "DISINFORMASI (HOAKS)"}, {
       "POSTINGAN STATUS AKUN YANG DIHACK", "BENAR"}, {
       "BANTUAN SOSIAL FINANSIAL BJB RP. 5.500.000", 
        "DISINFORMASI (HOAKS)"}, {
       "CARA MENDAPATKAN SUBSIDI LISTRIK PLN DENGAN KLIK TAUTAN INI", 
        "DISINFORMASI (HOAKS)"}, {
       "GURU SUKABUMI LUMPUH USAI VAKSIN COVID-19 DOSIS 2", "BENAR"}, {
       "LINK ULTAH INDOMIE KE-60 BERHADIAH 1000 SMARTWATCH", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK ULTAH TELKOMSEL KE-60 BERHADIAH 1000 SMARTWATCH", 
        "DISINFORMASI (HOAKS)"}, {
       "ANGGOTA BRIMOB MALUKU MENINGGAL DUNIA SETELAH DIVAKSIN ASTRAZENECA", 
        "DISINFORMASI (HOAKS)"}, {
       "CINA TELAH MENYEBAR PENYAKIT LEWAT MASKER BARU YANG MASUK KE \
INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "FOTO KARTINI MEMAKAI HIJAB", "DISINFORMASI (HOAKS)"}, {
       "LINK ULTAH INDOFOOD KE-50 BERHADIAH 1000 SMARTWATCH", 
        "DISINFORMASI (HOAKS)"}, {
       "RATUSAN WN INDIA MASUK INDONESIA KE INDONESIA DI SAAT COVID-19 \
MEROKET DI INDIA", "BENAR"}, {
       "PULUHAN WARGA CHINA TIBA DI BANDARA SOETTA SELASA (4/5) SORE, \
LANGSUNG DIJEMPUT BUS", "BENAR"}, {
       "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 
        "DISINFORMASI (HOAKS)"}, {
       "RUSIA TIDAK MENEMUKAN VIRUS DARI HASIL OTOPSI JENAZAH COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "YANG SUDAH DIVAKSIN SIAP-SIAP MATI DINI DALAM JANGKA WAKTU 2 TAHUN", 
        "DISINFORMASI (HOAKS)"}, {
       "GURU SUKABUMI LUMPUH USAI VAKSIN COVID-19 DOSIS 2", "BENAR"}, {
       "PENYEKATAN MUDIK DI PERBATASAN BEKASI-BOGOR, TAK TANGGUNG- TANGGUNG \
TNI NURUNIN TANK BAJA", "DISINFORMASI (HOAKS)"}, {
       "BENDA BERMAGNET BISA MENEMPEL DI LENGAN PENERIMA VAKSIN CORONA", 
        "DISINFORMASI (HOAKS)"}, {
       "TULISAN ILMIAH IDI : COVID-19 ADALAH PENGELABUAN DAN PEMBODOHAN \
GLOBAL", "DISINFORMASI (HOAKS)"}, {
       "CAMPURAN KELAPA MUDA, JERUK NIPIS, GARAM DAN MADU LENYAPKAN VIRUS \
CORONA", "DISINFORMASI (HOAKS)"}, {"GALANG DANA UNTUK PALESTINA", "BENAR"}, {
       "LINK ULTAH COFFESHOP JANJI JIWA KE-30 BERHADIAH 1000 SMARTWATCH", 
        "DISINFORMASI (HOAKS)"}, {
       "PDIP USUL KE PEMERINTAH AGAR SELURUH PESANTREN DI INDONESIA DITUTUP", 
        "DISINFORMASI (HOAKS)"}, {
       "PENGGUNAAN MASKER SEBABKAN MANUSIA KERACUNAN CO2", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO MOBIL IRINGAN-IRINGAN JOKOWI MUDIK, RI 1 PULANG KAMPUNG", 
        "DISINFORMASI (HOAKS)"}, {
       "7 BUMN BAKAL DIBUBARKAN. PLN DLM TAHAP RESTRUKTURISASI", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK BANTUAN UMKM BRI TAHAP 3 SEBESAR RP 2.100.000", 
        "DISINFORMASI (HOAKS)"}, {
       "CAMPURAN KELAPA MUDA, JERUK NIPIS, GARAM DAN MADU LENYAPKAN VIRUS \
CORONA", "DISINFORMASI (HOAKS)"}, {
       "RUSIA TIDAK MENEMUKAN VIRUS DARI HASIL OTOPSI JENAZAH COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "RSHS DAN BEBERAPA RUMAH SAKIT DI BANDUNG DIPENUHI PASIEN COVID-19 DAN \
BANYAK YANG MENINGGAL DI UGD", "DISINFORMASI (HOAKS)"}, {
       "700 LEBIH JENAZAH DIMAKAMAKAN SECARA COVID-19, TERNYATA HASIL SWAB \
NEGATIF", "BENAR"}, {
       "DR. SITI FADILAH (MANTAN MENKES) DAN NIDOM : GAGALKAH HERD IMUNITY ?",
         "BENAR"}, {
       "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 
        "DISINFORMASI (HOAKS)"}, {
       "SURAT EDARAN DIRJEN PELAYANAN KESEHATAN TENTANG PEMANFAATAN OBAT \
TRADISIONAL UNTUK PEMELIHARAAN KESEHATAN", "BENAR"}, {
       "INFO VAKSINASI COVID-19 DI PUSSENIF PPI SUPRATMAN BANDUNG", 
        "DISINFORMASI (HOAKS)"}, {
       "SURAT KLARIFIKASI KUOTA HAJI INDONESIA DARI KEDUTAAN ARAB SAUDI", 
        "BENAR"}, {
       "VIDEO PASIEN COVID KEHABISAN RUANGAN DI RS BEKASI DAN TERLANTAR DI \
PARKIRAN", "BENAR"}, {
       "AKUN WHATSAPP MENCATUT FOTO DAN NAMA ABDY YUHANA ANGGOTA DPRD JAWA \
BARAT", "DISINFORMASI (HOAKS)"}, {
       "ARTIKEL MENGATASNAMAKAN BRIGJEN TNI (PURN) DR. MARDJO SUBIANDONO AJAK \
WARGA BANGUN OPTIMISME HADAPI COVID 19", "DISINFORMASI (HOAKS)"}, {
       "JADWAL PELAKSANAAN VAKISNASI COVID19 DI KOTA BANDUNG", "BENAR"}, {
       "PELAKSANAAN VAKSINASI DI GRAND BALLROOM SUDIRMAN BANDUNG BANYAK YANG \
TERPAPAR COVID-19", "MISINFORMASI (HOAKS)"}, {
       "LINK BANTUAN SOSIAL TUNAI PPKM DARURAT", "DISINFORMASI (HOAKS)"}, {
       "PENUTUPAN SPBU SEMENTARA 12 JULI 2021-17 JULI 2021", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO ALAT UJI SWAB ANTIGEN DI TETES AIR KERAN HASILNYA POSITIF \
COVID", "DISINFORMASI (HOAKS)"}, {
       "MANTAN MENKES SITI FADILAH SUDAH SERING KENA COVID-19 SEJAK DULU", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO BERITA DARI CNN INDONESIA POTENSI BAHAYA VAKSIN COVID - 19", 
        "BENAR"}, {
       "VIDEO JOKOWI DITENGAH KERUMUNAN WARGA TIONGKOK TANPA MEMAKAI MASKER", 
        "DISINFORMASI (HOAKS)"}, {
       "WARGA YANG MEMILIKI KARTU VAKSIN COVID-19 AKAN TERIMA BANTUAN \
KOMPENSASI PPKM SEBESAR 1 JUTA", "DISINFORMASI (HOAKS)"}, {
       "BANTUAN BEASISWA ANAK PEDAGANG KECIL TERDAMPAK PPKM DARURAT", 
        "BENAR"}, {
       "CHINA MINTA PULAU KALIMANTAN SEBAGAI JAMINAN UTANG INDONESIA", 
        "MISINFORMASI (HOAKS)"}, {
       "CORONA VIRUS TERTULIS DI BUKU PELAJARAN IPA TAHUN 2017", "BENAR"}, {
       "JIKA SEDANG FLU, JANGAN LAKUKAN SWAB TEST NANTI POSITIF COVID-19", 
        "MISINFORMASI (HOAKS)"}, {
       "LINK SUBSIDI PULSA 250 RIBU DAN KUOTA 75 GB KEMENDIKBUD", 
        "DISINFORMASI (HOAKS)"}, {
       "TANGGAL BERAKHIRNYA PROYEK KOPIT", "DISINFORMASI (HOAKS)"}, {
       "TOLONG SEBARKAN BUAT BANTU PEDAGANG KECIL", "BENAR"}, {
       "YANG SUDAH DIVAKSIN SIAP-SIAP MATI DINI DALAM JANGKA WAKTU 2 TAHUN", 
        "DISINFORMASI (HOAKS)"}, {
       "SURAT EDARAN DEWAN MASJID INDONESIA TENTANG SHOLAT JUM'AT DUA \
GELOMBANG GANJIL GENAP", "BENAR"}, {
       "PERINGATI HUT RI KE-76, KOMINFO BERIKAN KUOTA INTERNET GRATIS 150GB", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK BANTUAN SEBESAR RP 500.000 DARI KEMENTRIAN SOSIAL RI", 
        "DISINFORMASI (HOAKS)"}, {
       "CEGAH KEBOCORAN DATA, 2.453 PRODUK DAN JASA CETAK KARTU VAKSIN \
DIBLOKIR", "BENAR"}, {
       "INFORMASI RAZIA ZEBRA SERENTAK DI KOTA BANDUNG TANGGAL 31 AGUSTUS \
2021", "DISINFORMASI (HOAKS)"}, {
       "LINK SURVEY UNDIAN BERHADIAH DALAM RANGKA ULTAH HONDA KE-70", 
        "DISINFORMASI (HOAKS)"}, {
       "LOWONGAN KERJA MENJADI CREW RUNNER PON PAPUA 2021", 
        "DISINFORMASI (HOAKS)"}, {
       "PEMBERITAHUAN PENIPUAN PESAN SINGKAT BERISI FORMAT ISIAN KELUHAN DARI \
MASYARAKAT SETELAH DIVAKSIN", "BENAR"}, {
       "PENCETAKAN KARTU VAKSIN MEMUNGKINKAN MELANGGAR HAK KONSUMEN", 
        "BENAR"}, {
       "PERUBAHAN HARI LIBUR NASIONAL DAN CUTI BERSAMA TAHUN 2021", 
        "BENAR"}, {
       "BANTUAN KUOTA DATA INTERNET KEMENDIKBUD TAHUN 2021 SUBSIDI PULSA 200 \
RIBU DAN KUOTA 50 GB", "DISINFORMASI (HOAKS)"}, {
       "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 
        "DISINFORMASI (HOAKS)"}, {
       "PEMBERITAHUAN BANTUAN KESEHATAN DAN MODAL USAHA DARI BPJS", 
        "DISINFORMASI (HOAKS)"}, {
       "RI IMPOR CABE 27 RIBU TON CABE", "BENAR"}, {
       "SUBSIDI PULSA 200 RIBU DAN KUOTA 50 GB KEMENDIKBUD DIPERPANJANG LAGI",
         "DISINFORMASI (HOAKS)"}, {
       "RAYAKAN ULTAHNYA KE-120, BRI BAGIKAN HADIAH 2 JUTA RUPIAH LEWAT \
KUISIONER ONLINE", "DISINFORMASI (HOAKS)"}, {
       "LAYANAN INTERNET MATI TOTAL PADA 24 HINGGA 30 SEPTEMBER 2021", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK DANA BANTUAN 150 JUTA BPJS KESEHATAN", "DISINFORMASI (HOAKS)"}, {
       "LINK HADIAH RESMI 175 JUTA DARI WHATSAPP 2021", 
        "DISINFORMASI (HOAKS)"}, {
       "PENDAFTARAN VAKSIN NUSANTARA", "DISINFORMASI (HOAKS)"}, {
       "RUMOR DOKTER PALSU SEBARKAN VIRUS AIDS DENGAN BERPURA-PURA MENGUKUR \
GULA DARAH SECARA GRATIS", "DISINFORMASI (HOAKS)"}, {
       "FOTO PERBAIKAN KABEL INTERNET BAWAH LAUT INDIEHOME", 0}, {
       "RILIS TERBARU WHO : RENTANG USIA PEMUDA ADALAH 18-65 TAHUN", 
        "DISINFORMASI (HOAKS)"}, {
       "SEJUMLAH NOMOR TELEPON LUAR NEGERI INI BISA SALIN DAFTAR KONTAK", 
        "DISINFORMASI (HOAKS)"}, {
       "SITUS PALSU MENGATASNAMAKAN PEDULILINDUNGI", 
        "DISINFORMASI (HOAKS)"}, {
       "SMS PEMBERITAHUAN PEMENANG UNDIAN KE-2 DARI PT SHOPEE SEBESAR RP 185 \
JUTA", "DISINFORMASI (HOAKS)"}, {
       "19 AGUSTUS 2021 MASKAPAI BATIK AIR JEMPUT WNI YANG ADA DI \
AFGHANISTAN", "DISINFORMASI (HOAKS)"}, {
       "9 BULAN JADI MENAG, KEKAYAAN YAQUT MELESAT 1.000%", 
        "DISINFORMASI (HOAKS)"}, {
       "ADA VIDEO MENAG YAQUT CHOLIL QOUMAS DIBAPTIS PINDAH AGAMA", 
        "DISINFORMASI (HOAKS)"}, {
       "AJAKAN MENGINSTAL APLIKASI TRACETOGETHER UNTUK MENDUKUNG KEPUTUSAN \
KEMKOMINFO TENTANG UPAYA PENANGANAN COVID-19", "DISINFORMASI (HOAKS)"}, {
       "HADIAH ULANG TAHUN BRI KE 120", "DISINFORMASI (HOAKS)"}, {
       "PARTAI PRIMA BUATAN ANAK-ANAK KOMUNIS", "DISINFORMASI (HOAKS)"}, {
       "DAFTAR KENDARAAN LELANG NONEKSEKUSI DARI KEMENTRIAN KEUANGAN REPUBLIK \
INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "GELAR ICF CHAMPIONSHIP 2021, JALAN MENUJU KOTA GARUT PADA 26 OKTOBER \
2021 DITUTUP", "BENAR"}, {
       "LINK SUBSIDI DARI PERTAMINA VIA SMS RP. 189 JUTA", 
        "DISINFORMASI (HOAKS)"}, {
       "MISIONARIS MEREBAK, TERMASUK DI SUMBAR", 0}, {
       "PENGUMUMAN : PEMBERHENTIAN SEMENTARA OPERASIONAL BUS KOTA DAMRI \
BANDUNG", "BENAR"}, {
       "PERNYATAAN EKS PETINGGI INTELIJEN SAUDI TENTANG MOHAMMED BIN SALMAN", 
        0}, {"TAWARAN KUOTA GRATIS 50 GB DI PERAYAAN ULANG TAHUN WHATSAPP", 
        "DISINFORMASI (HOAKS)"}, {"VAKSINASI MILENIAL JABAR", "BENAR"}, {
       "20 RIBU LAPORAN KEBUTAAN USAI VAKSINASI DI EROPA", 
        "DISINFORMASI (HOAKS)"}, {
       "ADA WALI ALLAH DI SURADE SUKABUMI", "MISINFORMASI (HOAKS)"}, {
       "AIR REBUSAN DAUN SIRI DAPAT SEMBUHKAN KATARAK", 
        "DISINFORMASI (HOAKS)"}, {
       "AJID TEROBOS BANGUNAN SD YANG AMBRUK DEMI SELAMATKAN FOTO JIHYO", 
        "DISINFORMASI (HOAKS)"}, {
       "AKUN INSTGRAM LAPTOP BM STORE", "DISINFORMASI (HOAKS)"}, {
       "VIDEO : 500 TON PISANG DARI SOMALIA TERKONTAMINASI CACING \
HELICOBACTER", "DISINFORMASI (HOAKS)"}, {
       "DARI DITLANTAS POLDA, BESOK ADA RAZIA MASKER SERENTAK DISELURUH \
WILAYAH INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "UANG BARU PECAHAN 1.0 BERNILAI 1 JUTA RUPIAH", 
        "DISINFORMASI (HOAKS)"}, {
       "WASPADA PENCULIKAN ANAK DENGAN MODUS PENJUAL, OM TELOLET, ORANG GILA, \
IBU HAMIL, PENGEMIS", "DISINFORMASI (HOAKS)"}, {
       "ACHA SEPTRIASA MENINGGAL DUNIA", "DISINFORMASI (HOAKS)"}, {
       "ADE ARMANDO : DALAM AL-QURAN TAK ADA PERINTAH SHOLAT 5 WAKTU", 
        "BENAR"}, {
       "ADE ARMANDO : SAYA BERAGAMA ISLAM TAPI TIDAK PERCAYA SYARIAT ISLAM \
HARUS DIJALANKAN", "BENAR"}, {
       "AKUN WHATSAPP MENGATASNAMAKAN BUPATI INDRAMAYU", 
        "DISINFORMASI (HOAKS)"}, {
       "AKUN WHATSAPP MENGATASNAMAKAN KAPOLDA JAWA BARAT AHMAD DOFIRI", 
        "DISINFORMASI (HOAKS)"}, {
       "AKUN WHATSAPP MENGATASNAMAKAN WAKIL KETUA DPRD KOTA CIREBON", 
        "DISINFORMASI (HOAKS)"}, {
       "ALIANSI DOKTER DUNIA SEBUT VARIAN DELTA TIDAK PERNAH ADA", 
        "DISINFORMASI (HOAKS)"}, {
       "ANGGOTA DPR : PERMENDIKBUD 30 LEGALKAN SEKS BEBAS DAN LGBT ASAL \
KORBAN SETUJU", "DISINFORMASI (HOAKS)"}, {
       "BAHAN BURGER KFC 15% AYAM DAN SISANYA BAHAN TIDAK LAYAK KONSUMSI", 
        "DISINFORMASI (HOAKS)"}, {
       "BAHAYA VAKSIN BERISIKO TINGGI", "DISINFORMASI (HOAKS)"}, {
       "BANK INDONESIA TAWARKAN INVESTASI ONLINE LEWAT TELEGRAM", 
        "DISINFORMASI (HOAKS)"}, {
       "LOWONGAN KERJA DISKOMINFO JABAR", "BENAR"}, {
       "HADIAH ULANG TAHUN BRI KE - 130 UANG TUNAI SEBESAR 2 JUTA RUPIAH", 
        "DISINFORMASI (HOAKS)"}, {
       "REKRUTMEN DISKOMINFO JABAR MEMINTA BIAYA", "DISINFORMASI (HOAKS)"}, {
       "SMS PEMBERITAHUAN PEMENANG UNDIAN KE-2 DARI PT SHOPEE SEBESAR RP 185 \
JUTA", "DISINFORMASI (HOAKS)"}, {
       "HARI JADI JNE YANG KE-31 MELALUI KUISIONER ANDA AKAN MENDAPATKAN UANG \
TUNAI 2 JUTA RUPIAH", "DISINFORMASI (HOAKS)"}, {
       "SERUAN ISI PENUH TANGKI BBM KARENA KARYAWAN PERTAMINA MOGOK KERJA", 
        "DISINFORMASI (HOAKS)"}, {
       "ULTAH KE-50 KIMIA FARMA BAGIKAN UANG 2 JUTA RUPIAH", 
        "DISINFORMASI (HOAKS)"}, {
       "WASPADA MENGAKU MAHASISWA MEMINTA FOTO KTP UNTUK PINJOL", 
        "DISINFORMASI (HOAKS)"}, {
       "1,4 JUTA WARGA CHINA IKUT TES PNS 2021", "DISINFORMASI (HOAKS)"}, {
       "AKUN PT PETROKIMIA GRESIK", "DISINFORMASI (HOAKS)"}, {
       "AKUN WHATSAPP MENGATASNAMAKAN KAPOLDA JAWA BARAT AHMAD DOFIRI", 
        "DISINFORMASI (HOAKS)"}, {
       "BEJAT! GURU NGAJI DI DEPOK CABULI 10 ANAK MURIDNYA", "BENAR"}, {
       "BENARKAH JANTUNG MANUSIA BERHENTI BERDETAK SAAT BERSIN?", 
        "DISINFORMASI (HOAKS)"}, {
       "BENARKAH KONSUMSI SAYUR PAKIS MENGAKIBATKAN KANKER LAMBUNG", 
        "DISINFORMASI (HOAKS)"}, {
       "DUBAI BERDUKA, TABRAKAN TRUK TANGKI DAN MENYEBABKAN KEBAKARAN BESAR \
DI JALAN TOL DUBAI", "DISINFORMASI (HOAKS)"}}, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`UnknownShape[False]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], TypeSystem`AnyType}], 361], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`UnknownShape[False]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], TypeSystem`AnyType}], 361], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     361, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
              "RS HASAN SADIKIN BANDUNG ISOLASI PASIEN TERDUGA VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "SELEBARAN BERLOGO POLDA METRO JAYA : WASPADA PENCULIKAN ANAK \
12 TAHUN, PELAKU MENYAMAR SEBAGAI BUMIL", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "ARTI HURUF ARAB PADA BUKU IQRA 1, CORONA DICIPTAKAN PADA ZAMAN \
PENUH KEBOHONGAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "CIPANAS (PUNCAK) BARU SAJA DILANDA BANJIR BANDANG, ALIRAN \
AIRNYA BISA MASUK JKT BESOK PAGI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "DITOLAK DI BERBAGAI NEGARA, RATUSAN TURIS CHINA DISAMBUT DI \
INONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "DUA LAKI-LAKI PENIPU MENCARI DANA PAKAI BAJU LAMBANG \
PANCASILA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "KABAR PENEMUAN JENAZAH SISWA SEKOLAH DASAR DI KEMAYORAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "VIRAL BAYI USIA 2 BULAN DI SUKABUMI MENINGGAL DIDUGA KARENA \
IMUNISASI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "APLIKASI WHATSAPP TELAH DIBLOKIR OLEH HACKER KELAS DUNIA \
BERINISIAL FFM", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["BIAYA TILANG TERBARU DI INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "CORONA VIRUS UDAH NYAMPE KE BANDUNG, DI RSHS UDAH ADA 1 PASIEN \
YANG FIX CORONA VIRUS, 1 PASEIN SUSPECT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "DUA ORANG KENAKAN BAJU BERLAMBANG PANCASILA LAKUKAN HIPNOTIS \
BERMODUS MINTA BANTUAN PEDULI PULAU SEBUKU", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "INFO KEPADA REKAN-REKAN : DI RSHS BANDUNG UDAH ADA PASIEN \
SUSPECT VIRUS CORONA RUJUKAN DARI RS CAHYA KAWALUYAAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "PEMBERITAHUAN KEMENTERIAN KESEHATAN : VIRUS CORONA KALI INI \
SERIUS, JAGA TENGGOROKAN TETAP LEMBAB, MINUMLAH 50-80 CC AIR HANGAT, 30-50 CC \
UNTUK ANAK-ANAK", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "PENTING! KEMENKES RI SIAGAKAN 19 DAERAH WASPADA VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "ADA 136 PASIEN DALAM PENGAWASAN VIRUS CORONA DI INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "HIMBAUAN DARI KBRI KL UNTUK TIDAK MENGKONSUMSI MAKANAN PRODUK \
CHINA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "MARET 2020 AKAN ADA PEMBUATAN SIM KOLEKTIF DI SELURUH SAMSAT \
INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["PASIEN VIRUS CORONA DI APARTEMEN TAMAN ANGGREK", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "VIDEO WARGA CHINA IKUT SHALAT GARA-GARA VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 361, 1], {1, 361 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 361, 1], {1, 361 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[361, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[361, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 361, 1], {1, 361 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 361, 1], {1, 361 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       1215.0506340026855`, {246.55772988281248`, 251.71647011718747`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      1215.0506340026855`, {246.55772988281248`, 251.71647011718747`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9409490962326393`*^9, 3.9409491250034256`*^9}, {
   3.9409491943370743`*^9, 3.9409492072075653`*^9}, 3.940956027759062*^9, 
   3.94098723328961*^9, 3.9418657075623035`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"2b144ff6-0d3a-f948-a992-825d2a03bb1e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exploratory Data Analysis", "Section",
 CellChangeTimes->{{3.9409492717082443`*^9, 
  3.9409492818305817`*^9}},ExpressionUUID->"100ad0eb-5a17-6f45-8f49-\
7868b181d15e"],

Cell[CellGroupData[{

Cell["Checking the distribution of Data", "Subsection",
 CellChangeTimes->{{3.9409774581554585`*^9, 
  3.940977466454832*^9}},ExpressionUUID->"0e3a9171-3ef3-d140-aeb7-\
0bf524856fdf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"textList", " ", "=", " ", 
   RowBox[{"Normal", "[", 
    RowBox[{"selectedData", "[", 
     RowBox[{"All", ",", " ", 
      RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.9409801663796825`*^9, 3.9409801784699993`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"dc3fcea3-3790-684b-bf7e-7f47ea5c2423"],

Cell[BoxData[
 RowBox[{
  RowBox[{"textList", " ", "=", " ", 
   RowBox[{"Flatten", "[", "textList", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{3.940980191069725*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"1d6800e7-d001-ad44-8ff5-a4fe1c394e52"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wordList", " ", "=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"StringSplit", " ", "/@", " ", "textList"}], "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{3.940980199292351*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"af01ceb6-ce50-8945-8c26-4e0e9bd9eaf3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordCloud", "[", "wordList", "]"}]], "Code",
 CellChangeTimes->{3.940980209086025*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"294cf92f-ad21-e142-bdd5-51772510b06e"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"DAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.18689196108550948`],
     FontColor->RGBColor[0.880722, 0.611041, 0.142051]], {0, 0}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"COVID-19\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.10240655401945725`],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {0., 30.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"CORONA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.10752688172043011`],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {0., -32.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"BANDUNG\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09984639016897082],
     FontColor->RGBColor[1, 0.75, 0]], {0., 52.}, Center, Automatic], InsetBox[
    StyleBox["\<\"DI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.25089605734767023`],
     FontColor->RGBColor[0.368417, 0.506779, 0.709798]], {0., -69.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"INDONESIA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08960573476702509],
     FontColor->RGBColor[0.647624, 0.37816, 0.614037]], {0., 72.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"YANG\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.11520737327188942`],
     FontColor->RGBColor[0.560181, 0.691569, 0.194885]], {-80., 0.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"VIRUS\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.10240655401945725`],
     FontColor->RGBColor[0.363898, 0.618501, 0.782349]], {82., 0.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"UNTUK\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08960573476702509],
     FontColor->RGBColor[0.571589, 0.586483, 0.]], {64., -55.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"DARI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.10496671786994367`],
     FontColor->RGBColor[0.528488, 0.470624, 0.701351]], {-56., -56.}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"MENINGGAL\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05888376856118791],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {0., 88.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"VAKSIN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07936507936507936],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {85., -21.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"BANTUAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06912442396313363],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {66., -73.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"DENGAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06400409626216078],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {-88., -20.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"MENGATASNAMAKAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.8926354502560807, 0.366046824615879, 0.15658862564020168`]], {0., 99.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"INTERNET\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05888376856118791],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {-91., -36.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KUOTA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07168458781362007],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {89., 19.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KEMENDIKBUD\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04608294930875576],
     FontColor->RGBColor[0.6361597700445392, 0.7170733077827265, 0.]], {0., -101.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PASIEN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06656426011264721],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {-89., 20.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"AKAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0742447516641065],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], {-84., 35.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"COVID19\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06144393241167435],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {-59., -76.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PEMERINTAH\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04608294930875576],
     FontColor->RGBColor[0.428777913273419, 0.5052332520359486, 0.85]], {63., -87.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"TAHUN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06400409626216078],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {88., 34.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KARENA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05632360471070148],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {85., -37.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"MASKER\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05632360471070148],
     FontColor->RGBColor[
      0.6184987019729621, 0.39212575718243875`, 0.7412532450675947]], {-87., 51.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"VIDEO\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06400409626216078],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {85., 49.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"WHATSAPP\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04608294930875576],
     FontColor->RGBColor[0.7513196300394465, 0.358, 0.48066210763162087`]], {0., 109.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PEMBERITAHUAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.9107287510704583, 0.33890687339431275`, 0.20182187767614543`]], {-64., -88.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"TENTANG\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.051203277009728626`],
     FontColor->RGBColor[
      0.8564488486273256, 0.42032672705901153`, 0.06612212156831418]], {-89., 64.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"GRATIS\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05888376856118791],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {86., 63.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"SUBSIDI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.051203277009728626`],
     FontColor->RGBColor[0.37977756485605163`, 0.715, 0.3025558265468435]], {0., -112.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"POSITIF\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.051203277009728626`],
     FontColor->RGBColor[0.7132613816472081, 0.358, 0.5392132590042952]], {83., 77.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"LINK\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06912442396313363],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {-80., 78.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PENDAFTARAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.4567336004533182, 0.4884598397280091, 0.85]], {82., 87.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"COVID-19,\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.8064401951137368, 0.3542119609772526, 0.39343300814377197`]], {-69., 89.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KESEHATAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.7896667828057927, 0.3575666434388414, 0.4213886953236787]], {0., 120.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KOTA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05888376856118791],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {-105., -51.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"JUTA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06144393241167435],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {62., -100.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"JOKOWI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04864311315924219],
     FontColor->RGBColor[
      0.23716678280579248`, 0.645266573755366, 0.699600139366951]], {-65., -99.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"BROADCAST\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.9986489531525362, 0.7507447657626809, 0.0036478264881522893`]], {58., 108.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"CHINA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.051203277009728626`],
     FontColor->RGBColor[
      0.9637822400302223, 0.5764112001511111, 0.0977879519184]], {-47., -112.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2021\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06144393241167435],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {-67., 101.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"WARGA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04608294930875576],
     FontColor->RGBColor[
      0.9784200278733908, 0.649600139366954, 0.058265924741844846`]], {47., -114.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PULSA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04864311315924219],
     FontColor->RGBColor[
      0.9052934053395919, 0.510195603559728, 0.06776406480563275]], {-54., 113.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"DISUNTIK\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.9307395679624266, 0.7498043964402695, 0.]], {54., 117.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"BERHADIAH\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[0.529922539669161, 0.44454647619850335`, 0.85]], {0., -124.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"BEBERAPA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.845266573755366, 0.437100139366951, 0.03816643438841502]], {-52., -124.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"VAKSINASI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.7989994773739094, 0.735166608597101, 0.]], {-54., 123.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PRAKERJA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.9840111653093676, 0.677555826546838, 0.04316985366470745]], {-92., -110.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"HINGGA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[0.47929071933511125`, 0.715, 0.1759027208462221]], {103., -97.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ORANG\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04608294930875576],
     FontColor->RGBColor[
      0.9038177251280404, 0.3492734123079395, 0.18454431282010084`]], {104., 98.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"TIDAK\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.051203277009728626`],
     FontColor->RGBColor[0.5472001045252132, 0.43417993728487203`, 0.85]], {87., -114.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"FOTO\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04864311315924219],
     FontColor->RGBColor[
      0.8168067340273636, 0.3521386531945273, 0.3761554432877274]], {-107., -65.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"SEBESAR\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[0.7175796237092107, 0.7261199581899123, 0.]], {-99., 112.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"DITUTUP\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.8335801463353031, 0.3487839707329394, 0.3481997561078282]], {-106., 98.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"MELALUI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[0.6672593867853922, 0.7205288207539324, 0.]], {105., 109.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"DOKTER\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.2198892179497479, 0.6590886256402017, 0.6788670615396974]], {97., 117.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"RIBU\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.053763440860215055`],
     FontColor->RGBColor[
      0.8878600487784333, 0.33792799024431336`, 0.2577332520359445]], {-93., -122.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ADALAH\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[0.7042770479220728, 0.358, 0.5530353108891188]], {-109., -98.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KERJA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.9930578157165594, 0.7227890785827968, 0.01874389756528967]], {-96., 123.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ULANG\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04352278545826933],
     FontColor->RGBColor[
      0.8607200975568693, 0.34335598048862614`, 0.30296650407188447`]], {0., 129.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"JABAR\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04352278545826933],
     FontColor->RGBColor[
      0.596786740995709, 0.404791067752503, 0.7955331475107271]], {120., -51.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"RAZIA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04352278545826933],
     FontColor->RGBColor[0.8493197142977551, 0.7407577460330839, 0.]], {42., -126.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"BARU\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04352278545826933],
     FontColor->RGBColor[0.2187618985811806, 0.715, 0.5074848563512248]], {-123., 36.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"DAFTAR\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.5750747800184488, 0.4174563783225715, 0.8498130499538777]], {0., -134.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KARTU\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[0.5019668524892619, 0.46131988850644284`, 0.85]], {37., 129.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"AKUN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.9492067688690977, 0.5394711792460651, 0.10728609198218791`]], {-113., 76.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"BARAT\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.31827505306025683`, 0.715, 0.3808317506505822]], {122., -62.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PESAN\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.8781534541180211, 0.4921023027453475, 0.04333810870621905]], {-36., 133.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"AKIBAT\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.969373377466199, 0.6043668873309952, 0.08269188084126262]], {-37., -134.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"PADA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.19193353076984873`, 0.681453175384121, 0.6453202369238185]], {123., 47.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"HADIAH\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.8949268664259606, 0.5032845776173072, 0.05843417978336459]], {-119., -77.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"DALAM\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[0.6897400905885174, 0.358, 0.5753998606330502]], {-116., 85.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ADA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04864311315924219],
     FontColor->RGBColor[0.9810598048862722, 0.7553955338762525, 0.]], {125., 57.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2020\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04608294930875576],
     FontColor->RGBColor[
      0.6536293927965667, 0.37163285420200276`, 0.6534265180085832]], {120., -73.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"DUNIA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.26512246998569167`, 0.6229020240114467, 0.73314696398283]], {115., -86.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"GURU\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.922066817647527, 0.5213778784316846, 0.08286013588277422]], {122., 75.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"UANG\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.9046334610863751, 0.334573307782725, 0.22977756485604156`]], {69., 127.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"BISA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04352278545826933],
     FontColor->RGBColor[
      0.8342400905885153, 0.4628267270590103, 0.0038160815296638794`]], {72., -126.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"JAWA\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.8745421494417032, 0.39318677583744527`, 0.11135537360425793`]], {-117., -87.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ANAK\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.8633598745697435, 0.40996018814538476`, 0.08339968642435877]], {-66., 132.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"AGAR\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[0.4177882075393331, 0.715, 0.25417864494993975`]], {-125., -7.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"KE\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05632360471070148],
     FontColor->RGBColor[
      0.8613800418100862, 0.48092002787339083`, 0.02824203762907758]], {-128., 19.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"RSHS\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.8510135028964549, 0.47400900193096995`, 0.018912152606809424`]], {-70., -134.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"LEBIH\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.6453361616656581, 0.37647057236169945`, 0.6741595958358548]], {99., -125.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"INFO\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.5788038738141875, 0.715, 0.049249615145579635`]], {126., -35.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"GB\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.053763440860215055`],
     FontColor->RGBColor[0.7678998606330495, 0.7317110956258943, 0.]], {128., 2.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"TAK\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.6102054708420535, 0.39696347534213544`, 0.7619863228948663]], {126., 26.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"HARI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[
      0.6670481226429111, 0.3638052617916352, 0.6198796933927223]], {96., 127.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"BAGI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.7277983389807635, 0.358, 0.5168487092603637]], {119., -108.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"200\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.3103557220216354, 0.5867154223826917, 0.7874268664259625]], {-128., 2.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"1000\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.3383114092015346, 0.5643508726387724, 0.8209736910418415]], {126., 35.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"AIR\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.38354466123747527`, 0.5323732032575149, 0.85]], {129., -10.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"RP\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0409626216077829],
     FontColor->RGBColor[
      0.6319174318193065, 0.38429816477207124`, 0.7077064204517338]], {-7., -68.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"RP.\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.15725938678540247`, 0.715, 0.5857607804549424]], {-128., -18.},
     Center, Automatic], InsetBox[
    StyleBox["\<\":\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.0742447516641065],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {-30., 0.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.051203277009728626`],
     FontColor->RGBColor[
      0.35558897405758294`, 0.5505288207539337, 0.8417067688690995]], {124., -21.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"RI\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03840245775729646],
     FontColor->RGBColor[0.7658565873730018, 0.358, 0.4582975578876895]], {126., 13.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"12\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.9603267270590103, 0.5591336352950514, 0.10711783694067224`]], {-122., 45.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"1\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.035842293906810034`],
     FontColor->RGBColor[
      0.8774935098648088, 0.34000129802703827`, 0.2750108168919853]], {11., 10.},
     Center, Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Source Sans Pro"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic},
  PlotRange->{{-139.5, 139.5}, {-139.5, 137.5}}]], "Output",
 CellChangeTimes->{3.940980218732847*^9, 3.940987241422247*^9, 
  3.9418657269236126`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"d0fbb000-1988-864a-b9e1-977fe5f25e6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Count", " ", "occurrences", " ", "of", " ", "each", " ", "status"}], " ", 
   "*)"}], "\n", 
  RowBox[{"statusCounts", " ", "=", " ", 
   RowBox[{"Tally", "[", 
    RowBox[{"selectedData", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.940949230904114*^9, 3.9409492568053226`*^9}, {
  3.9409493073355427`*^9, 3.940949307795143*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"f5c1abd4-bb07-e24b-9046-4e1818c870d3"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{"BENAR", 85}, {"DISINFORMASI (HOAKS)", 236}, {
       "MISINFORMASI (HOAKS)", 36}, {0, 4}}, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[34]}], 
         DirectedInfinity[1], 2, {All}]], 4, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{TypeSystem`AnyType, 
         TypeSystem`Atom[Integer]}], 4], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[34]}], 
         DirectedInfinity[1], 2, {All}]], 4, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{TypeSystem`AnyType, 
         TypeSystem`Atom[Integer]}], 4], "Path" -> {}, "DisplayedRowCount" -> 
     4, "DisplayedColumnCount" -> 2, "DataRowCount" -> 4, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["85"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["236"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{273.3, {45.74702988281249, 50.905770117187494`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{273.3, {45.74702988281249, 50.905770117187494`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.940949259065302*^9, 3.940949308411972*^9, 
  3.940956027809599*^9, 3.940987241523073*^9, 3.9418657406184654`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"0da89cde-0ba7-1b46-aa34-989e87a436e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"statusCounts", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", " ", "\n", " ", 
   RowBox[{"ChartLabels", " ", "->", " ", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<BENAR\>\"", ",", " ", "\"\<DISINFORMASI\>\"", ",", " ", 
        "\"\<MISINFORMASI\>\""}], "}"}], ",", " ", "\"\<Center\>\""}], 
     "]"}]}], ",", "\n", " ", 
   RowBox[{"ChartStyle", " ", "->", " ", "\"\<Pastel\>\""}], ",", " ", "\n", 
   " ", 
   RowBox[{"AxesLabel", " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Status\>\"", ",", " ", "\"\<Counts\>\""}], "}"}]}], ",", 
   " ", "\n", " ", 
   RowBox[{"PlotLabel", " ", "->", " ", "\"\<Status Counts\>\""}]}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.9409493943698273`*^9, 3.940949479983444*^9}, {
  3.9409497307989693`*^9, 3.940949837750744*^9}, {3.9409498765770264`*^9, 
  3.94094988033572*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"6711ce11-fcad-804f-9d58-5f436a439235"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.0195484340859432, 0.}, {4.902403495994173, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6719999999999999], Thickness[Small]}], 
     {RGBColor[0.761959, 0.470832, 0.940597], EdgeForm[{Opacity[
      0.6719999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 85.},
          RoundingRadius->0],
         StatusArea[#, 85]& ,
         TagBoxNote->"85"],
        StyleBox["85", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[85, {}], "Tooltip"]& ]}, 
     {RGBColor[0.927848, 0.742785, 0.6151383333333333], EdgeForm[{Opacity[
      0.6719999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 236.},
          RoundingRadius->0],
         StatusArea[#, 236]& ,
         TagBoxNote->"236"],
        StyleBox["236", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[236, {}], "Tooltip"]& ]}, 
     {RGBColor[0.929162, 0.95034, 0.6648153333333333], EdgeForm[{Opacity[
      0.6719999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{2.5487982520029133, 0.}, {3.4512017479970867, 36.},
          RoundingRadius->0],
         StatusArea[#, 36]& ,
         TagBoxNote->"36"],
        StyleBox["36", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[36, {}], "Tooltip"]& ]}, 
     {RGBColor[0.431296, 0.709773, 0.927077], EdgeForm[{Opacity[
      0.6719999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{3.5487982520029133, 0.}, {4.451201747997087, 4.},
          RoundingRadius->0],
         StatusArea[#, 4]& ,
         TagBoxNote->"4"],
        StyleBox["4", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[4, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0.0195484340859432, 0.}, {4.991036562272396, 0.}}], 
       StyleBox[
        {Thickness[Tiny], InsetBox[
          TagBox["\<\"Status\"\>",
           HoldForm], Offset[{10., 0.}, {4.451201747997087, 0.}], NCache[
          ImageScaled[{0, Rational[1, 2]}], ImageScaled[{0, 0.5}]], 
          Automatic, {1, 0}]}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.5487982520029133, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}],
          LineBox[{{4.451201747997087, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {4.451201747997087, 
            0.}]}], {{}, {}, {}, {}, {}, {}}}, 
        StyleBox[{}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{
    FormBox[
     TagBox["\"Status\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"Counts\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0.0195484340859432, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{Automatic, 365.9128385991459},
  PlotLabel->FormBox["\"Status Counts\"", TraditionalForm],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{3.9409494080178165`*^9, 3.940949438850851*^9, 
  3.940949487893425*^9, 3.9409497316316223`*^9, 3.940949775294567*^9, 
  3.940949838315899*^9, 3.9409498808137417`*^9, 3.9409560289480743`*^9, 
  3.9409872418049736`*^9, 3.9418657442299576`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"1cf2d656-6fb5-784c-8557-6e46a95076ba"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Checking for Null Data", "Subsection",
 CellChangeTimes->{{3.9409774711158943`*^9, 
  3.940977474212181*^9}},ExpressionUUID->"562098b4-07b0-7b42-933c-\
7b41f9786c74"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Check", " ", "for", " ", 
    RowBox[{"empty", " ", "'"}], 
    RowBox[{"judul_berita", "'"}]}], " ", "*)"}], "\n", 
  RowBox[{"Select", "[", 
   RowBox[{"selectedData", ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], " ", "===", " ", "\"\<\>\""}], " ", 
     "&"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9409492872381287`*^9, 3.940949313379797*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"36552a52-58ba-7342-ba45-42812ff1eaf8"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 0, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Vector[TypeSystem`UnknownType, 0], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 0, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Vector[TypeSystem`UnknownType, 0], "Path" -> {}, 
     "DisplayedRowCount" -> 0, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     0, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Spacer[10], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Spacer[10], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{}, "Item",
                 False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5], 8}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       17.099999999999998`, {3.6729298828124985`, 8.8316701171875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      17.099999999999998`, {3.6729298828124985`, 8.8316701171875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.940949289515787*^9, 3.9409493138515396`*^9}, 
   3.9409560291927567`*^9, 3.9409872418343163`*^9, 3.9418657458115997`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"a18f7f7d-7eab-c746-b02d-10e92c3ca00c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Describing the Dataset", "Subsection",
 CellChangeTimes->{{3.940977478531269*^9, 
  3.9409774818811913`*^9}},ExpressionUUID->"dc06492d-7135-314c-ae8a-\
67095ae1b620"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"describeData", " ", "=", " ", 
   RowBox[{"{", "\n", "   ", 
    RowBox[{
     RowBox[{"\"\<Count\>\"", " ", "->", " ", 
      RowBox[{"Length", "[", "selectedData", "]"}]}], ",", "\n", "   ", 
     RowBox[{"\"\<Unique Titles\>\"", " ", "->", " ", 
      RowBox[{"Length", "[", 
       RowBox[{"Union", "[", 
        RowBox[{"selectedData", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], "]"}], "]"}]}], ",", 
     "\n", "   ", 
     RowBox[{"\"\<Unique Status\>\"", " ", "->", " ", 
      RowBox[{"Length", "[", 
       RowBox[{"Union", "[", 
        RowBox[{"selectedData", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "]"}], "]"}]}], ",", 
     "\n", "   ", 
     RowBox[{"\"\<Most Frequent Title\>\"", " ", "->", " ", 
      RowBox[{"First", "@", 
       RowBox[{"Commonest", "[", 
        RowBox[{"selectedData", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], "]"}]}]}], ",", "\n", 
     "   ", 
     RowBox[{"\"\<Most Frequent Status\>\"", " ", "->", " ", 
      RowBox[{"First", "@", 
       RowBox[{"Commonest", "[", 
        RowBox[{"selectedData", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "]"}]}]}]}], "\n", 
    "   ", "}"}]}], "\n"}]], "Code",
 CellChangeTimes->{3.9409493185032406`*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"24f37ea7-b7f0-384e-ae22-5bb6482b5fad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Count\"\>", "\[Rule]", "361"}], ",", 
   RowBox[{"\<\"Unique Titles\"\>", "\[Rule]", "361"}], ",", 
   RowBox[{"\<\"Unique Status\"\>", "\[Rule]", "361"}], ",", 
   RowBox[{"\<\"Most Frequent Title\"\>", 
    "\[Rule]", "\<\"DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP\"\>"}],
    ",", 
   RowBox[{"\<\"Most Frequent Status\"\>", 
    "\[Rule]", "\<\"DISINFORMASI (HOAKS)\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.9409493193347416`*^9, 3.940956029229599*^9, 
  3.9409872419573727`*^9, 3.9418657539890137`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"c504d7ad-56a1-9a4d-ab7e-11bef64a7518"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Checking Duplicates", "Subsection",
 CellChangeTimes->{{3.9409774858006535`*^9, 
  3.9409774894748974`*^9}},ExpressionUUID->"0a021c7f-7da2-1249-9c3a-\
ca5f9f2492ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"duplicateCounts", " ", "=", " ", 
  RowBox[{"Tally", "[", "\n", "   ", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"selectedData", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Count", "[", 
        RowBox[{
         RowBox[{"selectedData", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", "#"}], 
        "]"}], " ", ">", " ", "1"}], " ", "&"}]}], "]"}], "\n", "   ", 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.9409493333256187`*^9, 3.940949336714161*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"9d835488-0cf1-fb40-a2cc-c894275fb3b9"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{
       "TUJUH PENUMPANG LION AIR RUTE TIONGKOK - MANADO TERINFEKSI VIRUS \
CORONA", 2}, {"PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", 3}, {
       "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, KARENA ITU \
MODUS OPERANDI PKI", 3}, {
       "KEMENTERIAN KESEHATAN ITALIA ; COVID19 BUKAN KARENA VIRUS MELAINKAN \
BAKTERI DAN DIPERKUAT RADIASI 5G MNYEBABKAN PERADANGAN DAN HIPOKSIA", 2}, {
       "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", 3}, {
       "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 3}, {
       "KUOTA BELAJAR TELKOMSEL 10GB HARGA RP10", 2}, {
       "BROADCAST PERAMPOKAN BERMODUS PEMBAGIAN MASKER GRATIS MENGANDUNG \
BIUS", 2}, {
       "BIMA ARYA GELAR RAZIA GDS, SISWA YANG TERJARING DIBERI SANKSI \
MENYEMPROT LINGKUNGAN DENGAN RADIUS 1000 METER", 2}, {
       "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 4}, {
       "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, FACEBOOK", 
        3}, {"RAYAKAN ULANG TAHUN KFC TAWARKAN 3000 SNACK BUCKET UNTUK SEMUA \
ORANG", 2}, {"BIAYA TILANG TERBARU DI INDONESIA : KAPOLRI BARU MANTAP", 2}, {
       "BANTUAN SOSIAL FINANSIAL RP. 3.550.000 BAGI YANG KERJA TAHUN 2000 DAN \
2021", 2}, {"LINK PENDAFTARAN KARTU PRAKERJA GELOMBANG 12", 2}, {
       "JOKOWI BUKA PINTU IZIN INVESTASI UNTUK INDUSTRI MIRAS BESAR SAMPAI \
ECERAN", 2}, {
       "KEMENDIKBUD BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, \
SISWA, MAHASISWA SELAMA MASA PANDEMI", 2}, {
       "SUBSIDI PULSA 200 RIBU DAN KUOTA 50 GB KEMENDIKBUD DIPERPANJANG LAGI",
         2}, {"GURU SUKABUMI LUMPUH USAI VAKSIN COVID-19 DOSIS 2", 2}, {
       "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 3}, {
       "RUSIA TIDAK MENEMUKAN VIRUS DARI HASIL OTOPSI JENAZAH COVID-19", 2}, {
       "YANG SUDAH DIVAKSIN SIAP-SIAP MATI DINI DALAM JANGKA WAKTU 2 TAHUN", 
        2}, {"CAMPURAN KELAPA MUDA, JERUK NIPIS, GARAM DAN MADU LENYAPKAN \
VIRUS CORONA", 2}, {
       "SMS PEMBERITAHUAN PEMENANG UNDIAN KE-2 DARI PT SHOPEE SEBESAR RP 185 \
JUTA", 2}, {
       "AKUN WHATSAPP MENGATASNAMAKAN KAPOLDA JAWA BARAT AHMAD DOFIRI", 2}}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`AtomShape[34]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer]}], 25], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`AtomShape[34]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer]}], 25], "Path" -> {}, "DisplayedRowCount" -> 
     20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 25, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
              "TUJUH PENUMPANG LION AIR RUTE TIONGKOK - MANADO TERINFEKSI \
VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, \
KARENA ITU MODUS OPERANDI PKI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "KEMENTERIAN KESEHATAN ITALIA ; COVID19 BUKAN KARENA VIRUS \
MELAINKAN BAKTERI DAN DIPERKUAT RADIASI 5G MNYEBABKAN PERADANGAN DAN \
HIPOKSIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["KUOTA BELAJAR TELKOMSEL 10GB HARGA RP10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "BROADCAST PERAMPOKAN BERMODUS PEMBAGIAN MASKER GRATIS \
MENGANDUNG BIUS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "BIMA ARYA GELAR RAZIA GDS, SISWA YANG TERJARING DIBERI SANKSI \
MENYEMPROT LINGKUNGAN DENGAN RADIUS 1000 METER", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, \
FACEBOOK", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "RAYAKAN ULANG TAHUN KFC TAWARKAN 3000 SNACK BUCKET UNTUK SEMUA \
ORANG", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "BIAYA TILANG TERBARU DI INDONESIA : KAPOLRI BARU MANTAP", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "BANTUAN SOSIAL FINANSIAL RP. 3.550.000 BAGI YANG KERJA TAHUN \
2000 DAN 2021", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["LINK PENDAFTARAN KARTU PRAKERJA GELOMBANG 12", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "JOKOWI BUKA PINTU IZIN INVESTASI UNTUK INDUSTRI MIRAS BESAR \
SAMPAI ECERAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "KEMENDIKBUD BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, \
GURU, SISWA, MAHASISWA SELAMA MASA PANDEMI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "SUBSIDI PULSA 200 RIBU DAN KUOTA 50 GB KEMENDIKBUD \
DIPERPANJANG LAGI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["GURU SUKABUMI LUMPUH USAI VAKSIN COVID-19 DOSIS 2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 25, 1], {1, 25 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 25, 1], {1, 25 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[25, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[25, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 25, 1], {1, 25 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 25, 1], {1, 25 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   With[{
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       912.8877803802488, {246.55772988281248`, 251.71647011718747`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      912.8877803802488, {246.55772988281248`, 251.71647011718747`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9409493412635517`*^9, 3.9409560296257095`*^9, 
  3.940987242214239*^9, 3.9418657558993225`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"2a92e898-f4e4-2e4e-a5dc-4b34448a541f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Cleaning", "Section",
 CellChangeTimes->{{3.9409775102195435`*^9, 
  3.940977512071102*^9}},ExpressionUUID->"cdde58de-4a96-534f-9371-\
5b851209578b"],

Cell[CellGroupData[{

Cell["Deleting Duplicates", "Subsection",
 CellChangeTimes->{{3.9409775246809254`*^9, 
  3.94097752735038*^9}},ExpressionUUID->"65ae144a-c41b-274a-b70f-\
1287cb24a3e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanedData", " ", "=", " ", 
  RowBox[{"DeleteDuplicates", "[", "selectedData", "]"}]}]], "Code",
 CellChangeTimes->{{3.9409499486444073`*^9, 3.940949972318899*^9}, 
   3.9409504435215683`*^9, {3.940952209836563*^9, 3.9409522137082806`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"8ed51e36-76b4-3747-9f17-01908669193a"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{
       "RS HASAN SADIKIN BANDUNG ISOLASI PASIEN TERDUGA VIRUS CORONA", 
        "BENAR"}, {
       "SELEBARAN BERLOGO POLDA METRO JAYA : WASPADA PENCULIKAN ANAK 12 \
TAHUN, PELAKU MENYAMAR SEBAGAI BUMIL", "DISINFORMASI (HOAKS)"}, {
       "ARTI HURUF ARAB PADA BUKU IQRA 1, CORONA DICIPTAKAN PADA ZAMAN PENUH \
KEBOHONGAN", "DISINFORMASI (HOAKS)"}, {
       "CIPANAS (PUNCAK) BARU SAJA DILANDA BANJIR BANDANG, ALIRAN AIRNYA BISA \
MASUK JKT BESOK PAGI", "DISINFORMASI (HOAKS)"}, {
       "DITOLAK DI BERBAGAI NEGARA, RATUSAN TURIS CHINA DISAMBUT DI INONESIA",
         "BENAR"}, {
       "DUA LAKI-LAKI PENIPU MENCARI DANA PAKAI BAJU LAMBANG PANCASILA", 
        "DISINFORMASI (HOAKS)"}, {
       "KABAR PENEMUAN JENAZAH SISWA SEKOLAH DASAR DI KEMAYORAN", 
        "DISINFORMASI (HOAKS)"}, {
       "VIRAL BAYI USIA 2 BULAN DI SUKABUMI MENINGGAL DIDUGA KARENA \
IMUNISASI", "BENAR"}, {
       "APLIKASI WHATSAPP TELAH DIBLOKIR OLEH HACKER KELAS DUNIA BERINISIAL \
FFM", "DISINFORMASI (HOAKS)"}, {
       "BIAYA TILANG TERBARU DI INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "CORONA VIRUS UDAH NYAMPE KE BANDUNG, DI RSHS UDAH ADA 1 PASIEN YANG \
FIX CORONA VIRUS, 1 PASEIN SUSPECT", "MISINFORMASI (HOAKS)"}, {
       "DUA ORANG KENAKAN BAJU BERLAMBANG PANCASILA LAKUKAN HIPNOTIS BERMODUS \
MINTA BANTUAN PEDULI PULAU SEBUKU", "DISINFORMASI (HOAKS)"}, {
       "INFO KEPADA REKAN-REKAN : DI RSHS BANDUNG UDAH ADA PASIEN SUSPECT \
VIRUS CORONA RUJUKAN DARI RS CAHYA KAWALUYAAN", "MISINFORMASI (HOAKS)"}, {
       "PEMBERITAHUAN KEMENTERIAN KESEHATAN : VIRUS CORONA KALI INI SERIUS, \
JAGA TENGGOROKAN TETAP LEMBAB, MINUMLAH 50-80 CC AIR HANGAT, 30-50 CC UNTUK \
ANAK-ANAK", "DISINFORMASI (HOAKS)"}, {
       "PENTING! KEMENKES RI SIAGAKAN 19 DAERAH WASPADA VIRUS CORONA", 
        "BENAR"}, {
       "ADA 136 PASIEN DALAM PENGAWASAN VIRUS CORONA DI INDONESIA", 
        "MISINFORMASI (HOAKS)"}, {
       "HIMBAUAN DARI KBRI KL UNTUK TIDAK MENGKONSUMSI MAKANAN PRODUK CHINA", 
        "DISINFORMASI (HOAKS)"}, {
       "MARET 2020 AKAN ADA PEMBUATAN SIM KOLEKTIF DI SELURUH SAMSAT \
INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "PASIEN VIRUS CORONA DI APARTEMEN TAMAN ANGGREK", 
        "MISINFORMASI (HOAKS)"}, {
       "VIDEO WARGA CHINA IKUT SHALAT GARA-GARA VIRUS CORONA", 
        "DISINFORMASI (HOAKS)"}, {
       "INFORMASI UJI COBA TILANG ELEKTRONIK DI BOGOR", 
        "DISINFORMASI (HOAKS)"}, {
       "PINGGIR TOL CIPULARANG KM 118 KEMBALI LONGSOR", "BENAR"}, {
       "INFO DARI DUBES KBRI : JANGAN MAKAN DULU PRODUKSI NEGERI CINA, \
PEKERJA PABRIKNYA PENGIDAP VIRUS CARONA", "DISINFORMASI (HOAKS)"}, {
       "KOMPAS TV MENYIARKAN 5 PASIEN VIRUS CORONA DI SEMARANG, 1 ORANG \
MENINGGAL", "DISINFORMASI (HOAKS)"}, {
       "FOTO SEORANG ANAK LAKI-LAKI YANG TAMPAK SEDANG DIMANDIKAN DENGAN \
BEKAS JAHITAN DIBAGIAN PERUT BAWAH HINGGA BAGIAN DADA", 
        "DISINFORMASI (HOAKS)"}, {
       "HINDARI PENYEBARAN VIRUS, TIONGKOK MINTA PERSETUJUAN PENGADILAN UNTUK \
MEMBUNUH LEBIH DARI 20.000 PASIEN CORONAVIRUS", "DISINFORMASI (HOAKS)"}, {
       "INFO PEMBUATAN SIM KOLEKTIF", "DISINFORMASI (HOAKS)"}, {
       "MINYAK MASAK JENAMA ASRI ADALAH PRODUK SYARIKAT LEONG HUP PENTERNAK \
BABI TERBESAR DI MELAKA MALAYSIA", "DISINFORMASI (HOAKS)"}, {
       "MINYAK MASAK JENAMA ASRI MILIK SYARIKAT LEONG HUP PENTERNAK BABI \
TERBESAR DI MELAKA", "DISINFORMASI (HOAKS)"}, {
       "TUJUH PENUMPANG LION AIR RUTE TIONGKOK - MANADO TERINFEKSI VIRUS \
CORONA", "MISINFORMASI (HOAKS)"}, {
       "PUKUL 23.00 WIB MALAM INI, PESAWAT HELIKOPTER MALAYSIA DAN SINGAPURA \
AKAN SEMPROTKAN RACUN PEMBASMI CORONA COVID-19", "DISINFORMASI (HOAKS)"}, {
       "ALAMAT PASIEN POSITIF CORONA YANG MENINGGAL DI RSHS", 
        "MISINFORMASI (HOAKS)"}, {
       "RIDWAN KAMIL : 30 MARET - 20 APRIL 2020 AREA BANDUNG, CIMAHI, CIBIRU, \
CILEUNYI, LEMBANG AKAN LOCKDOWN", "DISINFORMASI (HOAKS)"}, {
       "FOTO PASIEN POSITIF CORONA YANG KABUR DARI RUMAH SAKIT ADALAH DRIVER \
GOJEK", "MISINFORMASI (HOAKS)"}, {
       "VOICE NOTE : RSHS BANDUNG TANGANI RESIDEN ANESTESI YANG MENINGGAL \
DUNIA, DUA ORANG DIISOLASI DAN LIMA ORANG BERSTATUS SUSPECT COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "PESAN LARANGAN KELUAR RUMAH AKIBAT PUNCAK INKUBASI CORONA COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "CHINA BERHASIL CIPTAKAN VAKSIN COVID-19 DAN SIAP DI PRODUKSI MASSAL", 
        "BENAR"}, {"VIRUS BARU YAITU VIRUS HANTA MUNCUL DI CHINA", "BENAR"}, {
       "PESAN BERANTAI TENTANG PUNCAK PENYEBARAN CORONA", 
        "DISINFORMASI (HOAKS)"}, {
       "VOICE NOTE YANG MENGATASNAMAKAN RSHS TENTANG REDZONE DAN PASIEN DI \
RSHS", "DISINFORMASI (HOAKS)"}, {
       "TERUNGKAP, 238 WNI DARI WUHAN TAK DI TES VIRUS CORONA, ALATNYA MAHAL",
         "BENAR"}, {"DUA ORANG POSITIF VIRUS CORONA DI INDONESIA", "BENAR"}, {
       "PEMERINTAH MEMPERPANJANG STATUS DARURAT BENCANA COVID-19 HINGGA 29 \
MEI", "BENAR"}, {
       "SEMUA MASYARAKAT YANG PUNYA E-KTP, MULAI 28 MARET BERHAK MENDAPAT \
KONPENSASI SEJUMLAH RP. 1.250.000", "MISINFORMASI (HOAKS)"}, {
       "UTUSAN RIDWAN KAMIL AKAN MELAKUKAN LOCKDOWN DI KOTA BANDUNG", 
        "DISINFORMASI (HOAKS)"}, {
       "ANGIN DARI UTARA KE SELATAN MEMBAWA WABAH PENYAKIT MELEWATI INDONESIA \
MENUJU AUSTRALIA", "DISINFORMASI (HOAKS)"}, {
       "PESAN BERANTAI HASIL RAPAT DENGAN DINAS INDAG KOTA BANDUNG TENTANG \
INFO PSBB DI BANDUNG RAYA", "MISINFORMASI (HOAKS)"}, {
       "POLRI AKAN MELAKUKAN RAZIA GABUNGAN TERKAIT BALAS DENDAM KELUARGA \
GENG MOTOR DAN PELAKU PEMBEGALAN", "DISINFORMASI (HOAKS)"}, {
       "HIMBAUAN UNTUK BERHENTI TOTAL SELAMA 3 HARI DARI TANGGAL 10-12 APRIL \
2020", "DISINFORMASI (HOAKS)"}, {
       "INFORMASI TENTANG ADANYA PEMERASAN DENGAN SENJATA TAJAM DI BEBERAPA \
RUAS JALAN KOTA BANDUNG", "DISINFORMASI (HOAKS)"}, {
       "MINIMARKET DI ANTAPANI BANDUNG DITUTUP KARENA KARYAWANNYA POSITIF \
COVID19", "BENAR"}, {
       "PEMERINTAH BERI INTERNET GRATIS AKIBAT CORONA VIRUS", 
        "DISINFORMASI (HOAKS)"}, {
       "RUTE PATROLI SKALA BESAR POLDA JABAR TANGGAL 10-12 APRIL 2020", 
        "BENAR"}, {"KOMINFO LUNCURKAN APLIKASI PEDULI LINDUNGI", "BENAR"}, {
       "PESAN BERANTAI: AKSI BALAS DENDAM PARA PEMBEGAL DAN GENG MOTOR PADA \
SELASA MALAM", "DISINFORMASI (HOAKS)"}, {
       "PESAN PEMERINTAH TETAP DIRUMAH & JAGA JARAK, SEBAGAI INSENTIF \
PEMERINTAH GRATISKAN AKSES INTERNET", "DISINFORMASI (HOAKS)"}, {
       "PROGRAM KARTU PRAKERJA DARI DISNAKERTRANS JABAR", "BENAR"}, {
       "ALFAMART BAGI-BAGI 6000 KUPON SENILAI RP. 2 JUTA", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO WARGA KELUYURAN DI ATAS JAM 2 SIANG DIANCAM PUKUL ROTAN SAAT \
PENERAPAN PSBB BANDUNG RAYA", "DISINFORMASI (HOAKS)"}, {
       "LINK TES COVID19 DAPAT HADIAH", "DISINFORMASI (HOAKS)"}, {
       "MUI PUSAT HIMBAU KIYAI DAN USTADZ AGAR TOLAK RAPID TEST, KARENA ITU \
MODUS OPERANDI PKI", "DISINFORMASI (HOAKS)"}, {
       "PEMERINTAH INDONESIA MEMPERTIMBANGKAN MEMAKAI STRATEGI HERD IMMUNITY",
         "MISINFORMASI (HOAKS)"}, {
       "KEMENTERIAN KESEHATAN ITALIA ; COVID19 BUKAN KARENA VIRUS MELAINKAN \
BAKTERI DAN DIPERKUAT RADIASI 5G MNYEBABKAN PERADANGAN DAN HIPOKSIA", 
        "MISINFORMASI (HOAKS)"}, {
       "LEBIH DAHSYAT DARI SERANGAN COVID-19, WABAH GIGITAN LEBAH MEMATIKAN \
KINI SERANG INDIA, CHINA DAN TURKI", "DISINFORMASI (HOAKS)"}, {
       "PENGUNGKAPAN PENJUALAN DAGING BABI DI KABUPATEN BANDUNG", "BENAR"}, {
       "RIDWAN KAMIL IZINKAN PENGURUS MASJID LAKSANAKAN SOLAT JUMAT DAN IDUL \
FITRI", "BENAR"}, {
       "VIDEO SEORANG IBU DAN KEDUA ANAKNYA GANTUNG DIRI DISEBABKAN LOCKDOWN",
         "DISINFORMASI (HOAKS)"}, {
       "VIDEO KERAMAIAN PASAR ANDIR BANDUNG DI TENGAH PSBB", 
        "DISINFORMASI (HOAKS)"}, {
       "DR. DR. SITI FADILAH SUPARI, SP.JP(K) : VAKSIN BILL GATES JANGAN \
DIGUNAKAN DI INDONESIA", "MISINFORMASI (HOAKS)"}, {
       "PSBB JAWA BARAT DI PERPANJANG SAMPAI 12 JUNI 2020", "BENAR"}, {
       "TERSEBAR FOTO WANITA PASIEN POSITIF COVID19 YANG DISEBUTKAN KABUR \
DARI RUMAH SAKIT DI CIMAHI", "MISINFORMASI (HOAKS)"}, {
       "5000 USTADZ DI JABAR AKAN DISUNTIK COVID-19 SAMPAI MATI", 
        "DISINFORMASI (HOAKS)"}, {
       "KISAH ABK INDONESIA DI KAPAL CHINA YANG DI PERLAKUKAN TIDAK MANUSIAWI \
HINGGA MENINGGAL MAYATNYA DI BUANG KE LAUT", "BENAR"}, {
       "PEDAGANG PASAR KORDON BUBAT SUDAH BANYAK YANG POSITIF COVID19", 
        "MISINFORMASI (HOAKS)"}, {
       "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", 
        "DISINFORMASI (HOAKS)"}, {
       "RUMAH SAKIT PANCARAN KASIH MANADO SOGOK KELUARGA PASIEN YANG \
MENINGGAL AGAR PASIEN DIJADIKAN KORBAN COVID19", "DISINFORMASI (HOAKS)"}, {
       "4 PEDAGANG POSITIF CORONA, 3 PASAR DI KOTA BANDUNG DITUTUP", 
        "BENAR"}, {
       "CORONA MELANDA, BEBERAPA DISPENDA KOTA/KABUPATEN BERIKAN INSENTIF \
TAGIHAN PBB", "BENAR"}, {
       "TERAPKAN PSBB PROPORSIONAL, BEBERAPA RUAS JALAN DI KOTA BANDUNG \
KEMBALI DITUTUP", "BENAR"}, {
       "KANDUNG BAKTERI BERBAHAYA, KEMENTARIAN PERTANIAN MUSNAHKAN JAMUR \
ENOKI", "BENAR"}, {
       "RIDWAN KAMIL SEBUT SEKOLAH DI JABAR AKAN DIBUKA PADA JANUARI 2021", 
        "BENAR"}, {
       "BOGOR SAAT INI JADI LAUTAN MERAH MEMBARA, PENYEBARAN VIRUSNYA BANYAK \
SEKALI", "BENAR"}, {
       "TAK PAKAI MASKER DAN SARUNG TANGAN : JENIS PELANGGARAN YANG TERTERA \
DALAM LEMBAR SURAT TILANG", "MISINFORMASI (HOAKS)"}, {
       "ANIES IJINKAN DISKOTEK DAN PANTAI PIJAT KEMBALI BEROPERASI", 
        "DISINFORMASI (HOAKS)"}, {
       "ANTISEPTIC POVIDONE ATAU BETADINE TERBUKTI EFEKTIF MEMBUNUH 99.99% \
VIRUS COVID19 DALAM 30 DETIK", "BENAR"}, {
       "IDE AL QURAN NUSANTARA MULAI DI REALISASIKAN, ARTI SURAT AL-MAIDAH 51 \
BERUBAH DARI PEMIMPIN MENJADI TEMAN SETIA", "DISINFORMASI (HOAKS)"}, {
       "KHAWATIR BANGKITKAN PAHAM KOMUNIS, MUI KELUARKAN MAKLUMAT TOLAK RUU \
HIP", "BENAR"}, {
       "27 TENAGA MEDIS DI 7 PUSKESMAS DI KOTA BANDUNG TERPAPAR VIRUS CORONA",
         "BENAR"}, {
       "RATUSAN SISWA SECAPA AD BANDUNG POSITIF COVID-19", "BENAR"}, {
       "LEBIH DARI 40 ORANG ASN SETDA JABAR TERINDIKASI POSITIF COVID-19, \
GEDUNG SATE DITUTUP SEMENTARA", "BENAR"}, {
       "MAHKAMAH AGUNG KABULKAN GUGATAN PILPRES 2019, KEMENANGAN JOKOWI \
DIBATALKAN", "MISINFORMASI (HOAKS)"}, {
       "MULAI 27 JULI 2020 BAGI YANG TIDAK BERMASKER DI TEMPAT UMUM DI JAWA \
BARAT KENA DENDA 100-150RIBU", "BENAR"}, {
       "WHO : PENULARAN CORONA TAK LAGI HANYA LEWAT DROPLET TAPI JUGA UDARA", 
        "DISINFORMASI (HOAKS)"}, {
       "ISRAEL BERJANJI BAHWA INDONESIA AKAN DIBUAT SEPERTI PALESTINA", 
        "DISINFORMASI (HOAKS)"}, {
       "IMBAUAN DISDUKCAPIL BANDUNG TENTANG KASUS PENYALAHGUNAAN KTP", 
        "DISINFORMASI (HOAKS)"}, {
       "RADIASI LASER THERMO GUN BERBAHAYA BAGI TUBUH MANUSIA", 
        "DISINFORMASI (HOAKS)"}, {
       "99 PERSONEL TNI PUDIKOM CIMAHI POSITIF CORONA", "BENAR"}, {
       "MATA PELAJARAN PAI DAN BAHASA ARAB AKAN DIHAPUS DARI KURIKULUM", 
        "MISINFORMASI (HOAKS)"}, {
       "PESAN BERANTAI : RAZIA PENGGUNAAN MASKER DI KABUPATEN BANDUNG", 
        "BENAR"}, {
       "PERPRES KARTU KERJA DI REVISI, PESERTA WAJIB KEMBALIKAN UANG BANTUAN",
         "BENAR"}, {
       "RATUSAN SISWA SECAPA AD BANDUNG TERPAPAR COVID-19", "BENAR"}, {
       "ARIEF PUYONO USULKAN JUDI KASINO DAN TOGEL DI LEGALKAN", "BENAR"}, {
       "KEBIJAKAN PEMDA JABAR TENTANG DENDA BAGI MASYARAKAT YANG TIDAK \
MENGGUNAKAN MASKER", "DISINFORMASI (HOAKS)"}, {
       "PEMERINTAH AKAN SEDIAKAN LAPTOP GRATIS UNTUK SISWA DAN GURU", 
        "DISINFORMASI (HOAKS)"}, {
       "DI TENGAH PANDEMI COVID-19, PELAKU UMKM DI KOTA BANDUNG AKAN TERIMA \
BANTUAN MODAL USAHA", "BENAR"}, {
       "DI HARI KEMERDEKAAN RI KE-75 TAHUN, BI DAN KEMENKEU TERBITKAN UANG \
BARU PECAHAN 75.000", "BENAR"}, {
       "VIDEO SERANGAN RUDAL SEBELUM LEDAKAN DI BEIRUT LEBANON (VERSI 2)", 
        "DISINFORMASI (HOAKS)"}, {
       "INFO RAZIA MASKER BESAR-BESARAN DI JABODETABEK LIBATKAN PEMDA, \
KEJAKSAAN DAN PM", "DISINFORMASI (HOAKS)"}, {
       "DAFTAR KARTU INDONESIA PINTAR SAMPAI DENGAN TANGGAL 25 AGUSTUS", 
        "DISINFORMASI (HOAKS)"}, {
       "KUOTA BELAJAR TELKOMSEL 10GB HARGA RP10", "BENAR"}, {
       "RIDWAN KAMIL DAFTARKAN DIRI SEBAGAI RELAWAN UJI KLINIS VAKSIN VIRS \
CORONA DARI CHINA", "BENAR"}, {
       "ULANG TAHUN KE-10, WHATSAPP BAGIKAN KONEKSI INTERNET GRATIS 35GB \
SELAMA 6 BULAN", "DISINFORMASI (HOAKS)"}, {
       "BROADCAST PERAMPOKAN BERMODUS PEMBAGIAN MASKER GRATIS MENGANDUNG \
BIUS", "DISINFORMASI (HOAKS)"}, {
       "HURRY UP AND GET FREE SHOES FROM ADIDAS", "DISINFORMASI (HOAKS)"}, {
       "HYDROXYCHLOROQUINE, ZINC DAN ZITHROMAX TERBUKTI MEMBANTU KESEMBUHAN \
COVID-19", "MISINFORMASI (HOAKS)"}, {
       "KECAMATAN CIMAUNG KABUPATEN BANDUNG ZONA MERAH COVID-19, WISATA \
GUNUNG PUNTANG DITUTUP SEMENTARA", "BENAR"}, {
       "BIMA ARYA GELAR RAZIA GDS, SISWA YANG TERJARING DIBERI SANKSI \
MENYEMPROT LINGKUNGAN DENGAN RADIUS 1000 METER", "DISINFORMASI (HOAKS)"}, {
       "ADIDAS MENAWARKAN 3100 SEPATU GRATIS, T-SHIRT, DAN MASKER", 
        "DISINFORMASI (HOAKS)"}, {
       "COVID-19 BISA DISEMBUHKAN DENGAN MINYAK KAYU PUTIH", 
        "MISINFORMASI (HOAKS)"}, {
       "IMBAUAN DARI PANGLIMA PEMBEBASAN RAKYAT INDONESIA AGAR TINGKATKAN \
KEWASPADAAN PADA TANGGAL 29 DAN 30 SEPTEMBER 2020", "DISINFORMASI (HOAKS)"}, {
       "PETA BANDUNG KOTA ZONA HITAM SEBARAN COVID19", 
        "DISINFORMASI (HOAKS)"}, {
       "FOTO PELAKU PENUSUKAN SYEKH ALI JABER DENGAN BENDERA PKI", 
        "DISINFORMASI (HOAKS)"}, {
       "FOTO PENUSUK SYEKH ALI JABER MEMBAWA BENDERA TAUHID", 
        "DISINFORMASI (HOAKS)"}, {
       "PENDATAAN GURU HONORER DI JAWA BARAT YANG AKAN DAPAT BANSOS DARI \
KEMENSOS", "DISINFORMASI (HOAKS)"}, {
       "100 GB DATA INTERNET TANPA PENGISIAN ULANG APA PUN UNTUK QUARANTINE \
(CORONAVIRUS)", "DISINFORMASI (HOAKS)"}, {
       "IMBAUAN BAGI MUI, PIMPINAN PONPES, ULAMA DAN TOKOH MASYARAKAT UNTUK \
TOLAK RENCANA VAKSINASI CORONA ASAL TIONGKOK KARENA MENGANDUNG BABI", 
        "DISINFORMASI (HOAKS)"}, {
       "PEMBACOKAN IMAM MESJID DI OKU SUMSEL", "BENAR"}, {
       "POTENSI TSUNAMI 20 MTER DIPREDIKSI AKAN TERJADI DI PANTAI SELATAN \
JAWA BARAT DAN TIMUR", "BENAR"}, {
       "TOKOPEDIA GELAR PROMOSI DATA INTERNET 100 GB TANPA ISI ULANG", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO BANJIR BANDANG 21 SEPTEMBER 2020 DI CICURUG SUKABUMI, HANYUTKAN \
RIBUAN RUMAH DAN MOBIL", "DISINFORMASI (HOAKS)"}, {
       "DAFTAR PRAKERJA MELALUI SITUS HTTPS://PRAKERJA.VIP", 
        "DISINFORMASI (HOAKS)"}, {
       "PENYATAAN ALIANSI DOKTER DUNIA BAHWA COVID19 TIDAK BERBAHAYA", 
        "MISINFORMASI (HOAKS)"}, {
       "FAKTA BROADCAST 13 POINT UU CIPTA KERJA (OMNIBUS LAW)", 
        "DISINFORMASI (HOAKS)"}, {
       "VOUCHER GAS GRATIS SENILAI 600 RIBU UNTUK ISI BAHAN BAKAR", 
        "DISINFORMASI (HOAKS)"}, {
       "BROADCAST BSSN AKAN REKAM TELEPON DAN PANTAU WA, TWITTER, FACEBOOK", 
        "DISINFORMASI (HOAKS)"}, {
       "PEMERINTAH SADAP TELEPON DAN MEDSOS SEMUA WARGA", 
        "DISINFORMASI (HOAKS)"}, {
       "POIN-POIN UU CIPTA KERJA YANG MENYENGSARAKAN DAN MEMBUNUH RAKYAT \
SENDIRI", "DISINFORMASI (HOAKS)"}, {
       "SIMPAN NOMER WA +62 8999900411 UNTUK MEMPERMUDAH MENCARI KALIMAT \
DALAM KITAB AL QURAN", "BENAR"}, {
       "ACARA DEMO OMNIBUS LAW DI ISTANA PRESIDEN HINGGA JOKOWI LENGSER", 
        "DISINFORMASI (HOAKS)"}, {
       "PERNYATAAN ALIANSI DOKTER LINTAS NEGARA EROPA : COVID19 TIDAK \
BERBAHAYA", "MISINFORMASI (HOAKS)"}, {
       "RAYAKAN ULANG TAHUN KFC TAWARKAN 3000 SNACK BUCKET UNTUK SEMUA ORANG",
         "DISINFORMASI (HOAKS)"}, {
       "SINOVAC YANG AKAN DIVAKSINKAN KE 175 JUTA RAKYAT INDONESIA TERNYATA \
VAKSIN BERBAHAYA", "MISINFORMASI (HOAKS)"}, {
       "BIAYA TILANG TERBARU DI INDONESIA : KAPOLRI BARU MANTAP", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO BOLA MATA JENAZAH DIDUGA PASIEN COVID19 DI PROBOLINGGO HILANG", 
        "DISINFORMASI (HOAKS)"}, {
       "KOREA SELATAN KELABAKAN LIHAT WARGANYA MENINGGAL SATU PERSATU USAI \
DISUNTIK VAKSIN", "DISINFORMASI (HOAKS)"}, {
       "LEWAT AKHIR TAHUN 2020 PENUKARAN TABUNG GAS ELPIJI BIRU 12 KG KE \
WARNA PINK BERBIAYA 500 RIBU", "DISINFORMASI (HOAKS)"}, {
       "RAZIA MASKER SERENTAK DAN AKAN KENA DENDA 250RB", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO WEJANGAN BUPATI SITUBONDO BEBERAPA JAM SEBELUM WAFAT", 
        "DISINFORMASI (HOAKS)"}, {
       "DAPATKAN UANG 200 RIBU DAN BONUS TAMBAHAN DENGAN BERGABUNG DI \
BUZZBREAK", "BENAR"}, {
       "EVENT LAZADA SHARE POCKET, DAPATKAN CREDIT BELANJA SEBESAR RP150.000",
         "BENAR"}, {
       "HATI-HATI, BEBERAPA WARGA KOTA BANDUNG TERPAPAR COVID-19, SEBAGIAN \
MENINGGAL DUNIA", "MISINFORMASI (HOAKS)"}, {
       "INDOMARET BAGIKAN 5000 VOUCHER GRATIS SENILAI RP 2 JUTA", 
        "DISINFORMASI (HOAKS)"}, {
       "INFO AKAN ADA RAZIA GABUNGAN BESOK, KADAPATAN TAK PAKAI MASKER \
LANGSUNG DIDENDA RP 250.000", "DISINFORMASI (HOAKS)"}, {
       "MEDIA AUSTRALIA MENYEBUT HRS MANTAN BURONAN PORNOGRAFI BALIK KE \
INDONESIA UNTUK LUNCURKAN REVOLUSI MORAL", "BENAR"}, {
       "5 DOKTER MENINGGAL DUNIA KARENA COVID-19 PADA 18 NOVEMBER 2020", 
        "DISINFORMASI (HOAKS)"}, {
       "PENDAFTARAN INTERNET GRATIS 50 GB GELOMBANG KE-2", 
        "DISINFORMASI (HOAKS)"}, {
       "PENDAFTARAN SUBSIDI KUOTA INTERNET SEBESAR 35 GIGABYTE", 
        "DISINFORMASI (HOAKS)"}, {
       "TEMPAT TIDUR PASIEN COVID-19 DI BEBERAPA RS KOTA BANDUNG PENUH, \
KONSUMSI MAKANAN ALKALI DENGAN PH LEBIH TINGGI BISA BUNUH VIRUS COVID-19", 
        "MISINFORMASI (HOAKS)"}, {
       "JOKOWI TAK MAU DISUNTIK VAKSIN DULUAN", "DISINFORMASI (HOAKS)"}, {
       "KONSUMSI MAKANAN ALKALI DENGAN PH LEBIH TINGGI BISA BUNUH VIRUS \
COVID-19", "MISINFORMASI (HOAKS)"}, {
       "KABAR BAIK!!! SEMANGKUK AIR BAWANG PUTIH YANG BARU DIREBUS DAPAT \
SEMBUHKAN VIRUS CORONA", "MISINFORMASI (HOAKS)"}, {
       "KUOTA INTERNET 100 GB GRATIS TANPA ISI ULANG KARENA PANDEMI COVID19", 
        "DISINFORMASI (HOAKS)"}, {
       "TKW ASAL MADIUN SETENGAH LUMPUH SETELAH DISUNTIK VAKSIN", 
        "MISINFORMASI (HOAKS)"}, {
       "VOUCHER TAHUN BARU BERHADIAH DARI ALFAMART", 
        "DISINFORMASI (HOAKS)"}, {
       "ALFAMART TAWARKAN VOUCHER RP 800.000 UNTUK SEMUA ORANG", 
        "DISINFORMASI (HOAKS)"}, {
       "BUKTI KOMNAS HAM SUDAH LENGKAP, 100 JUTA UNTUK TUTUP MULUT KELUARGA \
LASKAR", "DISINFORMASI (HOAKS)"}, {
       "STATUS BERLOGO WHATSAPP ADALAH PENIPUAN UNTUK ALIHKAN DATA PRIBADI \
DAN REKENING BANK", "DISINFORMASI (HOAKS)"}, {
       "SUBSIDI KUOTA INTERNET 75GB", "DISINFORMASI (HOAKS)"}, {
       "CAIRAN VAKSIN TIDAK MASUK KE TUBUH JOKOWI", "DISINFORMASI (HOAKS)"}, {
       "BANTUAN SOSIAL FINANSIAL RP. 3.550.000 BAGI YANG KERJA TAHUN 2000 DAN \
2021", "DISINFORMASI (HOAKS)"}, {
       "KORBAN BERGELIMPANGAN, RATUSAN WARGA TERKAPAR USAI DISUNTIK SINOVAC", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK PENDAFTARAN KARTU PRAKERJA GELOMBANG 12", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO SEORANG PRIA PINGSAN SESUDAH DISUNTIK VAKSIN", 
        "MISINFORMASI (HOAKS)"}, {
       "BRIGJEN HENDRA KURNIAWAN ADALAH ANAK KANDUNG PRESIDEN CINA XI \
JINPING", "DISINFORMASI (HOAKS)"}, {
       "KASDIM 0817 GRESIK MAYOR SUGENG RIYADI MENINGGAL AKIBAT SIANGNYA \
DISUNTIK VAKSIN", "DISINFORMASI (HOAKS)"}, {
       "WASPADA POTENSI GEMPA AKIBAT SESAR LEMBANG BANDUNG, BMKG TEKANKAN \
PENTINGNYA MITIGASI", "BENAR"}, {
       "CARA CEK CALON PENERIMA VAKSIN COVID19 GRATIS MELALUI WEBSITE \
PEDULILINDUNGI.ID", "BENAR"}, {
       "LINK PENDAFTARAN BANPRES UMKM TAHAP II", "DISINFORMASI (HOAKS)"}, {
       "PULUHAN SANTRI KERACUNAN AKIBAT VAKSIN COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "KOMINFO BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, SISWA, \
MAHASISWA SELAMA MASA PANDEMI", "DISINFORMASI (HOAKS)"}, {
       "PESAN BERANTAI BERISI INFORMASI PENDAFTARAN VAKSINASI COVID-19 UNTUK \
LANSIA", "MISINFORMASI (HOAKS)"}, {
       "JOKOWI BUKA PINTU IZIN INVESTASI UNTUK INDUSTRI MIRAS BESAR SAMPAI \
ECERAN", "BENAR"}, {
       "KEMENDIKBUD BANTUAN PULSA 200RB DAN KUOTA 75GB UNTUK DOSEN, GURU, \
SISWA, MAHASISWA SELAMA MASA PANDEMI", "DISINFORMASI (HOAKS)"}, {
       "INDUSTRI ARAK HINGGA TUAK DISAHKAN, GUBERNUR BALI TERIMA KASIH KEPADA \
PRESIDEN JOKOWI", "BENAR"}, {
       "ITALY TELAH MELAKUKAN PROSES BEDAH MAYAT TERHADAP PASIEN CORONA YANG \
TELAH MENINGGAL", "DISINFORMASI (HOAKS)"}, {
       "SMS PEMBERITAHUAN PENERIMA DANA BANTUAN DARI KANTOR BPJS PUSAT", 
        "DISINFORMASI (HOAKS)"}, {
       "UANG REDENOMINASI PECAHAN RP 100 BERGAMBAR JOKOWI", 
        "DISINFORMASI (HOAKS)"}, {
       "AL-QURAN PALSU KEMBALI BEREDAR", "DISINFORMASI (HOAKS)"}, {
       "ARAB SAUDI TOLAK JEMAAH HAJI INDONESIA KARENA BELUM BAYAR AKOMODASI", 
        "DISINFORMASI (HOAKS)"}, {
       "BENDUNGAN WALAHAR AIRNYA MELUAP, YANG DI KARAWANG SIAP-SIAP", 
        "DISINFORMASI (HOAKS)"}, {
       "JOKOWI LEGALKAN MIRAS HINGGA KELAS ECERAN, KETUM MUHAMMADIYAH: BANGSA \
KITA SUDAH KEHILANGAN ARAH", "BENAR"}, {
       "TUJUH PENUMPANG LION AIR RUTE TIONGKOK - MANADO TERINFEKSI VIRUS \
CORONA", 0}, {
       "BPJS KESEHATAN SALURKAN BANSOS FINANSIAL BAGI YANG BEKERJA ANTARA \
TAHUN 2000 DAN 2021", "DISINFORMASI (HOAKS)"}, {
       "SUBSIDI PULSA 200 RIBU DAN KUOTA 50 GB KEMENDIKBUD DIPERPANJANG LAGI",
         "DISINFORMASI (HOAKS)"}, {"SANKSI MUDIK", "DISINFORMASI (HOAKS)"}, {
       "GURU DI SUKABUMI JADI SASARAN KEMARAHAN PERANGKAT DESA GEGARA POSTING \
JALAN RUSAK", "BENAR"}, {
       "TILANG ELEKTRONIK BERLAKU MULAI MARET 2021", "BENAR"}, {
       "VAKSINASI COVID-19 UNTUK LANSIA (USIA DIATAS 60) BISA TANPA ONLINE \
LANGSUNG DATANG KE LOKASI", "DISINFORMASI (HOAKS)"}, {
       "GURU HONORER DI LELES GARUT JADI LUMPUH SETELAH MENDAPAT VAKSIN \
KEDUA", "MISINFORMASI (HOAKS)"}, {
       "KFC SEDIAKAN HADIAH BUCKET AYAM DI PERINGATAN HARI PEREMPUAN \
INTERNASIONAL 2021", "DISINFORMASI (HOAKS)"}, {
       "MUAL HINGGA BENGKAK, WARTAWAN JAWA POS TV DILARIKAN KE IGD PASCA \
DIVAKSIN SINOVAC", "BENAR"}, {
       "FOTO BOTOL MIRAS DENGAN LABEL HALAL", "DISINFORMASI (HOAKS)"}, {
       "DIRUT VIVA COSMETIC SURABAYA, PAK SUSANTO MENINGGAL 3 HARI KEMUDIAN \
DI RS RKZ KARENA COVID SETELAH VAKSIN PERTAMA", "DISINFORMASI (HOAKS)"}, {
       "JUAL MINUMAN KERAS HUKUMNYA BOLEH UNTUK MEMBANTU KAS NEGARA", 
        "DISINFORMASI (HOAKS)"}, {
       "SUBSIDI PULSA 200 RIBU DAN KUOTA 95 GB KEMENDIKBUD RI", 
        "DISINFORMASI (HOAKS)"}, {
       "RILIS NAMA-NAMA DOKTER YANG WAFAT DI HARI YANG SAMA KARENA COVID19", 
        "MISINFORMASI (HOAKS)"}, {
       "VIDEO CACING DI MASKER IMPOR ASAL CHINA", "DISINFORMASI (HOAKS)"}, {
       "BANTUAN SOSIAL FINANSIAL BRI RP. 5.500.000", 
        "DISINFORMASI (HOAKS)"}, {
       "POSTINGAN STATUS AKUN YANG DIHACK", "BENAR"}, {
       "BANTUAN SOSIAL FINANSIAL BJB RP. 5.500.000", 
        "DISINFORMASI (HOAKS)"}, {
       "CARA MENDAPATKAN SUBSIDI LISTRIK PLN DENGAN KLIK TAUTAN INI", 
        "DISINFORMASI (HOAKS)"}, {
       "GURU SUKABUMI LUMPUH USAI VAKSIN COVID-19 DOSIS 2", "BENAR"}, {
       "LINK ULTAH INDOMIE KE-60 BERHADIAH 1000 SMARTWATCH", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK ULTAH TELKOMSEL KE-60 BERHADIAH 1000 SMARTWATCH", 
        "DISINFORMASI (HOAKS)"}, {
       "ANGGOTA BRIMOB MALUKU MENINGGAL DUNIA SETELAH DIVAKSIN ASTRAZENECA", 
        "DISINFORMASI (HOAKS)"}, {
       "CINA TELAH MENYEBAR PENYAKIT LEWAT MASKER BARU YANG MASUK KE \
INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "FOTO KARTINI MEMAKAI HIJAB", "DISINFORMASI (HOAKS)"}, {
       "LINK ULTAH INDOFOOD KE-50 BERHADIAH 1000 SMARTWATCH", 
        "DISINFORMASI (HOAKS)"}, {
       "RATUSAN WN INDIA MASUK INDONESIA KE INDONESIA DI SAAT COVID-19 \
MEROKET DI INDIA", "BENAR"}, {
       "PULUHAN WARGA CHINA TIBA DI BANDARA SOETTA SELASA (4/5) SORE, \
LANGSUNG DIJEMPUT BUS", "BENAR"}, {
       "LINK SUBSIDI PULSA 200 RIBU DAN KUOTA 125 GB KEMENDIKBUD", 
        "DISINFORMASI (HOAKS)"}, {
       "RUSIA TIDAK MENEMUKAN VIRUS DARI HASIL OTOPSI JENAZAH COVID-19", 
        "DISINFORMASI (HOAKS)"}, {
       "YANG SUDAH DIVAKSIN SIAP-SIAP MATI DINI DALAM JANGKA WAKTU 2 TAHUN", 
        "DISINFORMASI (HOAKS)"}, {
       "PENYEKATAN MUDIK DI PERBATASAN BEKASI-BOGOR, TAK TANGGUNG- TANGGUNG \
TNI NURUNIN TANK BAJA", "DISINFORMASI (HOAKS)"}, {
       "BENDA BERMAGNET BISA MENEMPEL DI LENGAN PENERIMA VAKSIN CORONA", 
        "DISINFORMASI (HOAKS)"}, {
       "TULISAN ILMIAH IDI : COVID-19 ADALAH PENGELABUAN DAN PEMBODOHAN \
GLOBAL", "DISINFORMASI (HOAKS)"}, {
       "CAMPURAN KELAPA MUDA, JERUK NIPIS, GARAM DAN MADU LENYAPKAN VIRUS \
CORONA", "DISINFORMASI (HOAKS)"}, {"GALANG DANA UNTUK PALESTINA", "BENAR"}, {
       "LINK ULTAH COFFESHOP JANJI JIWA KE-30 BERHADIAH 1000 SMARTWATCH", 
        "DISINFORMASI (HOAKS)"}, {
       "PDIP USUL KE PEMERINTAH AGAR SELURUH PESANTREN DI INDONESIA DITUTUP", 
        "DISINFORMASI (HOAKS)"}, {
       "PENGGUNAAN MASKER SEBABKAN MANUSIA KERACUNAN CO2", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO MOBIL IRINGAN-IRINGAN JOKOWI MUDIK, RI 1 PULANG KAMPUNG", 
        "DISINFORMASI (HOAKS)"}, {
       "7 BUMN BAKAL DIBUBARKAN. PLN DLM TAHAP RESTRUKTURISASI", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK BANTUAN UMKM BRI TAHAP 3 SEBESAR RP 2.100.000", 
        "DISINFORMASI (HOAKS)"}, {
       "RSHS DAN BEBERAPA RUMAH SAKIT DI BANDUNG DIPENUHI PASIEN COVID-19 DAN \
BANYAK YANG MENINGGAL DI UGD", "DISINFORMASI (HOAKS)"}, {
       "700 LEBIH JENAZAH DIMAKAMAKAN SECARA COVID-19, TERNYATA HASIL SWAB \
NEGATIF", "BENAR"}, {
       "DR. SITI FADILAH (MANTAN MENKES) DAN NIDOM : GAGALKAH HERD IMUNITY ?",
         "BENAR"}, {
       "SURAT EDARAN DIRJEN PELAYANAN KESEHATAN TENTANG PEMANFAATAN OBAT \
TRADISIONAL UNTUK PEMELIHARAAN KESEHATAN", "BENAR"}, {
       "INFO VAKSINASI COVID-19 DI PUSSENIF PPI SUPRATMAN BANDUNG", 
        "DISINFORMASI (HOAKS)"}, {
       "SURAT KLARIFIKASI KUOTA HAJI INDONESIA DARI KEDUTAAN ARAB SAUDI", 
        "BENAR"}, {
       "VIDEO PASIEN COVID KEHABISAN RUANGAN DI RS BEKASI DAN TERLANTAR DI \
PARKIRAN", "BENAR"}, {
       "AKUN WHATSAPP MENCATUT FOTO DAN NAMA ABDY YUHANA ANGGOTA DPRD JAWA \
BARAT", "DISINFORMASI (HOAKS)"}, {
       "ARTIKEL MENGATASNAMAKAN BRIGJEN TNI (PURN) DR. MARDJO SUBIANDONO AJAK \
WARGA BANGUN OPTIMISME HADAPI COVID 19", "DISINFORMASI (HOAKS)"}, {
       "JADWAL PELAKSANAAN VAKISNASI COVID19 DI KOTA BANDUNG", "BENAR"}, {
       "PELAKSANAAN VAKSINASI DI GRAND BALLROOM SUDIRMAN BANDUNG BANYAK YANG \
TERPAPAR COVID-19", "MISINFORMASI (HOAKS)"}, {
       "LINK BANTUAN SOSIAL TUNAI PPKM DARURAT", "DISINFORMASI (HOAKS)"}, {
       "PENUTUPAN SPBU SEMENTARA 12 JULI 2021-17 JULI 2021", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO ALAT UJI SWAB ANTIGEN DI TETES AIR KERAN HASILNYA POSITIF \
COVID", "DISINFORMASI (HOAKS)"}, {
       "MANTAN MENKES SITI FADILAH SUDAH SERING KENA COVID-19 SEJAK DULU", 
        "DISINFORMASI (HOAKS)"}, {
       "VIDEO BERITA DARI CNN INDONESIA POTENSI BAHAYA VAKSIN COVID - 19", 
        "BENAR"}, {
       "VIDEO JOKOWI DITENGAH KERUMUNAN WARGA TIONGKOK TANPA MEMAKAI MASKER", 
        "DISINFORMASI (HOAKS)"}, {
       "WARGA YANG MEMILIKI KARTU VAKSIN COVID-19 AKAN TERIMA BANTUAN \
KOMPENSASI PPKM SEBESAR 1 JUTA", "DISINFORMASI (HOAKS)"}, {
       "BANTUAN BEASISWA ANAK PEDAGANG KECIL TERDAMPAK PPKM DARURAT", 
        "BENAR"}, {
       "CHINA MINTA PULAU KALIMANTAN SEBAGAI JAMINAN UTANG INDONESIA", 
        "MISINFORMASI (HOAKS)"}, {
       "CORONA VIRUS TERTULIS DI BUKU PELAJARAN IPA TAHUN 2017", "BENAR"}, {
       "JIKA SEDANG FLU, JANGAN LAKUKAN SWAB TEST NANTI POSITIF COVID-19", 
        "MISINFORMASI (HOAKS)"}, {
       "LINK SUBSIDI PULSA 250 RIBU DAN KUOTA 75 GB KEMENDIKBUD", 
        "DISINFORMASI (HOAKS)"}, {
       "TANGGAL BERAKHIRNYA PROYEK KOPIT", "DISINFORMASI (HOAKS)"}, {
       "TOLONG SEBARKAN BUAT BANTU PEDAGANG KECIL", "BENAR"}, {
       "SURAT EDARAN DEWAN MASJID INDONESIA TENTANG SHOLAT JUM'AT DUA \
GELOMBANG GANJIL GENAP", "BENAR"}, {
       "PERINGATI HUT RI KE-76, KOMINFO BERIKAN KUOTA INTERNET GRATIS 150GB", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK BANTUAN SEBESAR RP 500.000 DARI KEMENTRIAN SOSIAL RI", 
        "DISINFORMASI (HOAKS)"}, {
       "CEGAH KEBOCORAN DATA, 2.453 PRODUK DAN JASA CETAK KARTU VAKSIN \
DIBLOKIR", "BENAR"}, {
       "INFORMASI RAZIA ZEBRA SERENTAK DI KOTA BANDUNG TANGGAL 31 AGUSTUS \
2021", "DISINFORMASI (HOAKS)"}, {
       "LINK SURVEY UNDIAN BERHADIAH DALAM RANGKA ULTAH HONDA KE-70", 
        "DISINFORMASI (HOAKS)"}, {
       "LOWONGAN KERJA MENJADI CREW RUNNER PON PAPUA 2021", 
        "DISINFORMASI (HOAKS)"}, {
       "PEMBERITAHUAN PENIPUAN PESAN SINGKAT BERISI FORMAT ISIAN KELUHAN DARI \
MASYARAKAT SETELAH DIVAKSIN", "BENAR"}, {
       "PENCETAKAN KARTU VAKSIN MEMUNGKINKAN MELANGGAR HAK KONSUMEN", 
        "BENAR"}, {
       "PERUBAHAN HARI LIBUR NASIONAL DAN CUTI BERSAMA TAHUN 2021", 
        "BENAR"}, {
       "BANTUAN KUOTA DATA INTERNET KEMENDIKBUD TAHUN 2021 SUBSIDI PULSA 200 \
RIBU DAN KUOTA 50 GB", "DISINFORMASI (HOAKS)"}, {
       "PEMBERITAHUAN BANTUAN KESEHATAN DAN MODAL USAHA DARI BPJS", 
        "DISINFORMASI (HOAKS)"}, {
       "RI IMPOR CABE 27 RIBU TON CABE", "BENAR"}, {
       "RAYAKAN ULTAHNYA KE-120, BRI BAGIKAN HADIAH 2 JUTA RUPIAH LEWAT \
KUISIONER ONLINE", "DISINFORMASI (HOAKS)"}, {
       "LAYANAN INTERNET MATI TOTAL PADA 24 HINGGA 30 SEPTEMBER 2021", 
        "DISINFORMASI (HOAKS)"}, {
       "LINK DANA BANTUAN 150 JUTA BPJS KESEHATAN", "DISINFORMASI (HOAKS)"}, {
       "LINK HADIAH RESMI 175 JUTA DARI WHATSAPP 2021", 
        "DISINFORMASI (HOAKS)"}, {
       "PENDAFTARAN VAKSIN NUSANTARA", "DISINFORMASI (HOAKS)"}, {
       "RUMOR DOKTER PALSU SEBARKAN VIRUS AIDS DENGAN BERPURA-PURA MENGUKUR \
GULA DARAH SECARA GRATIS", "DISINFORMASI (HOAKS)"}, {
       "FOTO PERBAIKAN KABEL INTERNET BAWAH LAUT INDIEHOME", 0}, {
       "RILIS TERBARU WHO : RENTANG USIA PEMUDA ADALAH 18-65 TAHUN", 
        "DISINFORMASI (HOAKS)"}, {
       "SEJUMLAH NOMOR TELEPON LUAR NEGERI INI BISA SALIN DAFTAR KONTAK", 
        "DISINFORMASI (HOAKS)"}, {
       "SITUS PALSU MENGATASNAMAKAN PEDULILINDUNGI", 
        "DISINFORMASI (HOAKS)"}, {
       "SMS PEMBERITAHUAN PEMENANG UNDIAN KE-2 DARI PT SHOPEE SEBESAR RP 185 \
JUTA", "DISINFORMASI (HOAKS)"}, {
       "19 AGUSTUS 2021 MASKAPAI BATIK AIR JEMPUT WNI YANG ADA DI \
AFGHANISTAN", "DISINFORMASI (HOAKS)"}, {
       "9 BULAN JADI MENAG, KEKAYAAN YAQUT MELESAT 1.000%", 
        "DISINFORMASI (HOAKS)"}, {
       "ADA VIDEO MENAG YAQUT CHOLIL QOUMAS DIBAPTIS PINDAH AGAMA", 
        "DISINFORMASI (HOAKS)"}, {
       "AJAKAN MENGINSTAL APLIKASI TRACETOGETHER UNTUK MENDUKUNG KEPUTUSAN \
KEMKOMINFO TENTANG UPAYA PENANGANAN COVID-19", "DISINFORMASI (HOAKS)"}, {
       "HADIAH ULANG TAHUN BRI KE 120", "DISINFORMASI (HOAKS)"}, {
       "PARTAI PRIMA BUATAN ANAK-ANAK KOMUNIS", "DISINFORMASI (HOAKS)"}, {
       "DAFTAR KENDARAAN LELANG NONEKSEKUSI DARI KEMENTRIAN KEUANGAN REPUBLIK \
INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "GELAR ICF CHAMPIONSHIP 2021, JALAN MENUJU KOTA GARUT PADA 26 OKTOBER \
2021 DITUTUP", "BENAR"}, {
       "LINK SUBSIDI DARI PERTAMINA VIA SMS RP. 189 JUTA", 
        "DISINFORMASI (HOAKS)"}, {
       "MISIONARIS MEREBAK, TERMASUK DI SUMBAR", 0}, {
       "PENGUMUMAN : PEMBERHENTIAN SEMENTARA OPERASIONAL BUS KOTA DAMRI \
BANDUNG", "BENAR"}, {
       "PERNYATAAN EKS PETINGGI INTELIJEN SAUDI TENTANG MOHAMMED BIN SALMAN", 
        0}, {"TAWARAN KUOTA GRATIS 50 GB DI PERAYAAN ULANG TAHUN WHATSAPP", 
        "DISINFORMASI (HOAKS)"}, {"VAKSINASI MILENIAL JABAR", "BENAR"}, {
       "20 RIBU LAPORAN KEBUTAAN USAI VAKSINASI DI EROPA", 
        "DISINFORMASI (HOAKS)"}, {
       "ADA WALI ALLAH DI SURADE SUKABUMI", "MISINFORMASI (HOAKS)"}, {
       "AIR REBUSAN DAUN SIRI DAPAT SEMBUHKAN KATARAK", 
        "DISINFORMASI (HOAKS)"}, {
       "AJID TEROBOS BANGUNAN SD YANG AMBRUK DEMI SELAMATKAN FOTO JIHYO", 
        "DISINFORMASI (HOAKS)"}, {
       "AKUN INSTGRAM LAPTOP BM STORE", "DISINFORMASI (HOAKS)"}, {
       "VIDEO : 500 TON PISANG DARI SOMALIA TERKONTAMINASI CACING \
HELICOBACTER", "DISINFORMASI (HOAKS)"}, {
       "DARI DITLANTAS POLDA, BESOK ADA RAZIA MASKER SERENTAK DISELURUH \
WILAYAH INDONESIA", "DISINFORMASI (HOAKS)"}, {
       "UANG BARU PECAHAN 1.0 BERNILAI 1 JUTA RUPIAH", 
        "DISINFORMASI (HOAKS)"}, {
       "WASPADA PENCULIKAN ANAK DENGAN MODUS PENJUAL, OM TELOLET, ORANG GILA, \
IBU HAMIL, PENGEMIS", "DISINFORMASI (HOAKS)"}, {
       "ACHA SEPTRIASA MENINGGAL DUNIA", "DISINFORMASI (HOAKS)"}, {
       "ADE ARMANDO : DALAM AL-QURAN TAK ADA PERINTAH SHOLAT 5 WAKTU", 
        "BENAR"}, {
       "ADE ARMANDO : SAYA BERAGAMA ISLAM TAPI TIDAK PERCAYA SYARIAT ISLAM \
HARUS DIJALANKAN", "BENAR"}, {
       "AKUN WHATSAPP MENGATASNAMAKAN BUPATI INDRAMAYU", 
        "DISINFORMASI (HOAKS)"}, {
       "AKUN WHATSAPP MENGATASNAMAKAN KAPOLDA JAWA BARAT AHMAD DOFIRI", 
        "DISINFORMASI (HOAKS)"}, {
       "AKUN WHATSAPP MENGATASNAMAKAN WAKIL KETUA DPRD KOTA CIREBON", 
        "DISINFORMASI (HOAKS)"}, {
       "ALIANSI DOKTER DUNIA SEBUT VARIAN DELTA TIDAK PERNAH ADA", 
        "DISINFORMASI (HOAKS)"}, {
       "ANGGOTA DPR : PERMENDIKBUD 30 LEGALKAN SEKS BEBAS DAN LGBT ASAL \
KORBAN SETUJU", "DISINFORMASI (HOAKS)"}, {
       "BAHAN BURGER KFC 15% AYAM DAN SISANYA BAHAN TIDAK LAYAK KONSUMSI", 
        "DISINFORMASI (HOAKS)"}, {
       "BAHAYA VAKSIN BERISIKO TINGGI", "DISINFORMASI (HOAKS)"}, {
       "BANK INDONESIA TAWARKAN INVESTASI ONLINE LEWAT TELEGRAM", 
        "DISINFORMASI (HOAKS)"}, {
       "LOWONGAN KERJA DISKOMINFO JABAR", "BENAR"}, {
       "HADIAH ULANG TAHUN BRI KE - 130 UANG TUNAI SEBESAR 2 JUTA RUPIAH", 
        "DISINFORMASI (HOAKS)"}, {
       "REKRUTMEN DISKOMINFO JABAR MEMINTA BIAYA", "DISINFORMASI (HOAKS)"}, {
       "HARI JADI JNE YANG KE-31 MELALUI KUISIONER ANDA AKAN MENDAPATKAN UANG \
TUNAI 2 JUTA RUPIAH", "DISINFORMASI (HOAKS)"}, {
       "SERUAN ISI PENUH TANGKI BBM KARENA KARYAWAN PERTAMINA MOGOK KERJA", 
        "DISINFORMASI (HOAKS)"}, {
       "ULTAH KE-50 KIMIA FARMA BAGIKAN UANG 2 JUTA RUPIAH", 
        "DISINFORMASI (HOAKS)"}, {
       "WASPADA MENGAKU MAHASISWA MEMINTA FOTO KTP UNTUK PINJOL", 
        "DISINFORMASI (HOAKS)"}, {
       "1,4 JUTA WARGA CHINA IKUT TES PNS 2021", "DISINFORMASI (HOAKS)"}, {
       "AKUN PT PETROKIMIA GRESIK", "DISINFORMASI (HOAKS)"}, {
       "BEJAT! GURU NGAJI DI DEPOK CABULI 10 ANAK MURIDNYA", "BENAR"}, {
       "BENARKAH JANTUNG MANUSIA BERHENTI BERDETAK SAAT BERSIN?", 
        "DISINFORMASI (HOAKS)"}, {
       "BENARKAH KONSUMSI SAYUR PAKIS MENGAKIBATKAN KANKER LAMBUNG", 
        "DISINFORMASI (HOAKS)"}, {
       "DUBAI BERDUKA, TABRAKAN TRUK TANGKI DAN MENYEBABKAN KEBAKARAN BESAR \
DI JALAN TOL DUBAI", "DISINFORMASI (HOAKS)"}}, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`UnknownShape[False]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], TypeSystem`AnyType}], 330], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`UnknownShape[False]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], TypeSystem`AnyType}], 330], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     330, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
              "RS HASAN SADIKIN BANDUNG ISOLASI PASIEN TERDUGA VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "SELEBARAN BERLOGO POLDA METRO JAYA : WASPADA PENCULIKAN ANAK \
12 TAHUN, PELAKU MENYAMAR SEBAGAI BUMIL", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "ARTI HURUF ARAB PADA BUKU IQRA 1, CORONA DICIPTAKAN PADA ZAMAN \
PENUH KEBOHONGAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "CIPANAS (PUNCAK) BARU SAJA DILANDA BANJIR BANDANG, ALIRAN \
AIRNYA BISA MASUK JKT BESOK PAGI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "DITOLAK DI BERBAGAI NEGARA, RATUSAN TURIS CHINA DISAMBUT DI \
INONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "DUA LAKI-LAKI PENIPU MENCARI DANA PAKAI BAJU LAMBANG \
PANCASILA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "KABAR PENEMUAN JENAZAH SISWA SEKOLAH DASAR DI KEMAYORAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "VIRAL BAYI USIA 2 BULAN DI SUKABUMI MENINGGAL DIDUGA KARENA \
IMUNISASI", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "APLIKASI WHATSAPP TELAH DIBLOKIR OLEH HACKER KELAS DUNIA \
BERINISIAL FFM", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["BIAYA TILANG TERBARU DI INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "CORONA VIRUS UDAH NYAMPE KE BANDUNG, DI RSHS UDAH ADA 1 PASIEN \
YANG FIX CORONA VIRUS, 1 PASEIN SUSPECT", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "DUA ORANG KENAKAN BAJU BERLAMBANG PANCASILA LAKUKAN HIPNOTIS \
BERMODUS MINTA BANTUAN PEDULI PULAU SEBUKU", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "INFO KEPADA REKAN-REKAN : DI RSHS BANDUNG UDAH ADA PASIEN \
SUSPECT VIRUS CORONA RUJUKAN DARI RS CAHYA KAWALUYAAN", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "PEMBERITAHUAN KEMENTERIAN KESEHATAN : VIRUS CORONA KALI INI \
SERIUS, JAGA TENGGOROKAN TETAP LEMBAB, MINUMLAH 50-80 CC AIR HANGAT, 30-50 CC \
UNTUK ANAK-ANAK", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "PENTING! KEMENKES RI SIAGAKAN 19 DAERAH WASPADA VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["BENAR", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "ADA 136 PASIEN DALAM PENGAWASAN VIRUS CORONA DI INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "HIMBAUAN DARI KBRI KL UNTUK TIDAK MENGKONSUMSI MAKANAN PRODUK \
CHINA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "MARET 2020 AKAN ADA PEMBUATAN SIM KOLEKTIF DI SELURUH SAMSAT \
INDONESIA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["PASIEN VIRUS CORONA DI APARTEMEN TAMAN ANGGREK", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "VIDEO WARGA CHINA IKUT SHALAT GARA-GARA VIRUS CORONA", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DISINFORMASI (HOAKS)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{224.00000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 330, 1], {1, 330 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 330, 1], {1, 330 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[330, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[330, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 330, 1], {1, 330 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 330, 1], {1, 330 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       1215.0506340026855`, {246.55772988281248`, 251.71647011718747`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      1215.0506340026855`, {246.55772988281248`, 251.71647011718747`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.9409504438056526`*^9, 3.9409522257630367`*^9, {3.9409529336608353`*^9, 
   3.9409529375043774`*^9}, 3.9409531269363613`*^9, 3.940956029699692*^9, 
   3.9409872424982376`*^9, 3.9418657598507156`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"97b9b941-68d1-aa4a-9c2b-675a54432401"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Counts", "[", 
  RowBox[{"cleanedData", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.940952326321169*^9, 3.9409523607947083`*^9}, {
   3.9409528786703625`*^9, 3.9409528885533695`*^9}, 3.9409530027999096`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"21eda600-f513-e24b-8ffc-e2b45965ca56"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|{"BENAR"} -> 82, {"DISINFORMASI (HOAKS)"} -> 
       209, {"MISINFORMASI (HOAKS)"} -> 35, {0} -> 4|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`AtomShape[34]]], 4, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Vector[TypeSystem`AnyType, 1], 
       TypeSystem`Atom[Integer], 4], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`AtomShape[34]]], 4, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Vector[TypeSystem`AnyType, 1], 
       TypeSystem`Atom[Integer], 4], "Path" -> {}, "DisplayedRowCount" -> 4, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 4, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"BENAR"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"BENAR"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[{"BENAR"}]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"BENAR"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["82"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"BENAR"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"DISINFORMASI (HOAKS)"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"DISINFORMASI (HOAKS)"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[{"DISINFORMASI (HOAKS)"}]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"DISINFORMASI (HOAKS)"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["209"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"DISINFORMASI (HOAKS)"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"MISINFORMASI (HOAKS)"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"MISINFORMASI (HOAKS)"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[{"MISINFORMASI (HOAKS)"}]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"MISINFORMASI (HOAKS)"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["35"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"MISINFORMASI (HOAKS)"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{0}, ShowStringCharacters -> False], 
                  Style[
                   Style[{0}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[{0}]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{0}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{0}]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       183.37281513214108`, {45.74702988281249, 50.905770117187494`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      183.37281513214108`, {45.74702988281249, 50.905770117187494`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.9409523610768127`*^9, 3.9409526342345066`*^9, {3.9409528822049656`*^9, 
   3.9409528890197945`*^9}, {3.940952931511856*^9, 3.940952939767618*^9}, 
   3.940953003406246*^9, 3.940953129541582*^9, 3.940956029737465*^9, 
   3.9409872427785435`*^9, 3.941865762473776*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"e2235911-4a64-a942-a1cc-8514c565d810"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fixing the Classification", "Subsection",
 CellChangeTimes->{{3.9409775375883865`*^9, 3.9409775927077446`*^9}, {
  3.9409777605195217`*^9, 3.9409777670974827`*^9}, {3.940977814709341*^9, 
  3.9409778275093575`*^9}},ExpressionUUID->"0b16df1b-f9d6-b04c-b0ab-\
2e9661cfcf4e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cleanedData", " ", "=", " ", 
   RowBox[{"MapAt", "[", "\n", "   ", 
    RowBox[{
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
          "\"\<DISINFORMASI (HOAKS)\>\"", " ", "->", " ", "\"\<HOAX\>\""}], 
          ",", " ", 
          RowBox[{
          "\"\<MISINFORMASI (HOAKS)\>\"", " ", "->", " ", "\"\<HOAX\>\""}]}], 
         "}"}]}], "]"}], " ", "&"}], ",", "\n", "   ", "cleanedData", ",", 
     "\n", "   ", 
     RowBox[{"{", 
      RowBox[{"All", ",", " ", "2"}], "}"}]}], "\n", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.940952395841604*^9, 3.940952420302168*^9}, {
  3.9409525002113895`*^9, 3.9409525243061714`*^9}, {3.9409525860706177`*^9, 
  3.9409526014593506`*^9}, {3.940952637688776*^9, 3.940952640677706*^9}, {
  3.940952893974325*^9, 3.940952906781727*^9}, {3.940952977919653*^9, 
  3.9409530103469715`*^9}, {3.9409530572995567`*^9, 3.9409530667599564`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"1f894f13-c1b4-a340-821f-72f41db9ba9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Counts", "[", 
  RowBox[{"cleanedData", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", " ", 
     RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.9409525046527615`*^9, 3.9409525095895176`*^9}, 
   3.940952541766184*^9, {3.9409529102191277`*^9, 3.9409529168517895`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"a91a9c68-a613-2a40-adda-b3612601c8f1"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|{"BENAR"} -> 82, {"HOAX"} -> 244, {0} -> 4|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`AtomShape[34]]], 3, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Vector[TypeSystem`AnyType, 1], 
       TypeSystem`Atom[Integer], 3], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`AtomShape[34]]], 3, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Vector[TypeSystem`AnyType, 1], 
       TypeSystem`Atom[Integer], 3], "Path" -> {}, "DisplayedRowCount" -> 3, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 3, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"BENAR"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"BENAR"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[{"BENAR"}]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"BENAR"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["82"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"BENAR"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"HOAX"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"HOAX"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[{"HOAX"}]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"HOAX"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["244"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{"HOAX"}]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{0}, ShowStringCharacters -> False], 
                  Style[
                   Style[{0}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[{0}]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{0}]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[{0}]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       109.30000000000001`, {33.777929882812494`, 38.9366701171875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      109.30000000000001`, {33.777929882812494`, 38.9366701171875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.940952511070818*^9, 3.940952554834467*^9}, {
   3.940952588913391*^9, 3.9409526039241047`*^9}, 3.940952643226797*^9, 
   3.940952917713375*^9, 3.940952996127144*^9, {3.9409530603809834`*^9, 
   3.9409530692355995`*^9}, 3.940953132978945*^9, 3.940956029792074*^9, 
   3.940987242930807*^9, 3.941865766556408*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"31ca4798-524d-204e-a9c4-eb86ab3b4531"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"cleanedData", " ", "=", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"cleanedData", ",", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], " ", "=!=", " ", "0"}], " ", "&"}]}], 
    "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.9409531752048893`*^9, 3.940953188557537*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"e153c45d-e125-7243-8deb-8d06b91ba525"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Class Balancing", "Subsection",
 CellChangeTimes->{{3.9409778332862225`*^9, 
  3.9409778654122467`*^9}},ExpressionUUID->"e30853e1-6298-b440-a95a-\
bcdaab9b2772"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"nSamples", " ", "=", " ", "80"}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"dfHoax", " ", "=", " ", 
    RowBox[{"RandomSample", "[", "\n", "  ", 
     RowBox[{
      RowBox[{"Select", "[", 
       RowBox[{"cleanedData", ",", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], " ", "==", " ", "\"\<HOAX\>\""}], 
         " ", "&"}]}], "]"}], ",", " ", "\n", "  ", "nSamples"}], "\n", 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"dfTrue", " ", "=", " ", 
   RowBox[{"RandomSample", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"cleanedData", ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], " ", "==", " ", "\"\<BENAR\>\""}], 
        " ", "&"}]}], "]"}], ",", " ", "\n", "  ", "nSamples"}], "\n", 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.9409526102982407`*^9, 3.9409526298577175`*^9}, {
   3.9409526736982536`*^9, 3.9409526894775257`*^9}, {3.9409531996139164`*^9, 
   3.9409532559496307`*^9}, 3.9409550538041515`*^9},
 CellLabel->"In[19]:=",ExpressionUUID->"58cd3100-15de-0e4a-84ef-975284a9ad35"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cleanedData", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"dfHoax", ",", " ", "dfTrue"}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.9409532837293854`*^9, 3.9409532985035686`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"c6c607a1-4232-c74b-ae79-706df2575eba"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["NLP Preprocessing", "Section",
 CellChangeTimes->{{3.9409778765991497`*^9, 
  3.940977879147806*^9}},ExpressionUUID->"0d612dc2-44f3-a34d-b042-\
3f233f0a4c00"],

Cell[CellGroupData[{

Cell["Wordopt", "Subsection",
 CellChangeTimes->{{3.940977882794338*^9, 3.940977895129858*^9}, {
  3.9409779987914467`*^9, 
  3.9409780006019745`*^9}},ExpressionUUID->"e5be4f57-b3c2-9e4f-8db9-\
f016578a1ded"],

Cell["My way to say \[OpenCurlyDoubleQuote]Word Optimization\
\[CloseCurlyDoubleQuote]", "Text",
 CellChangeTimes->{{3.940978003102251*^9, 
  3.9409780135646152`*^9}},ExpressionUUID->"9f34ec37-8f5a-5546-8b24-\
93d2832beb25"],

Cell[BoxData[
 RowBox[{
  RowBox[{"wordopt", "[", "text_String", "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"cleanedText", " ", "=", " ", "text"}], "}"}], ",", "\n", "  ", 
    "\n", "  ", 
    RowBox[{"(*", " ", 
     RowBox[{"Convert", " ", "text", " ", "to", " ", "lowercase"}], " ", 
     "*)"}], "\n", "  ", 
    RowBox[{
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"ToLowerCase", "[", "cleanedText", "]"}]}], ";", "\n", "  ", 
     "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Remove", " ", "text", " ", "within", " ", "brackets"}], " ", 
      "*)"}], "\n", "  ", 
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"cleanedText", ",", " ", "\n", "    ", 
        RowBox[{
         RowBox[{"RegularExpression", "[", "\"\<\\\\[.*?\\\\]\>\"", "]"}], 
         " ", "->", " ", "\"\<\>\""}]}], "]"}]}], ";", "\n", "  ", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Remove", " ", "URLs"}], " ", "*)"}], "\n", "  ", 
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"cleanedText", ",", " ", "\n", "    ", 
        RowBox[{
         RowBox[{
         "RegularExpression", "[", 
          "\"\<https?://[\\\\S]+|www\\\\.[\\\\S]+\>\"", "]"}], " ", "->", 
         " ", "\"\<\>\""}]}], "]"}]}], ";", "\n", "  ", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Remove", " ", "HTML", " ", "tags"}], " ", "*)"}], "\n", "  ", 
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"cleanedText", ",", " ", "\n", "    ", 
        RowBox[{
         RowBox[{"RegularExpression", "[", "\"\<<[^>]*>\>\"", "]"}], " ", "->",
          " ", "\"\<\>\""}]}], "]"}]}], ";", "\n", "  ", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Remove", " ", "HTML", " ", "character", " ", "codes", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"like", " ", "&"}], "amp"}], ";"}], ")"}]}], " ", "*)"}], 
     "\n", "  ", 
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"cleanedText", ",", " ", "\n", "    ", 
        RowBox[{
         RowBox[{"RegularExpression", "[", "\"\<&[A-Za-z0-9]+;\>\"", "]"}], 
         " ", "->", " ", "\"\< \>\""}]}], "]"}]}], ";", "\n", "  ", "\n", 
     "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Remove", " ", "punctuation"}], " ", "*)"}], "\n", "  ", 
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"cleanedText", ",", " ", "\n", "    ", 
        RowBox[{
         RowBox[{"RegularExpression", "[", "\"\<[^\\\\w\\\\s]\>\"", "]"}], 
         " ", "->", " ", "\"\<\>\""}]}], "]"}]}], ";", "\n", "  ", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Remove", " ", "extra", " ", "whitespace"}], " ", "*)"}], "\n", 
     "  ", 
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"cleanedText", ",", " ", "\n", "    ", 
        RowBox[{
         RowBox[{"RegularExpression", "[", "\"\<\\\\s+\>\"", "]"}], " ", "->",
          " ", "\"\< \>\""}]}], "]"}]}], ";", "\n", "  ", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Remove", " ", "newline", " ", "characters"}], " ", "*)"}], 
     "\n", "  ", 
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"cleanedText", ",", " ", 
        RowBox[{"\"\<\\n\>\"", " ", "->", " ", "\"\< \>\""}]}], "]"}]}], ";", 
     "\n", "  ", "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Remove", " ", 
       RowBox[{"leading", "/", "trailing"}], " ", "whitespace"}], " ", "*)"}],
      "\n", "  ", 
     RowBox[{"cleanedText", " ", "=", " ", 
      RowBox[{"StringTrim", "[", "cleanedText", "]"}]}], ";", "\n", "  ", 
     "\n", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"Return", " ", "cleaned", " ", "text"}], " ", "*)"}], "\n", 
     "  ", "cleanedText"}]}], "\n", "]"}]}]], "Code",
 CellChangeTimes->{
  3.940953341110182*^9, {3.9409534326994534`*^9, 3.9409534347868233`*^9}, 
   3.940953572090357*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"a887cf03-ca72-7444-894b-298366e2b77e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "text", " ", "=", " ", 
   "\"\<Here's some [bracketed] text with a <b>HTML tag</b> and a URL \
https://example.com\>\""}], ";"}], "\n", 
 RowBox[{"wordopt", "[", "text", "]"}]}], "Code",
 CellChangeTimes->{{3.9409534873261147`*^9, 3.9409535128359604`*^9}, {
  3.9409535910150967`*^9, 3.940953595822237*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"c6f4a699-c281-9d46-8cce-d963edbc36dd"],

Cell[BoxData["\<\"heres some text with a html tag and a url\"\>"], "Output",
 CellChangeTimes->{{3.9409534978470306`*^9, 3.9409535139079*^9}, {
   3.940953577170288*^9, 3.940953596632349*^9}, 3.9409548350012665`*^9, 
   3.9409550595450115`*^9, 3.9409552309240646`*^9, 3.9409560298526497`*^9, 
   3.940987243099964*^9, 3.94186577750515*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"ba24f575-6ca9-994c-8e27-b3b330cf6e36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanedData", " ", "=", " ", 
  RowBox[{"MapAt", "[", 
   RowBox[{"wordopt", ",", " ", "cleanedData", ",", " ", 
    RowBox[{"{", 
     RowBox[{"All", ",", " ", "1"}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9409534121848087`*^9, 3.940953412842886*^9}, {
  3.940953628716717*^9, 3.9409536380689335`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"67ad1388-6fee-8d48-994d-ac337b779aaa"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{
       "peringati hut ri ke76 kominfo berikan kuota internet gratis 150gb", 
        "HOAX"}, {
       "video jokowi ditengah kerumunan warga tiongkok tanpa memakai masker", 
        "HOAX"}, {
       "bantuan sosial finansial rp 3550000 bagi yang kerja tahun 2000 dan \
2021", "HOAX"}, {"akun instgram laptop bm store", "HOAX"}, {
       "video wejangan bupati situbondo beberapa jam sebelum wafat", 
        "HOAX"}, {
       "cara mendapatkan subsidi listrik pln dengan klik tautan ini", 
        "HOAX"}, {"bahaya vaksin berisiko tinggi", "HOAX"}, {
       "subsidi pulsa 200 ribu dan kuota 95 gb kemendikbud ri", "HOAX"}, {
       "seruan isi penuh tangki bbm karena karyawan pertamina mogok kerja", 
        "HOAX"}, {
       "who penularan corona tak lagi hanya lewat droplet tapi juga udara", 
        "HOAX"}, {
       "hari jadi jne yang ke31 melalui kuisioner anda akan mendapatkan uang \
tunai 2 juta rupiah", "HOAX"}, {
       "minyak masak jenama asri milik syarikat leong hup penternak babi \
terbesar di melaka", "HOAX"}, {
       "uang redenominasi pecahan rp 100 bergambar jokowi", "HOAX"}, {
       "mui pusat himbau kiyai dan ustadz agar tolak rapid test karena itu \
modus operandi pki", "HOAX"}, {
       "hurry up and get free shoes from adidas", "HOAX"}, {
       "benda bermagnet bisa menempel di lengan penerima vaksin corona", 
        "HOAX"}, {
       "info kepada rekanrekan di rshs bandung udah ada pasien suspect virus \
corona rujukan dari rs cahya kawaluyaan", "HOAX"}, {
       "info vaksinasi covid19 di pussenif ppi supratman bandung", "HOAX"}, {
       "daftar kartu indonesia pintar sampai dengan tanggal 25 agustus", 
        "HOAX"}, {"air rebusan daun siri dapat sembuhkan katarak", "HOAX"}, {
       "mantan menkes siti fadilah sudah sering kena covid19 sejak dulu", 
        "HOAX"}, {
       "kuota internet 100 gb gratis tanpa isi ulang karena pandemi covid19", 
        "HOAX"}, {"akun whatsapp mengatasnamakan bupati indramayu", "HOAX"}, {
       "info razia masker besarbesaran di jabodetabek libatkan pemda \
kejaksaan dan pm", "HOAX"}, {
       "kementerian kesehatan italia covid19 bukan karena virus melainkan \
bakteri dan diperkuat radiasi 5g mnyebabkan peradangan dan hipoksia", 
        "HOAX"}, {
       "arab saudi tolak jemaah haji indonesia karena belum bayar akomodasi", 
        "HOAX"}, {
       "hatihati beberapa warga kota bandung terpapar covid19 sebagian \
meninggal dunia", "HOAX"}, {
       "pemerintah sadap telepon dan medsos semua warga", "HOAX"}, {
       "broadcast bssn akan rekam telepon dan pantau wa twitter facebook", 
        "HOAX"}, {
       "pesan berantai tentang puncak penyebaran corona", "HOAX"}, {
       "china minta pulau kalimantan sebagai jaminan utang indonesia", 
        "HOAX"}, {
       "arti huruf arab pada buku iqra 1 corona diciptakan pada zaman penuh \
kebohongan", "HOAX"}, {
       "cina telah menyebar penyakit lewat masker baru yang masuk ke \
indonesia", "HOAX"}, {
       "tersebar foto wanita pasien positif covid19 yang disebutkan kabur \
dari rumah sakit di cimahi", "HOAX"}, {
       "video serangan rudal sebelum ledakan di beirut lebanon versi 2", 
        "HOAX"}, {
       "benarkah konsumsi sayur pakis mengakibatkan kanker lambung", 
        "HOAX"}, {"jokowi tak mau disuntik vaksin duluan", "HOAX"}, {
       "kasdim 0817 gresik mayor sugeng riyadi meninggal akibat siangnya \
disuntik vaksin", "HOAX"}, {
       "ide al quran nusantara mulai di realisasikan arti surat almaidah 51 \
berubah dari pemimpin menjadi teman setia", "HOAX"}, {
       "ridwan kamil 30 maret 20 april 2020 area bandung cimahi cibiru \
cileunyi lembang akan lockdown", "HOAX"}, {
       "subsidi kuota internet 75gb", "HOAX"}, {
       "rshs dan beberapa rumah sakit di bandung dipenuhi pasien covid19 dan \
banyak yang meninggal di ugd", "HOAX"}, {
       "hadiah ulang tahun bri ke 130 uang tunai sebesar 2 juta rupiah", 
        "HOAX"}, {
       "video seorang pria pingsan sesudah disuntik vaksin", "HOAX"}, {
       "mata pelajaran pai dan bahasa arab akan dihapus dari kurikulum", 
        "HOAX"}, {
       "minyak masak jenama asri adalah produk syarikat leong hup penternak \
babi terbesar di melaka malaysia", "HOAX"}, {
       "pendaftaran vaksin nusantara", "HOAX"}, {
       "bima arya gelar razia gds siswa yang terjaring diberi sanksi \
menyemprot lingkungan dengan radius 1000 meter", "HOAX"}, {
       "tawaran kuota gratis 50 gb di perayaan ulang tahun whatsapp", 
        "HOAX"}, {
       "himbauan untuk berhenti total selama 3 hari dari tanggal 1012 april \
2020", "HOAX"}, {
       "pemberitahuan kementerian kesehatan virus corona kali ini serius jaga \
tenggorokan tetap lembab minumlah 5080 cc air hangat 3050 cc untuk anakanak", 
        "HOAX"}, {
       "tokopedia gelar promosi data internet 100 gb tanpa isi ulang", 
        "HOAX"}, {
       "video bola mata jenazah diduga pasien covid19 di probolinggo hilang", 
        "HOAX"}, {"foto kartini memakai hijab", "HOAX"}, {
       "rilis namanama dokter yang wafat di hari yang sama karena covid19", 
        "HOAX"}, {"pasien virus corona di apartemen taman anggrek", "HOAX"}, {
       "himbauan dari kbri kl untuk tidak mengkonsumsi makanan produk china", 
        "HOAX"}, {
       "pemerintah akan sediakan laptop gratis untuk siswa dan guru", 
        "HOAX"}, {
       "ultah ke50 kimia farma bagikan uang 2 juta rupiah", "HOAX"}, {
       "hindari penyebaran virus tiongkok minta persetujuan pengadilan untuk \
membunuh lebih dari 20000 pasien coronavirus", "HOAX"}, {
       "alamat pasien positif corona yang meninggal di rshs", "HOAX"}, {
       "penyataan aliansi dokter dunia bahwa covid19 tidak berbahaya", 
        "HOAX"}, {"14 juta warga china ikut tes pns 2021", "HOAX"}, {
       "artikel mengatasnamakan brigjen tni purn dr mardjo subiandono ajak \
warga bangun optimisme hadapi covid 19", "HOAX"}, {
       "sinovac yang akan divaksinkan ke 175 juta rakyat indonesia ternyata \
vaksin berbahaya", "HOAX"}, {
       "biaya tilang terbaru di indonesia kapolri baru mantap", "HOAX"}, {
       "video seorang ibu dan kedua anaknya gantung diri disebabkan lockdown",
         "HOAX"}, {"bantuan sosial finansial bjb rp 5500000", "HOAX"}, {
       "voucher gas gratis senilai 600 ribu untuk isi bahan bakar", "HOAX"}, {
       "pernyataan aliansi dokter lintas negara eropa covid19 tidak \
berbahaya", "HOAX"}, {
       "bahan burger kfc 15 ayam dan sisanya bahan tidak layak konsumsi", 
        "HOAX"}, {
       "daftar kendaraan lelang noneksekusi dari kementrian keuangan republik \
indonesia", "HOAX"}, {
       "penggunaan masker sebabkan manusia keracunan co2", "HOAX"}, {
       "tanggal berakhirnya proyek kopit", "HOAX"}, {
       "akun whatsapp mengatasnamakan wakil ketua dprd kota cirebon", 
        "HOAX"}, {
       "yang sudah divaksin siapsiap mati dini dalam jangka waktu 2 tahun", 
        "HOAX"}, {
       "ajid terobos bangunan sd yang ambruk demi selamatkan foto jihyo", 
        "HOAX"}, {
       "utusan ridwan kamil akan melakukan lockdown di kota bandung", 
        "HOAX"}, {
       "link subsidi dari pertamina via sms rp 189 juta", "HOAX"}, {
       "alfamart tawarkan voucher rp 800000 untuk semua orang", "HOAX"}, {
       "lowongan kerja diskominfo jabar", "BENAR"}, {
       "penting kemenkes ri siagakan 19 daerah waspada virus corona", 
        "BENAR"}, {"galang dana untuk palestina", "BENAR"}, {
       "jokowi legalkan miras hingga kelas eceran ketum muhammadiyah bangsa \
kita sudah kehilangan arah", "BENAR"}, {
       "gelar icf championship 2021 jalan menuju kota garut pada 26 oktober \
2021 ditutup", "BENAR"}, {
       "27 tenaga medis di 7 puskesmas di kota bandung terpapar virus corona",
         "BENAR"}, {
       "700 lebih jenazah dimakamakan secara covid19 ternyata hasil swab \
negatif", "BENAR"}, {
       "pencetakan kartu vaksin memungkinkan melanggar hak konsumen", 
        "BENAR"}, {
       "rute patroli skala besar polda jabar tanggal 1012 april 2020", 
        "BENAR"}, {
       "guru di sukabumi jadi sasaran kemarahan perangkat desa gegara posting \
jalan rusak", "BENAR"}, {
       "puluhan warga china tiba di bandara soetta selasa 45 sore langsung \
dijemput bus", "BENAR"}, {
       "pinggir tol cipularang km 118 kembali longsor", "BENAR"}, {
       "minimarket di antapani bandung ditutup karena karyawannya positif \
covid19", "BENAR"}, {"kuota belajar telkomsel 10gb harga rp10", "BENAR"}, {
       "mulai 27 juli 2020 bagi yang tidak bermasker di tempat umum di jawa \
barat kena denda 100150ribu", "BENAR"}, {
       "media australia menyebut hrs mantan buronan pornografi balik ke \
indonesia untuk luncurkan revolusi moral", "BENAR"}, {
       "kecamatan cimaung kabupaten bandung zona merah covid19 wisata gunung \
puntang ditutup sementara", "BENAR"}, {
       "kominfo luncurkan aplikasi peduli lindungi", "BENAR"}, {
       "pesan berantai razia penggunaan masker di kabupaten bandung", 
        "BENAR"}, {
       "lebih dari 40 orang asn setda jabar terindikasi positif covid19 \
gedung sate ditutup sementara", "BENAR"}, {
       "rs hasan sadikin bandung isolasi pasien terduga virus corona", 
        "BENAR"}, {"ri impor cabe 27 ribu ton cabe", "BENAR"}, {
       "event lazada share pocket dapatkan credit belanja sebesar rp150000", 
        "BENAR"}, {
       "99 personel tni pudikom cimahi positif corona", "BENAR"}, {
       "khawatir bangkitkan paham komunis mui keluarkan maklumat tolak ruu \
hip", "BENAR"}, {
       "corona melanda beberapa dispenda kotakabupaten berikan insentif \
tagihan pbb", "BENAR"}, {
       "virus baru yaitu virus hanta muncul di china", "BENAR"}, {
       "waspada potensi gempa akibat sesar lembang bandung bmkg tekankan \
pentingnya mitigasi", "BENAR"}, {
       "ridwan kamil sebut sekolah di jabar akan dibuka pada januari 2021", 
        "BENAR"}, {
       "ratusan siswa secapa ad bandung terpapar covid19", "BENAR"}, {
       "4 pedagang positif corona 3 pasar di kota bandung ditutup", 
        "BENAR"}, {
       "ade armando dalam alquran tak ada perintah sholat 5 waktu", 
        "BENAR"}, {"dua orang positif virus corona di indonesia", "BENAR"}, {
       "antiseptic povidone atau betadine terbukti efektif membunuh 9999 \
virus covid19 dalam 30 detik", "BENAR"}, {
       "bantuan beasiswa anak pedagang kecil terdampak ppkm darurat", 
        "BENAR"}, {
       "industri arak hingga tuak disahkan gubernur bali terima kasih kepada \
presiden jokowi", "BENAR"}, {
       "surat klarifikasi kuota haji indonesia dari kedutaan arab saudi", 
        "BENAR"}, {
       "ratusan wn india masuk indonesia ke indonesia di saat covid19 meroket \
di india", "BENAR"}, {
       "ditolak di berbagai negara ratusan turis china disambut di inonesia", 
        "BENAR"}, {
       "di hari kemerdekaan ri ke75 tahun bi dan kemenkeu terbitkan uang baru \
pecahan 75000", "BENAR"}, {
       "kandung bakteri berbahaya kementarian pertanian musnahkan jamur \
enoki", "BENAR"}, {
       "guru sukabumi lumpuh usai vaksin covid19 dosis 2", "BENAR"}, {
       "ratusan siswa secapa ad bandung positif covid19", "BENAR"}, {
       "perubahan hari libur nasional dan cuti bersama tahun 2021", 
        "BENAR"}, {
       "di tengah pandemi covid19 pelaku umkm di kota bandung akan terima \
bantuan modal usaha", "BENAR"}, {
       "cara cek calon penerima vaksin covid19 gratis melalui website \
pedulilindungiid", "BENAR"}, {
       "psbb jawa barat di perpanjang sampai 12 juni 2020", "BENAR"}, {
       "mual hingga bengkak wartawan jawa pos tv dilarikan ke igd pasca \
divaksin sinovac", "BENAR"}, {
       "video berita dari cnn indonesia potensi bahaya vaksin covid 19", 
        "BENAR"}, {
       "simpan nomer wa 62 8999900411 untuk mempermudah mencari kalimat dalam \
kitab al quran", "BENAR"}, {
       "surat edaran dirjen pelayanan kesehatan tentang pemanfaatan obat \
tradisional untuk pemeliharaan kesehatan", "BENAR"}, {
       "corona virus tertulis di buku pelajaran ipa tahun 2017", "BENAR"}, {
       "terapkan psbb proporsional beberapa ruas jalan di kota bandung \
kembali ditutup", "BENAR"}, {
       "pengumuman pemberhentian sementara operasional bus kota damri \
bandung", "BENAR"}, {
       "jadwal pelaksanaan vakisnasi covid19 di kota bandung", "BENAR"}, {
       "jokowi buka pintu izin investasi untuk industri miras besar sampai \
eceran", "BENAR"}, {
       "pemberitahuan penipuan pesan singkat berisi format isian keluhan dari \
masyarakat setelah divaksin", "BENAR"}, {
       "dapatkan uang 200 ribu dan bonus tambahan dengan bergabung di \
buzzbreak", "BENAR"}, {
       "tolong sebarkan buat bantu pedagang kecil", "BENAR"}, {
       "cegah kebocoran data 2453 produk dan jasa cetak kartu vaksin \
diblokir", "BENAR"}, {
       "china berhasil ciptakan vaksin covid19 dan siap di produksi massal", 
        "BENAR"}, {
       "pemerintah memperpanjang status darurat bencana covid19 hingga 29 \
mei", "BENAR"}, {"vaksinasi milenial jabar", "BENAR"}, {
       "viral bayi usia 2 bulan di sukabumi meninggal diduga karena \
imunisasi", "BENAR"}, {
       "ridwan kamil izinkan pengurus masjid laksanakan solat jumat dan idul \
fitri", "BENAR"}, {
       "arief puyono usulkan judi kasino dan togel di legalkan", "BENAR"}, {
       "video pasien covid kehabisan ruangan di rs bekasi dan terlantar di \
parkiran", "BENAR"}, {
       "program kartu prakerja dari disnakertrans jabar", "BENAR"}, {
       "terungkap 238 wni dari wuhan tak di tes virus corona alatnya mahal", 
        "BENAR"}, {
       "dr siti fadilah mantan menkes dan nidom gagalkah herd imunity", 
        "BENAR"}, {
       "perpres kartu kerja di revisi peserta wajib kembalikan uang bantuan", 
        "BENAR"}, {
       "bogor saat ini jadi lautan merah membara penyebaran virusnya banyak \
sekali", "BENAR"}, {
       "surat edaran dewan masjid indonesia tentang sholat jumat dua \
gelombang ganjil genap", "BENAR"}, {
       "pengungkapan penjualan daging babi di kabupaten bandung", "BENAR"}, {
       "potensi tsunami 20 mter diprediksi akan terjadi di pantai selatan \
jawa barat dan timur", "BENAR"}, {
       "ridwan kamil daftarkan diri sebagai relawan uji klinis vaksin virs \
corona dari china", "BENAR"}, {
       "ade armando saya beragama islam tapi tidak percaya syariat islam \
harus dijalankan", "BENAR"}, {
       "tilang elektronik berlaku mulai maret 2021", "BENAR"}, {
       "bejat guru ngaji di depok cabuli 10 anak muridnya", "BENAR"}, {
       "kisah abk indonesia di kapal china yang di perlakukan tidak manusiawi \
hingga meninggal mayatnya di buang ke laut", "BENAR"}}, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`AtomShape[52.5]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["BENAR", "HOAX"]]}], 160], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`AtomShape[52.5]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["BENAR", "HOAX"]]}], 160], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     160, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
              "peringati hut ri ke76 kominfo berikan kuota internet gratis \
150gb", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "video jokowi ditengah kerumunan warga tiongkok tanpa memakai \
masker", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "bantuan sosial finansial rp 3550000 bagi yang kerja tahun 2000 \
dan 2021", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["akun instgram laptop bm store", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "video wejangan bupati situbondo beberapa jam sebelum wafat", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "cara mendapatkan subsidi listrik pln dengan klik tautan ini", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["bahaya vaksin berisiko tinggi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "subsidi pulsa 200 ribu dan kuota 95 gb kemendikbud ri", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "seruan isi penuh tangki bbm karena karyawan pertamina mogok \
kerja", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "who penularan corona tak lagi hanya lewat droplet tapi juga \
udara", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "hari jadi jne yang ke31 melalui kuisioner anda akan \
mendapatkan uang tunai 2 juta rupiah", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "minyak masak jenama asri milik syarikat leong hup penternak \
babi terbesar di melaka", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["uang redenominasi pecahan rp 100 bergambar jokowi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "mui pusat himbau kiyai dan ustadz agar tolak rapid test karena \
itu modus operandi pki", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["hurry up and get free shoes from adidas", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "benda bermagnet bisa menempel di lengan penerima vaksin \
corona", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "info kepada rekanrekan di rshs bandung udah ada pasien suspect \
virus corona rujukan dari rs cahya kawaluyaan", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "info vaksinasi covid19 di pussenif ppi supratman bandung", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "daftar kartu indonesia pintar sampai dengan tanggal 25 \
agustus", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["air rebusan daun siri dapat sembuhkan katarak", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 160, 1], {1, 160 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 160, 1], {1, 160 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[160, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[160, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 160, 1], {1, 160 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 160, 1], {1, 160 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       674.0075832366944, {246.55772988281248`, 251.71647011718747`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      674.0075832366944, {246.55772988281248`, 251.71647011718747`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.9409534134903584`*^9, 3.9409534637152367`*^9, {3.9409536300366535`*^9, 
   3.940953639080305*^9}, 3.9409548363687*^9, 3.940955061952862*^9, 
   3.940955233041767*^9, 3.9409560299216175`*^9, 3.9409872431629295`*^9, 
   3.9418657806093674`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"bb4fb0d9-8ece-1045-912c-2885159ae9ee"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tokenization", "Subsection",
 CellChangeTimes->{{3.940978032007391*^9, 
  3.9409780334900055`*^9}},ExpressionUUID->"3056ee3e-250a-0044-8237-\
1cae13b1d96c"],

Cell["Breaking down text into individual words or tokens", "Text",
 CellChangeTimes->{{3.9409780345527763`*^9, 
  3.9409780439066467`*^9}},ExpressionUUID->"7f227819-c8d7-464e-8a6f-\
85bd2ee04dc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Basic", " ", "word", " ", "tokenization"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"tokenizeBasic", "[", "text_String", "]"}], " ", ":=", " ", 
    RowBox[{"DeleteStopwords", "[", 
     RowBox[{"StringSplit", "[", "text", "]"}], "]"}]}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "More", " ", "advanced", " ", "tokenization", " ", "with", " ", 
     "options"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"tokenizeAdvanced", "[", 
     RowBox[{"text_String", ",", " ", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", "\n", "    ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"words", ",", " ", 
        RowBox[{"minLength", " ", "=", " ", 
         RowBox[{"OptionValue", "[", "MinWordLength", "]"}]}]}], "}"}], ",", 
      "\n", "    ", "\n", "    ", 
      RowBox[{"(*", " ", 
       RowBox[{"Split", " ", "into", " ", "words"}], " ", "*)"}], "\n", 
      "    ", 
      RowBox[{
       RowBox[{"words", " ", "=", " ", 
        RowBox[{"StringSplit", "[", "text", "]"}]}], ";", "\n", "    ", "\n", 
       "    ", 
       RowBox[{"(*", " ", 
        RowBox[{"Remove", " ", "stopwords", " ", "if", " ", "specified"}], 
        " ", "*)"}], "\n", "    ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "RemoveStopwords", "]"}], ",", "\n", 
         "        ", 
         RowBox[{"words", " ", "=", " ", 
          RowBox[{"DeleteStopwords", "[", "words", "]"}]}]}], "\n", "    ", 
        "]"}], ";", "\n", "    ", "\n", "    ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Filter", " ", "by", " ", "minimum", " ", "length", " ", "if", " ", 
         "specified"}], " ", "*)"}], "\n", "    ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"minLength", " ", ">", " ", "0"}], ",", "\n", "        ", 
         RowBox[{"words", " ", "=", " ", 
          RowBox[{"Select", "[", 
           RowBox[{"words", ",", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"StringLength", "[", "#", "]"}], " ", ">=", " ", 
              "minLength"}], " ", "&"}]}], "]"}]}]}], "\n", "    ", "]"}], 
       ";", "\n", "    ", "\n", "    ", "words"}]}], "\n", "]"}]}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "default", " ", "options"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "tokenizeAdvanced", "]"}], " ", "=", " ", 
     RowBox[{"{", "\n", "    ", 
      RowBox[{
       RowBox[{"MinWordLength", " ", "->", " ", "0"}], ",", "\n", "    ", 
       RowBox[{"RemoveStopwords", " ", "->", " ", "False"}]}], "\n", "}"}]}], 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Function", " ", "to", " ", "get", " ", "word", " ", "frequencies"}], " ",
     "*)"}], "\n", 
   RowBox[{
    RowBox[{"getWordFrequencies", "[", "words_List", "]"}], " ", ":=", " ", 
    RowBox[{"Counts", "[", "words", "]"}]}]}]}]], "Code",
 CellChangeTimes->{
  3.940954021122013*^9, {3.941868540797428*^9, 3.941868557065487*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"d88c2557-75c6-e74d-a449-122fcb48b8c4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"text", " ", "=", " ", "\"\<this is a sample text\>\""}], 
  ";"}], "\n", 
 RowBox[{"tokens", " ", "=", " ", 
  RowBox[{"tokenizeBasic", "[", "text", "]"}]}]}], "Code",
 CellChangeTimes->{3.9409540572446003`*^9},
 CellLabel->
  "In[108]:=",ExpressionUUID->"fc42097c-0ba0-c049-8ff7-36c17cf79331"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "\"\<this\>\"", ",", " ", "\"\<is\>\"", ",", " ", "\"\<a\>\"", ",", 
   "\"\<sample\>\"", ",", "\"\<text\>\""}], "}"}]], "Input",
 CellChangeTimes->{{3.941868596513405*^9, 3.9418686072224674`*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"34c357ff-4aa7-0441-97f5-8b8b918f6439"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"this\"\>", ",", "\<\"is\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"sample\"\>", ",", "\<\"text\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9418686080834217`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"35a29521-5186-1544-bcec-56c0ef523195"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Assuming", " ", "your", " ", "data", " ", "has", " ", "text", " ", "in", 
    " ", "column", " ", "1", " ", "and", " ", "sentiment", " ", "in", " ", 
    "column", " ", "2"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"tokenizedData", " ", "=", " ", 
     RowBox[{"Table", "[", "\n", "    ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"tokenizeBasic", "[", 
          RowBox[{"cleanedData", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", " ", "1"}], "]"}], "]"}], "]"}], ",", " ", 
         RowBox[{"cleanedData", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", " ", "2"}], "]"}], "]"}]}], "}"}], ",", "\n", 
       "    ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", 
         RowBox[{"Length", "[", "cleanedData", "]"}]}], "}"}]}], "\n", 
      "]"}]}], ";"}], "\n", "\n", 
   RowBox[{
    RowBox[{"tokenizedData", " ", "=", " ", 
     RowBox[{"Dataset", "[", "tokenizedData", "]"}]}], ";"}]}]}]], "Code",
 CellChangeTimes->{
  3.9409540699653187`*^9, {3.9409548699369183`*^9, 3.9409548932334366`*^9}, {
   3.940954923799715*^9, 3.9409549357154274`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"34e70230-a753-0948-bd36-23d507e5c156"]
}, Open  ]],

Cell[CellGroupData[{

Cell["StopWords", "Subsection",
 CellChangeTimes->{{3.9409780491222057`*^9, 
  3.9409780508189373`*^9}},ExpressionUUID->"8ada68e5-a560-a948-b97f-\
ec6c7f958ceb"],

Cell["\<\
Removing common words that don\[CloseCurlyQuote]t carry much meaning (e.g., \
\[OpenCurlyDoubleQuote]the,\[CloseCurlyDoubleQuote] \
\[OpenCurlyDoubleQuote]and,\[CloseCurlyDoubleQuote] \[OpenCurlyDoubleQuote]of\
\[CloseCurlyDoubleQuote]).\
\>", "Text",
 CellChangeTimes->{{3.9409780739846573`*^9, 
  3.9409780756607285`*^9}},ExpressionUUID->"a68d5fa8-07d1-5841-a6b5-\
f5094239f3d8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "Indonesian", " ", "stopwords"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"indonesianStopwords", " ", "=", " ", 
    RowBox[{"{", "\n", "    ", 
     RowBox[{
     "\"\<yang\>\"", ",", " ", "\"\<di\>\"", ",", " ", "\"\<ke\>\"", ",", 
      " ", "\"\<dari\>\"", ",", " ", "\"\<pada\>\"", ",", " ", 
      "\"\<dalam\>\"", ",", " ", "\"\<untuk\>\"", ",", " ", "\"\<dengan\>\"", 
      ",", " ", "\"\<dan\>\"", ",", " ", "\"\<atau\>\"", ",", "\n", "    ", 
      "\"\<ini\>\"", ",", " ", "\"\<itu\>\"", ",", " ", "\"\<juga\>\"", ",", 
      " ", "\"\<sudah\>\"", ",", " ", "\"\<saya\>\"", ",", " ", "\"\<aku\>\"",
       ",", " ", "\"\<kamu\>\"", ",", " ", "\"\<dia\>\"", ",", " ", 
      "\"\<mereka\>\"", ",", " ", "\"\<kita\>\"", ",", "\n", "    ", 
      "\"\<akan\>\"", ",", " ", "\"\<bisa\>\"", ",", " ", "\"\<ada\>\"", ",", 
      " ", "\"\<tidak\>\"", ",", " ", "\"\<saat\>\"", ",", " ", 
      "\"\<oleh\>\"", ",", " ", "\"\<setelah\>\"", ",", " ", "\"\<para\>\"", 
      ",", " ", "\"\<seperti\>\"", ",", "\n", "    ", "\"\<saya\>\"", ",", 
      " ", "\"\<anda\>\"", ",", " ", "\"\<dia\>\"", ",", " ", 
      "\"\<mereka\>\"", ",", " ", "\"\<kita\>\"", ",", " ", "\"\<kami\>\"", 
      ",", " ", "\"\<nya\>\"", ",", " ", "\"\<lah\>\"", ",", " ", 
      "\"\<pun\>\"", ",", " ", "\"\<kan\>\"", ",", "\n", "    ", "\"\<ku\>\"",
       ",", " ", "\"\<mu\>\"", ",", " ", "\"\<si\>\"", ",", " ", 
      "\"\<sang\>\"", ",", " ", "\"\<kaum\>\"", ",", " ", "\"\<bagi\>\"", ",",
       " ", "\"\<sebuah\>\"", ",", " ", "\"\<seorang\>\"", ",", " ", 
      "\"\<telah\>\"", ",", "\n", "    ", "\"\<tetap\>\"", ",", " ", 
      "\"\<buat\>\"", ",", " ", "\"\<masih\>\"", ",", " ", "\"\<hal\>\"", ",",
       " ", "\"\<ketika\>\"", ",", " ", "\"\<kepada\>\"", ",", " ", 
      "\"\<sebagai\>\"", ",", " ", "\"\<sampai\>\"", ",", "\n", "    ", 
      "\"\<dahulu\>\"", ",", " ", "\"\<sangat\>\"", ",", " ", 
      "\"\<sering\>\"", ",", " ", "\"\<sendiri\>\"", ",", " ", 
      "\"\<sekarang\>\"", ",", " ", "\"\<tapi\>\"", ",", " ", 
      "\"\<tentang\>\"", ",", "\n", "    ", "\"\<selain\>\"", ",", " ", 
      "\"\<tersebut\>\"", ",", " ", "\"\<apabila\>\"", ",", " ", 
      "\"\<bagaimana\>\"", ",", " ", "\"\<menurut\>\"", ",", " ", 
      "\"\<hampir\>\"", ",", " ", "\"\<dimana\>\"", ",", "\n", "    ", 
      "\"\<bagaimana\>\"", ",", " ", "\"\<siapa\>\"", ",", " ", 
      "\"\<mengapa\>\"", ",", " ", "\"\<kapan\>\"", ",", " ", "\"\<yakni\>\"",
       ",", " ", "\"\<dimana\>\"", ",", " ", "\"\<kemana\>\"", ",", "\n", 
      "    ", "\"\<pula\>\"", ",", " ", "\"\<selama\>\"", ",", " ", 
      "\"\<sekitar\>\"", ",", " ", "\"\<yaitu\>\"", ",", " ", "\"\<namun\>\"",
       ",", " ", "\"\<karena\>\"", ",", " ", "\"\<jika\>\"", ",", " ", 
      "\"\<bila\>\"", ",", "\n", "    ", "\"\<kalau\>\"", ",", " ", 
      "\"\<oleh\>\"", ",", " ", "\"\<sejak\>\"", ",", " ", "\"\<ialah\>\"", 
      ",", " ", "\"\<bahwa\>\"", ",", " ", "\"\<hanya\>\"", ",", " ", 
      "\"\<lain\>\"", ",", " ", "\"\<sambil\>\"", ",", "\n", "    ", 
      "\"\<setelah\>\"", ",", " ", "\"\<sebab\>\"", ",", " ", "\"\<maka\>\"", 
      ",", " ", "\"\<selagi\>\"", ",", " ", "\"\<sementara\>\"", ",", " ", 
      "\"\<sebelum\>\"", ",", " ", "\"\<supaya\>\"", ",", "\n", "    ", 
      "\"\<semua\>\"", ",", " ", "\"\<setiap\>\"", ",", " ", 
      "\"\<beberapa\>\"", ",", " ", "\"\<banyak\>\"", ",", " ", 
      "\"\<sebagian\>\"", ",", " ", "\"\<lalu\>\"", ",", " ", 
      "\"\<melalui\>\"", ",", "\n", "    ", "\"\<dimana\>\"", ",", " ", 
      "\"\<diantara\>\"", ",", " ", "\"\<keduanya\>\"", ",", " ", 
      "\"\<semenjak\>\"", ",", " ", "\"\<sedangkan\>\"", ",", " ", 
      "\"\<sebegitu\>\"", ",", "\n", "    ", "\"\<seadanya\>\"", ",", " ", 
      "\"\<sebetulnya\>\"", ",", " ", "\"\<sesungguhnya\>\"", ",", " ", 
      "\"\<sepertinya\>\""}], "\n", "}"}]}], ";"}]}]], "Code",
 CellChangeTimes->{3.94095424122126*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"d71230cc-e3cb-a649-b1ca-6c1cd02f1d41"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Function", " ", "to", " ", "tokenize", " ", "and", " ", "remove", " ", 
    "Indonesian", " ", "stopwords"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"tokenizeIndonesian", "[", 
     RowBox[{"text_String", ",", " ", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", "\n", "    ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"words", ",", " ", 
        RowBox[{"minLength", " ", "=", " ", 
         RowBox[{"OptionValue", "[", "MinWordLength", "]"}]}]}], "}"}], ",", 
      "\n", "    ", "\n", "    ", 
      RowBox[{"(*", " ", 
       RowBox[{"Split", " ", "into", " ", "words"}], " ", "*)"}], "\n", 
      "    ", 
      RowBox[{
       RowBox[{"words", " ", "=", " ", 
        RowBox[{"StringSplit", "[", 
         RowBox[{"ToLowerCase", "[", "text", "]"}], "]"}]}], ";", "\n", 
       "    ", "\n", "    ", 
       RowBox[{"(*", " ", 
        RowBox[{"Remove", " ", "stopwords", " ", "if", " ", "specified"}], 
        " ", "*)"}], "\n", "    ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "RemoveStopwords", "]"}], ",", "\n", 
         "        ", 
         RowBox[{"words", " ", "=", " ", 
          RowBox[{"Complement", "[", 
           RowBox[{"words", ",", " ", "indonesianStopwords"}], "]"}]}]}], 
        "\n", "    ", "]"}], ";", "\n", "    ", "\n", "    ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Filter", " ", "by", " ", "minimum", " ", "length", " ", "if", " ", 
         "specified"}], " ", "*)"}], "\n", "    ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"minLength", " ", ">", " ", "0"}], ",", "\n", "        ", 
         RowBox[{"words", " ", "=", " ", 
          RowBox[{"Select", "[", 
           RowBox[{"words", ",", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"StringLength", "[", "#", "]"}], " ", ">=", " ", 
              "minLength"}], " ", "&"}]}], "]"}]}]}], "\n", "    ", "]"}], 
       ";", "\n", "    ", "\n", "    ", "words"}]}], "\n", "]"}]}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Set", " ", "default", " ", "options"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "tokenizeIndonesian", "]"}], " ", "=", " ", 
     RowBox[{"{", "\n", "    ", 
      RowBox[{
       RowBox[{"MinWordLength", " ", "->", " ", "0"}], ",", "\n", "    ", 
       RowBox[{"RemoveStopwords", " ", "->", " ", "True"}]}], "\n", "}"}]}], 
    ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Function", " ", "to", " ", "get", " ", "word", " ", "frequencies", " ", 
     "with", " ", "percentage"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"getWordFrequenciesWithPercentage", "[", "words_List", "]"}], " ",
     ":=", " ", 
    RowBox[{"Module", "[", "\n", "    ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"counts", ",", " ", "total"}], "}"}], ",", "\n", "    ", 
      RowBox[{
       RowBox[{"counts", " ", "=", " ", 
        RowBox[{"Counts", "[", "words", "]"}]}], ";", "\n", "    ", 
       RowBox[{"total", " ", "=", " ", 
        RowBox[{"Total", "[", "counts", "]"}]}], ";", "\n", "    ", 
       RowBox[{"AssociationMap", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", " ", 
            RowBox[{"N", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "/", "total"}], " ", "*", " ", "100"}], ",", " ", 
              "3"}], "]"}]}], "}"}], " ", "&"}], ",", " ", "counts"}], 
        "]"}]}]}], "\n", "]"}]}]}]}]], "Code",
 CellChangeTimes->{
  3.9409542545038967`*^9, {3.9409780901194134`*^9, 3.9409780909184437`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"2bf1f31f-68fe-a849-abc3-27332cd5ddd9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "text", " ", "=", " ", 
   "\"\<Saya sedang belajar pemrograman untuk analisis data\>\""}], 
  ";"}], "\n", 
 RowBox[{"tokens", " ", "=", " ", 
  RowBox[{"tokenizeIndonesian", "[", "text", "]"}]}]}], "Code",
 CellChangeTimes->{3.9409542959972553`*^9},
 CellLabel->"In[39]:=",ExpressionUUID->"1ccb2020-f61f-6a43-a06f-e04a8daac492"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"analisis\"\>", ",", "\<\"belajar\"\>", ",", "\<\"data\"\>", 
   ",", "\<\"pemrograman\"\>", ",", "\<\"sedang\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9409542964047737`*^9, 3.940954941969452*^9, 
  3.9409552438954144`*^9, 3.9409560302235336`*^9, 3.9409872435611343`*^9, 
  3.9418657971969223`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"737e031b-0b77-e74a-8e1c-819ed780e897"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Apply", " ", "to", " ", "your", " ", "dataset"}], " ", "*)"}], 
  "\n", 
  RowBox[{
   RowBox[{"tokenizedData", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"tokenizeIndonesian", "[", 
       RowBox[{"#", ",", " ", 
        RowBox[{"MinWordLength", " ", "->", " ", "3"}]}], "]"}], " ", "&"}], 
     " ", "/@", " ", 
     RowBox[{"cleanedData", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}]}], ";"}]}]], "Code",
 CellChangeTimes->{{3.940954314231474*^9, 3.9409543219047585`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"d34603be-2fb0-4040-97d3-aac36c403ae3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tokenizedData", " ", "=", " ", 
    RowBox[{"Table", "[", "\n", "    ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"tokenizeIndonesian", "[", 
         RowBox[{
          RowBox[{"cleanedData", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
          RowBox[{"MinWordLength", " ", "->", " ", "3"}]}], "]"}], ",", " ", 
        RowBox[{"cleanedData", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", " ", "2"}], "]"}], "]"}]}], "}"}], ",", "\n", 
      "    ", 
      RowBox[{"{", 
       RowBox[{"i", ",", " ", 
        RowBox[{"Length", "[", "cleanedData", "]"}]}], "}"}]}], "\n", "]"}]}],
    ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"tokenizedData", " ", "=", " ", 
   RowBox[{"Dataset", "[", "tokenizedData", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.9409549502066727`*^9, 3.9409549735365143`*^9}, {
  3.940955086147791*^9, 3.940955103785036*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"1f7aa3e7-5f24-c446-a7d3-d9d77de90e70"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"allTokens", " ", "=", " ", 
   RowBox[{"Flatten", "[", "tokenizedData", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"wordFreqs", " ", "=", " ", 
   RowBox[{"getWordFrequenciesWithPercentage", "[", "allTokens", "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{3.9409543521133823`*^9},
 CellLabel->"In[44]:=",ExpressionUUID->"69e11547-33bb-a949-8a14-55d9236700ff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Visualize", " ", "results"}], " ", "*)"}], "\n", 
  RowBox[{"BarChart", "[", "\n", "    ", 
   RowBox[{
    RowBox[{"Values", "[", 
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"Sort", "[", 
        RowBox[{
         RowBox[{"Counts", "[", "allTokens", "]"}], ",", " ", "Greater"}], 
        "]"}], ",", " ", "20"}], "]"}], "]"}], ",", "\n", "    ", 
    RowBox[{"ChartLabels", " ", "->", " ", 
     RowBox[{"{", 
      RowBox[{"Keys", "[", 
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{
           RowBox[{"Counts", "[", "allTokens", "]"}], ",", " ", "Greater"}], 
          "]"}], ",", " ", "20"}], "]"}], "]"}], "}"}]}], ",", "\n", "    ", 
    RowBox[{"RotateLabel", " ", "->", " ", "True"}], ",", "\n", "    ", 
    RowBox[{"ChartStyle", " ", "->", " ", "\"\<Pastel\>\""}], ",", "\n", 
    "    ", 
    RowBox[{
    "PlotLabel", " ", "->", " ", "\"\<Top 20 Most Frequent Words\>\""}]}], 
   "\n", "]"}]}]], "Code",
 CellChangeTimes->{3.940954366662035*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"0717218f-a429-f34b-b7bc-848468eb4223"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.19588550983899827`, 0.}, {20.407802394385577`, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.5599999999999999], Thickness[Small]}], 
     {RGBColor[0.761959, 0.470832, 0.940597], EdgeForm[{Opacity[
      0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{0.5921976056144214, 0.}, {1.4078023943855786, 80.},
          RoundingRadius->0],
         StatusArea[#, 80]& ,
         TagBoxNote->"80"],
        StyleBox["80", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[80, {}], "Tooltip"]& ]}, 
     {RGBColor[0.7895956315789474, 0.5372870526315789, 0.9479334210526316], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{1.5921976056144214, 0.}, {2.4078023943855786, 80.},
          RoundingRadius->0],
         StatusArea[#, 80]& ,
         TagBoxNote->"80"],
        StyleBox["80", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[80, {}], "Tooltip"]& ]}, 
     {RGBColor[0.8186664210526317, 0.595413947368421, 0.9246152105263158], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{2.5921976056144214, 0.}, {3.4078023943855786, 25.},
          RoundingRadius->0],
         StatusArea[#, 25]& ,
         TagBoxNote->"25"],
        StyleBox["25", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[25, {}], "Tooltip"]& ]}, 
     {RGBColor[0.8515616315789474, 0.6313324210526315, 0.8195513157894737], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{3.5921976056144214, 0.}, {4.407802394385579, 20.},
          RoundingRadius->0],
         StatusArea[#, 20]& ,
         TagBoxNote->"20"],
        StyleBox["20", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[20, {}], "Tooltip"]& ]}, 
     {RGBColor[0.8800638947368421, 0.6639928947368421, 0.7325328947368421], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{4.592197605614421, 0.}, {5.407802394385579, 18.},
          RoundingRadius->0],
         StatusArea[#, 18]& ,
         TagBoxNote->"18"],
        StyleBox["18", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[18, {}], "Tooltip"]& ]}, 
     {RGBColor[0.9049053684210526, 0.6939383684210526, 0.6605523684210526], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{5.592197605614421, 0.}, {6.407802394385579, 14.},
          RoundingRadius->0],
         StatusArea[#, 14]& ,
         TagBoxNote->"14"],
        StyleBox["14", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[14, {}], "Tooltip"]& ]}, 
     {RGBColor[0.9225141578947368, 0.7302212631578947, 0.6244960526315789], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{6.592197605614421, 0.}, {7.407802394385579, 14.},
          RoundingRadius->0],
         StatusArea[#, 14]& ,
         TagBoxNote->"14"],
        StyleBox["14", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[14, {}], "Tooltip"]& ]}, 
     {RGBColor[0.937986947368421, 0.7685785263157895, 0.5983557368421053], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{7.592197605614421, 0.}, {8.407802394385579, 13.},
          RoundingRadius->0],
         StatusArea[#, 13]& ,
         TagBoxNote->"13"],
        StyleBox["13", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[13, {}], "Tooltip"]& ]}, 
     {RGBColor[0.9481723684210527, 0.8135963157894737, 0.5915438421052631], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{8.592197605614421, 0.}, {9.407802394385579, 10.},
          RoundingRadius->0],
         StatusArea[#, 10]& ,
         TagBoxNote->"10"],
        StyleBox["10", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[10, {}], "Tooltip"]& ]}, 
     {RGBColor[0.956242, 0.8572503157894736, 0.5886633157894736], EdgeForm[{
      Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{9.592197605614421, 0.}, {10.407802394385579, 9.},
          RoundingRadius->0],
         StatusArea[#, 9]& ,
         TagBoxNote->"9"],
        StyleBox["9", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[9, {}], "Tooltip"]& ]}, 
     {RGBColor[0.9606089999999999, 0.8985176842105264, 0.5926626842105264], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{10.592197605614421, 0.}, {11.407802394385579, 9.},
          RoundingRadius->0],
         StatusArea[#, 9]& ,
         TagBoxNote->"9"],
        StyleBox["9", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[9, {}], "Tooltip"]& ]}, 
     {RGBColor[0.9570324736842105, 0.9281779473684211, 0.6088431578947369], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{11.592197605614421, 0.}, {12.407802394385579, 8.},
          RoundingRadius->0],
         StatusArea[#, 8]& ,
         TagBoxNote->"8"],
        StyleBox["8", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[8, {}], "Tooltip"]& ]}, 
     {RGBColor[0.9489167894736842, 0.9512055789473685, 0.6319842631578947], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{12.592197605614421, 0.}, {13.407802394385579, 8.},
          RoundingRadius->0],
         StatusArea[#, 8]& ,
         TagBoxNote->"8"],
        StyleBox["8", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[8, {}], "Tooltip"]& ]}, 
     {RGBColor[0.9181521578947368, 0.9486268947368421, 0.6826048421052632], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{13.592197605614421, 0.}, {14.407802394385579, 7.},
          RoundingRadius->0],
         StatusArea[#, 7]& ,
         TagBoxNote->"7"],
        StyleBox["7", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[7, {}], "Tooltip"]& ]}, 
     {RGBColor[0.8785102105263158, 0.9384262105263158, 0.7399516842105263], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{14.592197605614421, 0.}, {15.407802394385579, 7.},
          RoundingRadius->0],
         StatusArea[#, 7]& ,
         TagBoxNote->"7"],
        StyleBox["7", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[7, {}], "Tooltip"]& ]}, 
     {RGBColor[0.8091123684210526, 0.9054493684210526, 0.815200947368421], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{15.592197605614421, 0.}, {16.407802394385577, 7.},
          RoundingRadius->0],
         StatusArea[#, 7]& ,
         TagBoxNote->"7"],
        StyleBox["7", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[7, {}], "Tooltip"]& ]}, 
     {RGBColor[0.7247476842105264, 0.8648064736842105, 0.8823652105263158], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{16.59219760561442, 0.}, {17.407802394385577, 6.},
          RoundingRadius->0],
         StatusArea[#, 6]& ,
         TagBoxNote->"6"],
        StyleBox["6", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6, {}], "Tooltip"]& ]}, 
     {RGBColor[0.6224227894736842, 0.8149643157894737, 0.9398274736842105], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{17.59219760561442, 0.}, {18.407802394385577, 6.},
          RoundingRadius->0],
         StatusArea[#, 6]& ,
         TagBoxNote->"6"],
        StyleBox["6", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6, {}], "Tooltip"]& ]}, 
     {RGBColor[0.5257917894736842, 0.7628034210526317, 0.9435318421052632], 
      EdgeForm[{Opacity[0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{18.59219760561442, 0.}, {19.407802394385577, 6.},
          RoundingRadius->0],
         StatusArea[#, 6]& ,
         TagBoxNote->"6"],
        StyleBox["6", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6, {}], "Tooltip"]& ]}, 
     {RGBColor[0.431296, 0.709773, 0.927077], EdgeForm[{Opacity[
      0.5599999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[RectangleBox[{19.59219760561442, 0.}, {20.407802394385577, 6.},
          RoundingRadius->0],
         StatusArea[#, 6]& ,
         TagBoxNote->"6"],
        StyleBox["6", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[6, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0.19588550983899827`, 0.}, {20.812040732076508`, 0.}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.5921976056144214, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.5921976056144214, 0.}]}],
          LineBox[{{20.407802394385577`, 0.}, 
           Offset[{-1.102182119232618*^-15, -6.}, {20.407802394385577`, 
            0.}]}], {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {
           LineBox[{{1.4078023943855786`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.4078023943855786`, 
              0.}]}], LineBox[{{1.5921976056144214`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.5921976056144214`, 
              0.}]}], LineBox[{{2.4078023943855786`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {2.4078023943855786`, 
              0.}]}], LineBox[{{2.5921976056144214`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {2.5921976056144214`, 
              0.}]}], LineBox[{{3.4078023943855786`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {3.4078023943855786`, 
              0.}]}], LineBox[{{3.5921976056144214`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {3.5921976056144214`, 
              0.}]}], LineBox[{{4.407802394385579, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {4.407802394385579, 
              0.}]}], LineBox[{{4.592197605614421, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {4.592197605614421, 
              0.}]}], LineBox[{{5.407802394385579, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {5.407802394385579, 
              0.}]}], LineBox[{{5.592197605614421, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {5.592197605614421, 
              0.}]}], LineBox[{{6.407802394385579, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {6.407802394385579, 
              0.}]}], LineBox[{{6.592197605614421, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {6.592197605614421, 
              0.}]}], LineBox[{{7.407802394385579, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {7.407802394385579, 
              0.}]}], LineBox[{{7.592197605614421, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {7.592197605614421, 
              0.}]}], LineBox[{{8.407802394385579, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {8.407802394385579, 
              0.}]}], LineBox[{{8.592197605614421, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {8.592197605614421, 
              0.}]}], LineBox[{{9.407802394385579, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {9.407802394385579, 
              0.}]}], LineBox[{{9.592197605614421, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {9.592197605614421, 
              0.}]}], LineBox[{{10.407802394385579`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {10.407802394385579`, 
              0.}]}], LineBox[{{10.592197605614421`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {10.592197605614421`, 
              0.}]}], LineBox[{{11.407802394385579`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {11.407802394385579`, 
              0.}]}], LineBox[{{11.592197605614421`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {11.592197605614421`, 
              0.}]}], LineBox[{{12.407802394385579`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {12.407802394385579`, 
              0.}]}], LineBox[{{12.592197605614421`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {12.592197605614421`, 
              0.}]}], LineBox[{{13.407802394385579`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {13.407802394385579`, 
              0.}]}], LineBox[{{13.592197605614421`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {13.592197605614421`, 
              0.}]}], LineBox[{{14.407802394385579`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {14.407802394385579`, 
              0.}]}], LineBox[{{14.592197605614421`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {14.592197605614421`, 
              0.}]}], LineBox[{{15.407802394385579`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {15.407802394385579`, 
              0.}]}], LineBox[{{15.592197605614421`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {15.592197605614421`, 
              0.}]}], LineBox[{{16.407802394385577`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {16.407802394385577`, 
              0.}]}], LineBox[{{16.59219760561442, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {16.59219760561442, 
              0.}]}], LineBox[{{17.407802394385577`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {17.407802394385577`, 
              0.}]}], LineBox[{{17.592197605614416`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {17.592197605614416`, 
              0.}]}], LineBox[{{18.407802394385577`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {18.407802394385577`, 
              0.}]}], LineBox[{{18.592197605614416`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {18.592197605614416`, 
              0.}]}], LineBox[{{19.407802394385577`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {19.407802394385577`, 
              0.}]}], LineBox[{{19.592197605614416`, 0.}, 
             Offset[{-7.347880794884119*^-16, -4.}, {19.592197605614416`, 
              0.}]}]}, {}}}, 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           TagBox[
            TagBox[
             
             DynamicModuleBox[{
              TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
              "InitialData" -> {
                "BENAR", "HOAX", "covid19", "bandung", "corona", "indonesia", 
                 "vaksin", "virus", "kota", "china", "pasien", "positif", 
                 "video", "uang", "tahun", "kuota", "ditutup", "jabar", 
                 "meninggal", "juta"}, "AllowEmbedding" -> True, 
               "InitialShape" -> TypeSystem`PackageScope`Limited[
                 TypeSystem`PackageScope`MulticolumnShape[
                 5, 4, 20, 100.80000000000001`], 20, 4, {All}], "InitialType" -> 
               TypeSystem`Vector[
                 TypeSystem`Atom[String], 20], "Meta" -> <||>, "RowTarget" -> 
               20, "ColumnTarget" -> 10, "Shape" -> 
               TypeSystem`PackageScope`Limited[
                 TypeSystem`PackageScope`MulticolumnShape[
                 5, 4, 20, 100.80000000000001`], 20, 4, {All}], "Type" -> 
               TypeSystem`Vector[
                 TypeSystem`Atom[String], 20], "Path" -> {}, 
               "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 4, 
               "DataRowCount" -> 5, "DataColumnCount" -> 4, "SortPaths" -> {},
                "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
               "UpdateType" -> 1|>, 
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
              DynamicModule[{
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                  Style[
                   Grid[{{
                    Item[
                    Pane[
                    Annotation["BENAR", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    GrayLevel[0.7490196078431373], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["HOAX", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["covid19", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["bandung", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}]}, {
                    Item[
                    Pane[
                    Annotation["corona", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    GrayLevel[0.7490196078431373], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["indonesia", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["vaksin", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["virus", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}]}, {
                    Item[
                    Pane[
                    Annotation["kota", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    GrayLevel[0.7490196078431373], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["china", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["pasien", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["positif", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}]}, {
                    Item[
                    Pane[
                    Annotation["video", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    GrayLevel[0.7490196078431373], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["uang", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["tahun", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["kuota", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}]}, {
                    Item[
                    Pane[
                    Annotation["ditutup", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    GrayLevel[0.7490196078431373], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["jabar", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["meninggal", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}], 
                    Item[
                    Pane[
                    Annotation["juta", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20}, 
                    "Item", False], "Mouse"], 
                    ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}, Frame -> {{
                    Directive[
                    Dashing[{0, Small}], 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    GrayLevel[0.7490196078431373]}, Inherited}]}}, 
                    BaseStyle -> {
                    ContextMenu -> 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                    "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
                    Dividers -> All, FrameStyle -> 
                    GrayLevel[0.7490196078431373], Spacings -> {0, 0}, 
                    Alignment -> Left, 
                    BaseStyle -> {
                    FontFamily -> "Source Sans Pro", FontSize -> 14, 
                    FontWeight -> Plain}], LineBreakWithin -> False, 
                   ContextMenu -> {}, NumberMarks -> False, ShowAutoStyles -> 
                   False]], TypeSystem`NestedGrid`PackagePrivate`initialQ = 
                True}, 
               Dynamic[
                TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                   Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                   
                   Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`datasetData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                 TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
                 TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
                   FailureQ[
                   TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                   TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                   TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
                TrackedSymbols :> {
                 TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
               DynamicModuleValues :> {}], 
              TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
               TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                TypeSystem`PackageScope`SubViewPathbar[
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                 TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
               TrackedSymbols :> {
                TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
              TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
               Replace[
                Replace[
                TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
                    Blank[]] -> "", 
                  TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                    Blank[]], 
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                    Blank[]], 
                    Pattern[
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Blank[]]] :> (
                   Increment[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path$; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
                    TypeSystem`NestedGrid`PackagePrivate`pathType$; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
                   TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
                   TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path$, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                  Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
                  Except[
                   Alternatives[
                    Blank[Spacer], ""]]] :> 
                TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
                 TypeSystem`NestedGrid`PackagePrivate`bar]], 
               TrackedSymbols :> {
                TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
              TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
              DynamicWrapperBox[
               DynamicBox[ToBoxes[
                 Dataset`DatasetContent[
                 2, "Path" -> 
                  Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], "Grid" -> 
                  Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
                  Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
                  Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
                  Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
                  "TopBar" -> 
                  Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
                  "BottomBar" -> 
                  Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
                  "OutputID" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
                 StandardForm],
                
                ImageSizeCache->{
                 432.18000000000006`, {57.61079296874999, 62.26020703124999}},
                
                TrackedSymbols:>{
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
               TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
               MouseAnnotation[],
               
               ImageSizeCache->{
                432.18000000000006`, {57.61079296874999, 62.26020703124999}}],
              BaseStyle->{LineBreakWithin -> False},
              DynamicModuleValues:>{},
              
              Initialization:>(
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
               CreateUUID[]),
              
              UnsavedVariables:>{
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
             Deploy,
             DefaultBaseStyle->"Deploy"],
            Dataset`InterpretDataset[1],
            Editable->False,
            SelectWithContents->True,
            Selectable->False], Offset[{0, -2}, {1., 0.}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.19588550983899827`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{668.6666666666663, Automatic},
  PlotLabel->FormBox["\"Top 20 Most Frequent Words\"", TraditionalForm],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{3.940954412192604*^9, 3.940955109645708*^9, 
  3.940955249186022*^9, 3.940956030713352*^9, 3.94098724381262*^9, 
  3.9418658055843086`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"e300ffc8-a326-6747-8c69-2fa71bd9f1f5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Stemming", "Subsection",
 CellChangeTimes->{{3.940978127202215*^9, 
  3.940978135512602*^9}},ExpressionUUID->"450273a6-0687-0242-a23a-\
753197bd9df5"],

Cell["Reducing words to their root form (e.g., \[OpenCurlyDoubleQuote]running\
\[CloseCurlyDoubleQuote] -> \
\[OpenCurlyDoubleQuote]run\[CloseCurlyDoubleQuote])", "Text",
 CellChangeTimes->{
  3.9409781444113197`*^9},ExpressionUUID->"8362eb40-2720-954b-ad65-\
19255d9d5d8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "affixes"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"prefixes", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<be\>\"", ",", " ", "\"\<me\>\"", ",", " ", "\"\<pe\>\"", ",", " ", 
       "\"\<te\>\"", ",", " ", "\"\<di\>\"", ",", " ", "\"\<ke\>\"", ",", 
       " ", "\"\<se\>\""}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"complexPrefixes", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<ber\>\"", ",", " ", "\"\<bel\>\"", ",", " ", "\"\<pel\>\"", ",", 
       " ", "\"\<per\>\"", ",", " ", "\"\<pem\>\"", ",", " ", "\"\<pen\>\"", 
       ",", " ", "\"\<peng\>\"", ",", " ", "\"\<meng\>\"", ",", " ", 
       "\"\<mem\>\"", ",", " ", "\"\<men\>\"", ",", " ", "\"\<ter\>\""}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"suffixes", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<i\>\"", ",", " ", "\"\<an\>\"", ",", " ", "\"\<kan\>\""}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"possessivePronounds", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<ku\>\"", ",", " ", "\"\<mu\>\"", ",", " ", "\"\<nya\>\""}],
       "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"particles", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<lah\>\"", ",", " ", "\"\<kah\>\"", ",", " ", "\"\<tah\>\"", ",", 
       " ", "\"\<pun\>\""}], "}"}]}], ";"}]}]}]], "Code",
 CellChangeTimes->{3.940954455334791*^9},
 CellLabel->"In[47]:=",ExpressionUUID->"343940c9-3673-ab4b-b190-c08e8638423d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Helper", " ", "function", " ", "to", " ", "check", " ", "if", " ", "word",
     " ", "ends", " ", "with", " ", "suffix"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"endsWithAny", "[", 
     RowBox[{"word_", ",", " ", "suffixList_"}], "]"}], " ", ":=", " ", "\n", 
    "    ", 
    RowBox[{"AnyTrue", "[", 
     RowBox[{"suffixList", ",", " ", 
      RowBox[{
       RowBox[{"StringEndsQ", "[", 
        RowBox[{"word", ",", " ", "#"}], "]"}], " ", "&"}]}], "]"}]}], "\n", 
   "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Main", " ", "stemming", " ", "function"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"stemIndonesian", "[", "word_String", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", "\n", "    ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"result", " ", "=", " ", "word"}], ",", " ", 
         RowBox[{"step", " ", "=", " ", "1"}]}], "}"}], ",", "\n", "    ", 
       "\n", "    ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Step", " ", "1"}], ":", " ", 
         RowBox[{"Remove", " ", "particles"}]}], " ", "*)"}], "\n", "    ", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"endsWithAny", "[", 
           RowBox[{"result", ",", " ", "particles"}], "]"}], ",", "\n", 
          "        ", 
          RowBox[{
           RowBox[{"result", " ", "=", " ", 
            RowBox[{"StringDrop", "[", 
             RowBox[{"result", ",", " ", 
              RowBox[{"-", "3"}]}], "]"}]}], ";", "\n", "        ", 
           RowBox[{"step", "++"}], ";"}]}], "\n", "    ", "]"}], ";", "\n", 
        "    ", "\n", "    ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Step", " ", "2"}], ":", " ", 
          RowBox[{"Remove", " ", "possessive", " ", "pronouns"}]}], " ", 
         "*)"}], "\n", "    ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"endsWithAny", "[", 
           RowBox[{"result", ",", " ", "possessivePronounds"}], "]"}], ",", 
          "\n", "        ", 
          RowBox[{
           RowBox[{"result", " ", "=", " ", 
            RowBox[{"StringDrop", "[", 
             RowBox[{"result", ",", " ", 
              RowBox[{"-", "3"}]}], "]"}]}], ";", "\n", "        ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringLength", "[", "result", "]"}], " ", ">=", " ", 
              "3"}], ",", " ", 
             RowBox[{"step", "++"}]}], "]"}], ";"}]}], "\n", "    ", "]"}], 
        ";", "\n", "    ", "\n", "    ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Step", " ", "3"}], ":", " ", 
          RowBox[{"Remove", " ", "derivational", " ", "suffixes"}]}], " ", 
         "*)"}], "\n", "    ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"endsWithAny", "[", 
           RowBox[{"result", ",", " ", "suffixes"}], "]"}], ",", "\n", 
          "        ", 
          RowBox[{
           RowBox[{"Which", "[", "\n", "            ", 
            RowBox[{
             RowBox[{"StringEndsQ", "[", 
              RowBox[{"result", ",", " ", "\"\<kan\>\""}], "]"}], ",", " ", 
             RowBox[{"result", " ", "=", " ", 
              RowBox[{"StringDrop", "[", 
               RowBox[{"result", ",", " ", 
                RowBox[{"-", "3"}]}], "]"}]}], ",", "\n", "            ", 
             RowBox[{"StringEndsQ", "[", 
              RowBox[{"result", ",", " ", "\"\<an\>\""}], "]"}], ",", " ", 
             RowBox[{"result", " ", "=", " ", 
              RowBox[{"StringDrop", "[", 
               RowBox[{"result", ",", " ", 
                RowBox[{"-", "2"}]}], "]"}]}], ",", "\n", "            ", 
             RowBox[{"StringEndsQ", "[", 
              RowBox[{"result", ",", " ", "\"\<i\>\""}], "]"}], ",", " ", 
             RowBox[{"result", " ", "=", " ", 
              RowBox[{"StringDrop", "[", 
               RowBox[{"result", ",", " ", 
                RowBox[{"-", "1"}]}], "]"}]}]}], "\n", "        ", "]"}], ";",
            "\n", "        ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringLength", "[", "result", "]"}], " ", ">=", " ", 
              "3"}], ",", " ", 
             RowBox[{"step", "++"}]}], "]"}], ";"}]}], "\n", "    ", "]"}], 
        ";", "\n", "    ", "\n", "    ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Step", " ", "4"}], ":", " ", 
          RowBox[{"Remove", " ", "derivational", " ", "prefixes"}]}], " ", 
         "*)"}], "\n", "    ", 
        RowBox[{"While", "[", "\n", "        ", 
         RowBox[{
          RowBox[{
           RowBox[{"startsWithAny", "[", 
            RowBox[{"result", ",", " ", "complexPrefixes"}], "]"}], " ", "||",
            " ", 
           RowBox[{"startsWithAny", "[", 
            RowBox[{"result", ",", " ", "prefixes"}], "]"}]}], ",", "\n", 
          "        ", 
          RowBox[{
           RowBox[{"Which", "[", "\n", "            ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Handle", " ", "complex", " ", "prefixes", " ", "first"}], " ", 
             "*)"}], "\n", "            ", 
            RowBox[{
             RowBox[{"startsWithAny", "[", 
              RowBox[{"result", ",", " ", "complexPrefixes"}], "]"}], ",", 
             "\n", "            ", 
             RowBox[{"result", " ", "=", " ", 
              RowBox[{"StringDrop", "[", 
               RowBox[{"result", ",", " ", "3"}], "]"}]}], ",", "\n", 
             "            ", "\n", "            ", 
             RowBox[{"(*", " ", 
              RowBox[{"Handle", " ", "simple", " ", "prefixes"}], " ", "*)"}],
              "\n", "            ", 
             RowBox[{"startsWithAny", "[", 
              RowBox[{"result", ",", " ", "prefixes"}], "]"}], ",", "\n", 
             "            ", 
             RowBox[{"result", " ", "=", " ", 
              RowBox[{"StringDrop", "[", 
               RowBox[{"result", ",", " ", "2"}], "]"}]}]}], "\n", "        ",
             "]"}], ";", "\n", "        ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringLength", "[", "result", "]"}], " ", ">=", " ", 
              "3"}], ",", " ", 
             RowBox[{"step", "++"}]}], "]"}], ";"}]}], "\n", "    ", "]"}], 
        ";", "\n", "    ", "\n", "    ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Return", " ", "stemmed", " ", "word", " ", "if", " ", 
           RowBox[{"it", "'"}], "s", " ", "at", " ", "least", " ", "3", " ", 
           "characters"}], ",", " ", 
          RowBox[{"otherwise", " ", "return", " ", "original"}]}], " ", 
         "*)"}], "\n", "    ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringLength", "[", "result", "]"}], " ", ">=", " ", 
           "3"}], ",", " ", "result", ",", " ", "word"}], "]"}]}]}], "\n", 
      "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Function", " ", "to", " ", "tokenize"}], ",", " ", 
     RowBox[{"remove", " ", "stopwords"}], ",", " ", 
     RowBox[{"and", " ", "stem"}]}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"processIndonesianText", "[", 
      RowBox[{"text_String", ",", " ", 
       RowBox[{"opts", ":", 
        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", "\n", "    ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"words", ",", " ", "cleaned"}], "}"}], ",", "\n", "    ", 
       "\n", "    ", 
       RowBox[{"(*", " ", 
        RowBox[{"Tokenize", " ", "and", " ", "remove", " ", "stopwords"}], 
        " ", "*)"}], "\n", "    ", 
       RowBox[{
        RowBox[{"words", " ", "=", " ", 
         RowBox[{"tokenizeIndonesian", "[", 
          RowBox[{"text", ",", " ", "opts"}], "]"}]}], ";", "\n", "    ", 
        "\n", "    ", 
        RowBox[{"(*", " ", 
         RowBox[{"Apply", " ", "stemming"}], " ", "*)"}], "\n", "    ", 
        RowBox[{"Map", "[", 
         RowBox[{"stemIndonesian", ",", " ", "words"}], "]"}]}]}], "\n", 
      "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"Example", " ", "usage", " ", "for", " ", "a", " ", "dataset"}], 
    " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"processIndonesianDataset", "[", "data_List", "]"}], " ", ":=", 
    " ", 
    RowBox[{"Module", "[", "\n", "    ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"processed", ",", " ", "freqs"}], "}"}], ",", "\n", "    ", 
      "\n", "    ", 
      RowBox[{"(*", " ", 
       RowBox[{"Process", " ", "all", " ", "texts"}], " ", "*)"}], "\n", 
      "    ", 
      RowBox[{
       RowBox[{"processed", " ", "=", " ", 
        RowBox[{"Map", "[", "\n", "        ", 
         RowBox[{
          RowBox[{
           RowBox[{"processIndonesianText", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"MinWordLength", " ", "->", " ", "3"}], ",", " ", 
             RowBox[{"RemoveStopwords", " ", "->", " ", "True"}]}], "]"}], 
           " ", "&"}], ",", "\n", "        ", "data"}], "\n", "    ", "]"}]}],
        ";", "\n", "    ", "\n", "    ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Get", " ", "frequencies", " ", "of", " ", "stemmed", " ", "words"}], 
        " ", "*)"}], "\n", "    ", 
       RowBox[{"freqs", " ", "=", " ", 
        RowBox[{"Counts", "[", 
         RowBox[{"Flatten", "[", "processed", "]"}], "]"}]}], ";", "\n", 
       "    ", "\n", "    ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Return", " ", "both", " ", "processed", " ", "texts", " ", "and", 
         " ", "frequencies"}], " ", "*)"}], "\n", "    ", 
       RowBox[{"<|", "\n", "        ", 
        RowBox[{
         RowBox[{"\"\<processed\>\"", " ", "->", " ", "processed"}], ",", 
         "\n", "        ", 
         RowBox[{"\"\<frequencies\>\"", " ", "->", " ", 
          RowBox[{"Sort", "[", 
           RowBox[{"freqs", ",", " ", "Greater"}], "]"}]}], ",", "\n", 
         "        ", 
         RowBox[{"\"\<uniqueWords\>\"", " ", "->", " ", 
          RowBox[{"Length", "[", "freqs", "]"}]}], ",", "\n", "        ", 
         RowBox[{"\"\<totalWords\>\"", " ", "->", " ", 
          RowBox[{"Total", "[", 
           RowBox[{"Values", "[", "freqs", "]"}], "]"}]}]}], "\n", "    ", 
        "|>"}]}]}], "\n", "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.9409544620939884`*^9, 3.940954478238447*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"ffd02282-10ef-bd4b-8ceb-5888dbed67a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"For", " ", "a", " ", "single", " ", "word"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"stemIndonesian", "[", "\"\<memakan\>\"", "]"}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{"Output", ":", " ", "\"\<makan\>\""}], " ", "*)"}], "\n", 
   RowBox[{"stemIndonesian", "[", "\"\<berjalannya\>\"", "]"}], "  ", 
   RowBox[{"(*", " ", 
    RowBox[{"Output", ":", " ", "\"\<jalan\>\""}], " ", "*)"}]}]}]], "Code",
 CellChangeTimes->{3.9409544917050934`*^9},
 CellLabel->"In[56]:=",ExpressionUUID->"fd33bd2f-6a33-0a4b-84ca-93c9f231e59d"],

Cell[BoxData["\<\"mema\"\>"], "Output",
 CellChangeTimes->{3.9409544922576447`*^9, 3.9409560307549267`*^9, 
  3.940987244000328*^9, 3.9418658140782757`*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"618ef277-42f7-1c44-b51b-1f7251741d6f"],

Cell[BoxData["\<\"berjal\"\>"], "Output",
 CellChangeTimes->{3.9409544922576447`*^9, 3.9409560307549267`*^9, 
  3.940987244000328*^9, 3.941865814083271*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"b4471338-a95a-d84c-bfae-8e63ba008356"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"For", " ", "a", " ", "complete", " ", "text"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{
    "text", " ", "=", " ", 
     "\"\<Saya sedang berjalan-jalan di taman dengan menggunakan sepatu \
barunya\>\""}], ";"}], "\n", 
   RowBox[{"processIndonesianText", "[", "text", "]"}]}]}]], "Code",
 CellChangeTimes->{3.940954523600029*^9},
 CellLabel->"In[58]:=",ExpressionUUID->"c5e3155b-8dce-0c45-8e8a-a1ae1f06965b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"baru\"\>", ",", "\<\"berjalan-jal\"\>", 
   ",", "\<\"mengguna\"\>", ",", "\<\"sedang\"\>", ",", "\<\"sepatu\"\>", 
   ",", "\<\"tam\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.940954524064478*^9, 3.940956030782057*^9, 
  3.9409872440281925`*^9, 3.941865816157236*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"298b0620-18a0-7649-88a3-6a4a541a0c6a"]
}, Open  ]],

Cell["-> I test it, but didn\[CloseCurlyQuote]t work well so I couldn\
\[CloseCurlyQuote]t apply it.", "Abstract",
 CellChangeTimes->{{3.9409781564787483`*^9, 
  3.94097817491226*^9}},ExpressionUUID->"7ef04cfb-bffd-8541-8177-\
52550ed1e55b"],

Cell[CellGroupData[{

Cell[BoxData["tokenizedData"], "Code",
 CellChangeTimes->{{3.940956953098093*^9, 3.9409569546892185`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"c5783fdc-065a-f44c-994d-59359946c12c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{{
        "150gb", "berikan", "gratis", "hut", "internet", "ke76", "kominfo", 
         "kuota", "peringati"}, "HOAX"}, {{
        "ditengah", "jokowi", "kerumunan", "masker", "memakai", "tanpa", 
         "tiongkok", "video", "warga"}, "HOAX"}, {{
        "2000", "2021", "3550000", "bantuan", "finansial", "kerja", "sosial", 
         "tahun"}, "HOAX"}, {{"akun", "instgram", "laptop", "store"}, 
        "HOAX"}, {{
        "bupati", "jam", "situbondo", "video", "wafat", "wejangan"}, 
        "HOAX"}, {{
        "cara", "klik", "listrik", "mendapatkan", "pln", "subsidi", "tautan"},
         "HOAX"}, {{"bahaya", "berisiko", "tinggi", "vaksin"}, "HOAX"}, {{
        "200", "kemendikbud", "kuota", "pulsa", "ribu", "subsidi"}, 
        "HOAX"}, {{
        "bbm", "isi", "karyawan", "kerja", "mogok", "penuh", "pertamina", 
         "seruan", "tangki"}, "HOAX"}, {{
        "corona", "droplet", "lagi", "lewat", "penularan", "tak", "udara", 
         "who"}, "HOAX"}, {{
        "hari", "jadi", "jne", "juta", "ke31", "kuisioner", "mendapatkan", 
         "rupiah", "tunai", "uang"}, "HOAX"}, {{
        "asri", "babi", "hup", "jenama", "leong", "masak", "melaka", "milik", 
         "minyak", "penternak", "syarikat", "terbesar"}, "HOAX"}, {{
        "100", "bergambar", "jokowi", "pecahan", "redenominasi", "uang"}, 
        "HOAX"}, {{
        "agar", "himbau", "kiyai", "modus", "mui", "operandi", "pki", "pusat",
          "rapid", "test", "tolak", "ustadz"}, "HOAX"}, {{
        "adidas", "and", "free", "from", "get", "hurry", "shoes"}, "HOAX"}, {{
        "benda", "bermagnet", "corona", "lengan", "menempel", "penerima", 
         "vaksin"}, "HOAX"}, {{
        "bandung", "cahya", "corona", "info", "kawaluyaan", "pasien", 
         "rekanrekan", "rshs", "rujukan", "suspect", "udah", "virus"}, 
        "HOAX"}, {{
        "bandung", "covid19", "info", "ppi", "pussenif", "supratman", 
         "vaksinasi"}, "HOAX"}, {{
        "agustus", "daftar", "indonesia", "kartu", "pintar", "tanggal"}, 
        "HOAX"}, {{
        "air", "dapat", "daun", "katarak", "rebusan", "sembuhkan", "siri"}, 
        "HOAX"}, {{
        "covid19", "dulu", "fadilah", "kena", "mantan", "menkes", "siti"}, 
        "HOAX"}, {{
        "100", "covid19", "gratis", "internet", "isi", "kuota", "pandemi", 
         "tanpa", "ulang"}, "HOAX"}, {{
        "akun", "bupati", "indramayu", "mengatasnamakan", "whatsapp"}, 
        "HOAX"}, {{
        "besarbesaran", "info", "jabodetabek", "kejaksaan", "libatkan", 
         "masker", "pemda", "razia"}, "HOAX"}, {{
        "bakteri", "bukan", "covid19", "diperkuat", "hipoksia", "italia", 
         "kementerian", "kesehatan", "melainkan", "mnyebabkan", "peradangan", 
         "radiasi", "virus"}, "HOAX"}, {{
        "akomodasi", "arab", "bayar", "belum", "haji", "indonesia", "jemaah", 
         "saudi", "tolak"}, "HOAX"}, {{
        "bandung", "covid19", "dunia", "hatihati", "kota", "meninggal", 
         "terpapar", "warga"}, "HOAX"}, {{
        "medsos", "pemerintah", "sadap", "telepon", "warga"}, "HOAX"}, {{
        "broadcast", "bssn", "facebook", "pantau", "rekam", "telepon", 
         "twitter"}, "HOAX"}, {{
        "berantai", "corona", "penyebaran", "pesan", "puncak"}, "HOAX"}, {{
        "china", "indonesia", "jaminan", "kalimantan", "minta", "pulau", 
         "utang"}, "HOAX"}, {{
        "arab", "arti", "buku", "corona", "diciptakan", "huruf", "iqra", 
         "kebohongan", "penuh", "zaman"}, "HOAX"}, {{
        "baru", "cina", "indonesia", "lewat", "masker", "masuk", "menyebar", 
         "penyakit"}, "HOAX"}, {{
        "cimahi", "covid19", "disebutkan", "foto", "kabur", "pasien", 
         "positif", "rumah", "sakit", "tersebar", "wanita"}, "HOAX"}, {{
        "beirut", "lebanon", "ledakan", "rudal", "serangan", "versi", 
         "video"}, "HOAX"}, {{
        "benarkah", "kanker", "konsumsi", "lambung", "mengakibatkan", "pakis",
          "sayur"}, "HOAX"}, {{
        "disuntik", "duluan", "jokowi", "mau", "tak", "vaksin"}, "HOAX"}, {{
        "0817", "akibat", "disuntik", "gresik", "kasdim", "mayor", 
         "meninggal", "riyadi", "siangnya", "sugeng", "vaksin"}, "HOAX"}, {{
        "almaidah", "arti", "berubah", "ide", "menjadi", "mulai", "nusantara",
          "pemimpin", "quran", "realisasikan", "setia", "surat", "teman"}, 
        "HOAX"}, {{
        "2020", "april", "area", "bandung", "cibiru", "cileunyi", "cimahi", 
         "kamil", "lembang", "lockdown", "maret", "ridwan"}, "HOAX"}, {{
        "75gb", "internet", "kuota", "subsidi"}, "HOAX"}, {{
        "bandung", "covid19", "dipenuhi", "meninggal", "pasien", "rshs", 
         "rumah", "sakit", "ugd"}, "HOAX"}, {{
        "130", "bri", "hadiah", "juta", "rupiah", "sebesar", "tahun", "tunai",
          "uang", "ulang"}, "HOAX"}, {{
        "disuntik", "pingsan", "pria", "sesudah", "vaksin", "video"}, 
        "HOAX"}, {{
        "arab", "bahasa", "dihapus", "kurikulum", "mata", "pai", "pelajaran"},
         "HOAX"}, {{
        "adalah", "asri", "babi", "hup", "jenama", "leong", "malaysia", 
         "masak", "melaka", "minyak", "penternak", "produk", "syarikat", 
         "terbesar"}, "HOAX"}, {{"nusantara", "pendaftaran", "vaksin"}, 
        "HOAX"}, {{
        "1000", "arya", "bima", "diberi", "gds", "gelar", "lingkungan", 
         "menyemprot", "meter", "radius", "razia", "sanksi", "siswa", 
         "terjaring"}, "HOAX"}, {{
        "gratis", "kuota", "perayaan", "tahun", "tawaran", "ulang", 
         "whatsapp"}, "HOAX"}, {{
        "1012", "2020", "april", "berhenti", "hari", "himbauan", "tanggal", 
         "total"}, "HOAX"}, {{
        "3050", "5080", "air", "anakanak", "corona", "hangat", "jaga", "kali",
          "kementerian", "kesehatan", "lembab", "minumlah", "pemberitahuan", 
         "serius", "tenggorokan", "virus"}, "HOAX"}, {{
        "100", "data", "gelar", "internet", "isi", "promosi", "tanpa", 
         "tokopedia", "ulang"}, "HOAX"}, {{
        "bola", "covid19", "diduga", "hilang", "jenazah", "mata", "pasien", 
         "probolinggo", "video"}, "HOAX"}, {{
        "foto", "hijab", "kartini", "memakai"}, "HOAX"}, {{
        "covid19", "dokter", "hari", "namanama", "rilis", "sama", "wafat"}, 
        "HOAX"}, {{
        "anggrek", "apartemen", "corona", "pasien", "taman", "virus"}, 
        "HOAX"}, {{
        "china", "himbauan", "kbri", "makanan", "mengkonsumsi", "produk"}, 
        "HOAX"}, {{
        "gratis", "guru", "laptop", "pemerintah", "sediakan", "siswa"}, 
        "HOAX"}, {{
        "bagikan", "farma", "juta", "ke50", "kimia", "rupiah", "uang", 
         "ultah"}, "HOAX"}, {{
        "20000", "coronavirus", "hindari", "lebih", "membunuh", "minta", 
         "pasien", "pengadilan", "penyebaran", "persetujuan", "tiongkok", 
         "virus"}, "HOAX"}, {{
        "alamat", "corona", "meninggal", "pasien", "positif", "rshs"}, 
        "HOAX"}, {{
        "aliansi", "berbahaya", "covid19", "dokter", "dunia", "penyataan"}, 
        "HOAX"}, {{"2021", "china", "ikut", "juta", "pns", "tes", "warga"}, 
        "HOAX"}, {{
        "ajak", "artikel", "bangun", "brigjen", "covid", "hadapi", "mardjo", 
         "mengatasnamakan", "optimisme", "purn", "subiandono", "tni", 
         "warga"}, "HOAX"}, {{
        "175", "berbahaya", "divaksinkan", "indonesia", "juta", "rakyat", 
         "sinovac", "ternyata", "vaksin"}, "HOAX"}, {{
        "baru", "biaya", "indonesia", "kapolri", "mantap", "terbaru", 
         "tilang"}, "HOAX"}, {{
        "anaknya", "diri", "disebabkan", "gantung", "ibu", "kedua", 
         "lockdown", "video"}, "HOAX"}, {{
        "5500000", "bantuan", "bjb", "finansial", "sosial"}, "HOAX"}, {{
        "600", "bahan", "bakar", "gas", "gratis", "isi", "ribu", "senilai", 
         "voucher"}, "HOAX"}, {{
        "aliansi", "berbahaya", "covid19", "dokter", "eropa", "lintas", 
         "negara", "pernyataan"}, "HOAX"}, {{
        "ayam", "bahan", "burger", "kfc", "konsumsi", "layak", "sisanya"}, 
        "HOAX"}, {{
        "daftar", "indonesia", "kementrian", "kendaraan", "keuangan", 
         "lelang", "noneksekusi", "republik"}, "HOAX"}, {{
        "co2", "keracunan", "manusia", "masker", "penggunaan", "sebabkan"}, 
        "HOAX"}, {{"berakhirnya", "kopit", "proyek", "tanggal"}, "HOAX"}, {{
        "akun", "cirebon", "dprd", "ketua", "kota", "mengatasnamakan", 
         "wakil", "whatsapp"}, "HOAX"}, {{
        "dini", "divaksin", "jangka", "mati", "siapsiap", "tahun", "waktu"}, 
        "HOAX"}, {{
        "ajid", "ambruk", "bangunan", "demi", "foto", "jihyo", "selamatkan", 
         "terobos"}, "HOAX"}, {{
        "bandung", "kamil", "kota", "lockdown", "melakukan", "ridwan", 
         "utusan"}, "HOAX"}, {{
        "189", "juta", "link", "pertamina", "sms", "subsidi", "via"}, 
        "HOAX"}, {{"800000", "alfamart", "orang", "tawarkan", "voucher"}, 
        "HOAX"}, {{"diskominfo", "jabar", "kerja", "lowongan"}, "BENAR"}, {{
        "corona", "daerah", "kemenkes", "penting", "siagakan", "virus", 
         "waspada"}, "BENAR"}, {{"dana", "galang", "palestina"}, "BENAR"}, {{
        "arah", "bangsa", "eceran", "hingga", "jokowi", "kehilangan", "kelas",
          "ketum", "legalkan", "miras", "muhammadiyah"}, "BENAR"}, {{
        "2021", "championship", "ditutup", "garut", "gelar", "icf", "jalan", 
         "kota", "menuju", "oktober"}, "BENAR"}, {{
        "bandung", "corona", "kota", "medis", "puskesmas", "tenaga", 
         "terpapar", "virus"}, "BENAR"}, {{
        "700", "covid19", "dimakamakan", "hasil", "jenazah", "lebih", 
         "negatif", "secara", "swab", "ternyata"}, "BENAR"}, {{
        "hak", "kartu", "konsumen", "melanggar", "memungkinkan", "pencetakan",
          "vaksin"}, "BENAR"}, {{
        "1012", "2020", "april", "besar", "jabar", "patroli", "polda", "rute",
          "skala", "tanggal"}, "BENAR"}, {{
        "desa", "gegara", "guru", "jadi", "jalan", "kemarahan", "perangkat", 
         "posting", "rusak", "sasaran", "sukabumi"}, "BENAR"}, {{
        "bandara", "bus", "china", "dijemput", "langsung", "puluhan", 
         "selasa", "soetta", "sore", "tiba", "warga"}, "BENAR"}, {{
        "118", "cipularang", "kembali", "longsor", "pinggir", "tol"}, 
        "BENAR"}, {{
        "antapani", "bandung", "covid19", "ditutup", "karyawannya", 
         "minimarket", "positif"}, "BENAR"}, {{
        "10gb", "belajar", "harga", "kuota", "rp10", "telkomsel"}, 
        "BENAR"}, {{
        "100150ribu", "2020", "barat", "bermasker", "denda", "jawa", "juli", 
         "kena", "mulai", "tempat", "umum"}, "BENAR"}, {{
        "australia", "balik", "buronan", "hrs", "indonesia", "luncurkan", 
         "mantan", "media", "menyebut", "moral", "pornografi", "revolusi"}, 
        "BENAR"}, {{
        "bandung", "cimaung", "covid19", "ditutup", "gunung", "kabupaten", 
         "kecamatan", "merah", "puntang", "wisata", "zona"}, "BENAR"}, {{
        "aplikasi", "kominfo", "lindungi", "luncurkan", "peduli"}, 
        "BENAR"}, {{
        "bandung", "berantai", "kabupaten", "masker", "penggunaan", "pesan", 
         "razia"}, "BENAR"}, {{
        "asn", "covid19", "ditutup", "gedung", "jabar", "lebih", "orang", 
         "positif", "sate", "setda", "terindikasi"}, "BENAR"}, {{
        "bandung", "corona", "hasan", "isolasi", "pasien", "sadikin", 
         "terduga", "virus"}, "BENAR"}, {{"cabe", "impor", "ribu", "ton"}, 
        "BENAR"}, {{
        "belanja", "credit", "dapatkan", "event", "lazada", "pocket", 
         "rp150000", "sebesar", "share"}, "BENAR"}, {{
        "cimahi", "corona", "personel", "positif", "pudikom", "tni"}, 
        "BENAR"}, {{
        "bangkitkan", "hip", "keluarkan", "khawatir", "komunis", "maklumat", 
         "mui", "paham", "ruu", "tolak"}, "BENAR"}, {{
        "berikan", "corona", "dispenda", "insentif", "kotakabupaten", 
         "melanda", "pbb", "tagihan"}, "BENAR"}, {{
        "baru", "china", "hanta", "muncul", "virus"}, "BENAR"}, {{
        "akibat", "bandung", "bmkg", "gempa", "lembang", "mitigasi", 
         "pentingnya", "potensi", "sesar", "tekankan", "waspada"}, 
        "BENAR"}, {{
        "2021", "dibuka", "jabar", "januari", "kamil", "ridwan", "sebut", 
         "sekolah"}, "BENAR"}, {{
        "bandung", "covid19", "ratusan", "secapa", "siswa", "terpapar"}, 
        "BENAR"}, {{
        "bandung", "corona", "ditutup", "kota", "pasar", "pedagang", 
         "positif"}, "BENAR"}, {{
        "ade", "alquran", "armando", "perintah", "sholat", "tak", "waktu"}, 
        "BENAR"}, {{
        "corona", "dua", "indonesia", "orang", "positif", "virus"}, 
        "BENAR"}, {{
        "9999", "antiseptic", "betadine", "covid19", "detik", "efektif", 
         "membunuh", "povidone", "terbukti", "virus"}, "BENAR"}, {{
        "anak", "bantuan", "beasiswa", "darurat", "kecil", "pedagang", "ppkm",
          "terdampak"}, "BENAR"}, {{
        "arak", "bali", "disahkan", "gubernur", "hingga", "industri", 
         "jokowi", "kasih", "presiden", "terima", "tuak"}, "BENAR"}, {{
        "arab", "haji", "indonesia", "kedutaan", "klarifikasi", "kuota", 
         "saudi", "surat"}, "BENAR"}, {{
        "covid19", "india", "indonesia", "masuk", "meroket", "ratusan"}, 
        "BENAR"}, {{
        "berbagai", "china", "disambut", "ditolak", "inonesia", "negara", 
         "ratusan", "turis"}, "BENAR"}, {{
        "75000", "baru", "hari", "ke75", "kemenkeu", "kemerdekaan", "pecahan",
          "tahun", "terbitkan", "uang"}, "BENAR"}, {{
        "bakteri", "berbahaya", "enoki", "jamur", "kandung", "kementarian", 
         "musnahkan", "pertanian"}, "BENAR"}, {{
        "covid19", "dosis", "guru", "lumpuh", "sukabumi", "usai", "vaksin"}, 
        "BENAR"}, {{
        "bandung", "covid19", "positif", "ratusan", "secapa", "siswa"}, 
        "BENAR"}, {{
        "2021", "bersama", "cuti", "hari", "libur", "nasional", "perubahan", 
         "tahun"}, "BENAR"}, {{
        "bandung", "bantuan", "covid19", "kota", "modal", "pandemi", "pelaku",
          "tengah", "terima", "umkm", "usaha"}, "BENAR"}, {{
        "calon", "cara", "cek", "covid19", "gratis", "pedulilindungiid", 
         "penerima", "vaksin", "website"}, "BENAR"}, {{
        "2020", "barat", "jawa", "juni", "perpanjang", "psbb"}, "BENAR"}, {{
        "bengkak", "dilarikan", "divaksin", "hingga", "igd", "jawa", "mual", 
         "pasca", "pos", "sinovac", "wartawan"}, "BENAR"}, {{
        "bahaya", "berita", "cnn", "covid", "indonesia", "potensi", "vaksin", 
         "video"}, "BENAR"}, {{
        "8999900411", "kalimat", "kitab", "mempermudah", "mencari", "nomer", 
         "quran", "simpan"}, "BENAR"}, {{
        "dirjen", "edaran", "kesehatan", "obat", "pelayanan", "pemanfaatan", 
         "pemeliharaan", "surat", "tradisional"}, "BENAR"}, {{
        "2017", "buku", "corona", "ipa", "pelajaran", "tahun", "tertulis", 
         "virus"}, "BENAR"}, {{
        "bandung", "ditutup", "jalan", "kembali", "kota", "proporsional", 
         "psbb", "ruas", "terapkan"}, "BENAR"}, {{
        "bandung", "bus", "damri", "kota", "operasional", "pemberhentian", 
         "pengumuman"}, "BENAR"}, {{
        "bandung", "covid19", "jadwal", "kota", "pelaksanaan", "vakisnasi"}, 
        "BENAR"}, {{
        "besar", "buka", "eceran", "industri", "investasi", "izin", "jokowi", 
         "miras", "pintu"}, "BENAR"}, {{
        "berisi", "divaksin", "format", "isian", "keluhan", "masyarakat", 
         "pemberitahuan", "penipuan", "pesan", "singkat"}, "BENAR"}, {{
        "200", "bergabung", "bonus", "buzzbreak", "dapatkan", "ribu", 
         "tambahan", "uang"}, "BENAR"}, {{
        "bantu", "kecil", "pedagang", "sebarkan", "tolong"}, "BENAR"}, {{
        "2453", "cegah", "cetak", "data", "diblokir", "jasa", "kartu", 
         "kebocoran", "produk", "vaksin"}, "BENAR"}, {{
        "berhasil", "china", "ciptakan", "covid19", "massal", "produksi", 
         "siap", "vaksin"}, "BENAR"}, {{
        "bencana", "covid19", "darurat", "hingga", "mei", "memperpanjang", 
         "pemerintah", "status"}, "BENAR"}, {{
        "jabar", "milenial", "vaksinasi"}, "BENAR"}, {{
        "bayi", "bulan", "diduga", "imunisasi", "meninggal", "sukabumi", 
         "usia", "viral"}, "BENAR"}, {{
        "fitri", "idul", "izinkan", "jumat", "kamil", "laksanakan", "masjid", 
         "pengurus", "ridwan", "solat"}, "BENAR"}, {{
        "arief", "judi", "kasino", "legalkan", "puyono", "togel", "usulkan"}, 
        "BENAR"}, {{
        "bekasi", "covid", "kehabisan", "parkiran", "pasien", "ruangan", 
         "terlantar", "video"}, "BENAR"}, {{
        "disnakertrans", "jabar", "kartu", "prakerja", "program"}, 
        "BENAR"}, {{
        "238", "alatnya", "corona", "mahal", "tak", "terungkap", "tes", 
         "virus", "wni", "wuhan"}, "BENAR"}, {{
        "fadilah", "gagalkah", "herd", "imunity", "mantan", "menkes", "nidom",
          "siti"}, "BENAR"}, {{
        "bantuan", "kartu", "kembalikan", "kerja", "perpres", "peserta", 
         "revisi", "uang", "wajib"}, "BENAR"}, {{
        "bogor", "jadi", "lautan", "membara", "merah", "penyebaran", "sekali",
          "virusnya"}, "BENAR"}, {{
        "dewan", "dua", "edaran", "ganjil", "gelombang", "genap", "indonesia",
          "jumat", "masjid", "sholat", "surat"}, "BENAR"}, {{
        "babi", "bandung", "daging", "kabupaten", "pengungkapan", 
         "penjualan"}, "BENAR"}, {{
        "barat", "diprediksi", "jawa", "mter", "pantai", "potensi", "selatan",
          "terjadi", "timur", "tsunami"}, "BENAR"}, {{
        "china", "corona", "daftarkan", "diri", "kamil", "klinis", "relawan", 
         "ridwan", "uji", "vaksin", "virs"}, "BENAR"}, {{
        "ade", "armando", "beragama", "dijalankan", "harus", "islam", 
         "percaya", "syariat"}, "BENAR"}, {{
        "2021", "berlaku", "elektronik", "maret", "mulai", "tilang"}, 
        "BENAR"}, {{
        "anak", "bejat", "cabuli", "depok", "guru", "muridnya", "ngaji"}, 
        "BENAR"}, {{
        "abk", "buang", "china", "hingga", "indonesia", "kapal", "kisah", 
         "laut", "manusiawi", "mayatnya", "meninggal", "perlakukan"}, 
        "BENAR"}}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[52.5]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["BENAR", "HOAX"]]}], 160], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[52.5]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["BENAR", "HOAX"]]}], 160], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     160, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{1, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{1, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{1, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{2, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{2, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{2, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"2000", "2021", "3550000", "bantuan", "finansial", 
                    "kerja", "sosial", "tahun"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"2000", "2021", "3550000", "bantuan", "finansial", 
                    "kerja", "sosial", "tahun"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{3, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{3, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{3, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"akun", "instgram", "laptop", "store"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"akun", "instgram", "laptop", "store"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{4, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{4, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{4, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"bupati", "jam", "situbondo", "video", "wafat", 
                    "wejangan"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"bupati", "jam", "situbondo", "video", "wafat", 
                    "wejangan"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{5, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{5, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{5, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"cara", "klik", "listrik", "mendapatkan", "pln", 
                    "subsidi", "tautan"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"cara", "klik", "listrik", "mendapatkan", "pln", 
                    "subsidi", "tautan"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{6, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{6, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{6, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"bahaya", "berisiko", "tinggi", "vaksin"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"bahaya", "berisiko", "tinggi", "vaksin"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{7, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{7, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{7, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"200", "kemendikbud", "kuota", "pulsa", "ribu", 
                    "subsidi"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"200", "kemendikbud", "kuota", "pulsa", "ribu", 
                    "subsidi"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{8, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{8, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{8, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{9, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{9, 1}, "Item", False],
                "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{9, 2}, "Item", False],
                "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"corona", "droplet", "lagi", "lewat", "penularan", 
                    "tak", "udara", "who"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"corona", "droplet", "lagi", "lewat", "penularan", 
                    "tak", "udara", "who"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{10, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{10, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{10, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 10], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 10], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{11, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{11, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{11, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 12], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 12], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{12, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{12, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{12, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"100", "bergambar", "jokowi", "pecahan", 
                    "redenominasi", "uang"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"100", "bergambar", "jokowi", "pecahan", 
                    "redenominasi", "uang"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{13, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{13, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{13, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 12], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 12], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{14, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{14, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{14, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"adidas", "and", "free", "from", "get", "hurry", 
                    "shoes"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"adidas", "and", "free", "from", "get", "hurry", 
                    "shoes"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{15, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{15, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{15, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                   "benda", "bermagnet", "corona", "lengan", "menempel", 
                    "penerima", "vaksin"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"benda", "bermagnet", "corona", "lengan", 
                    "menempel", "penerima", "vaksin"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{16, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{16, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{16, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 12], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 12], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{17, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{17, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{17, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"bandung", "covid19", "info", "ppi", "pussenif", 
                    "supratman", "vaksinasi"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"bandung", "covid19", "info", "ppi", "pussenif", 
                    "supratman", "vaksinasi"}, ShowStringCharacters -> False],
                    FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{18, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{18, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{18, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"agustus", "daftar", "indonesia", "kartu", "pintar", 
                    "tanggal"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"agustus", "daftar", "indonesia", "kartu", "pintar",
                     "tanggal"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{19, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{19, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{19, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"air", "dapat", "daun", "katarak", "rebusan", 
                    "sembuhkan", "siri"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"air", "dapat", "daun", "katarak", "rebusan", 
                    "sembuhkan", "siri"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][{20, 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{20, 1}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][{20, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 160, 1], {1, 160 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 160, 1], {1, 160 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[160, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[160, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"}, "Rows", 1, {}]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"}, "Rows", 10, {}]],
                     MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"}, "Rows", 30, {}]],
                     MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"}, "Rows", 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"}, "Rows", 
                    100000000, {}]], MenuEvaluator -> Automatic]}], " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 160, 1], {1, 160 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 160, 1], {1, 160 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                "5588a3dd-7af9-4a2a-bc4d-7354cf908768", {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              "5588a3dd-7af9-4a2a-bc4d-7354cf908768"][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       434.64862718582157`, {246.55772988281248`, 251.71647011718747`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      434.64862718582157`, {246.55772988281248`, 251.71647011718747`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9409569550342693`*^9, 3.940987244183546*^9, 
  3.9418658205168*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"4be4b4f5-1e40-7540-a82b-c672c50cbbfa"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Train Test Split", "Section",
 CellChangeTimes->{{3.9409782250067215`*^9, 
  3.9409782306167126`*^9}},ExpressionUUID->"7420ab37-d52c-9c4d-bc0d-\
7351da858956"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"value", " ", "=", " ", 
   RowBox[{"tokenizedData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", 
      RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"labels", " ", "=", " ", 
   RowBox[{"tokenizedData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", 
      RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.9409560517265644`*^9, 3.9409560909481735`*^9}, {
   3.9409561266218376`*^9, 3.9409561388549347`*^9}, {3.940956442441309*^9, 
   3.940956465296095*^9}, {3.9409566034813213`*^9, 3.9409566044653206`*^9}, {
   3.940956700902754*^9, 3.940956732814703*^9}, {3.940956767936329*^9, 
   3.9409567712175198`*^9}, {3.9409569587926483`*^9, 3.9409571115932407`*^9}, 
   3.9409572283807545`*^9, {3.9409572596071606`*^9, 3.940957351623804*^9}, {
   3.940957388705021*^9, 3.9409574223147144`*^9}, {3.940957464324644*^9, 
   3.9409575566339703`*^9}, {3.9409576706598206`*^9, 
   3.9409576735810184`*^9}, {3.9409577670591373`*^9, 3.9409578146318054`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"5ebb4379-8341-2f48-ad7f-4ccaf7e41119"],

Cell[CellGroupData[{

Cell["Combining the tokens", "Subsection",
 CellChangeTimes->{{3.9409782575572186`*^9, 
  3.940978261755602*^9}},ExpressionUUID->"9c0c7776-66ae-2a4f-acf5-\
00e82df75203"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"tokensToString", "[", "tokens_", "]"}], " ", ":=", " ", 
    RowBox[{"StringJoin", "[", 
     RowBox[{"Riffle", "[", 
      RowBox[{"tokens", ",", " ", "\"\< \>\""}], "]"}], "]"}]}], ";"}], "\n", 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Convert", " ", "the", " ", "data", " ", "into", " ", "the", " ", 
    "desired", " ", "format"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"processedData", " ", "=", " ", 
   RowBox[{"Map", "[", "\n", "  ", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"tokensToString", "[", 
         RowBox[{"First", "[", "#", "]"}], "]"}], ",", " ", 
        RowBox[{"Last", "[", "#", "]"}]}], "}"}], " ", "&"}], "\n", "  ", ",",
      " ", "tokenizedData"}], "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.9409578537747364`*^9, 3.9409578709501686`*^9}, {
  3.940957963895542*^9, 3.940957969979763*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"a24ad965-8368-8e4f-8ae9-5065118da253"],

Cell[CellGroupData[{

Cell[BoxData["processedData"], "Input",
 CellChangeTimes->{{3.940957873906395*^9, 3.9409578752882137`*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"86e477b7-53eb-c647-a2ad-afe746ad7bee"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{
       "150gb berikan gratis hut internet ke76 kominfo kuota peringati", 
        "HOAX"}, {
       "ditengah jokowi kerumunan masker memakai tanpa tiongkok video warga", 
        "HOAX"}, {
       "2000 2021 3550000 bantuan finansial kerja sosial tahun", "HOAX"}, {
       "akun instgram laptop store", "HOAX"}, {
       "bupati jam situbondo video wafat wejangan", "HOAX"}, {
       "cara klik listrik mendapatkan pln subsidi tautan", "HOAX"}, {
       "bahaya berisiko tinggi vaksin", "HOAX"}, {
       "200 kemendikbud kuota pulsa ribu subsidi", "HOAX"}, {
       "bbm isi karyawan kerja mogok penuh pertamina seruan tangki", 
        "HOAX"}, {
       "corona droplet lagi lewat penularan tak udara who", "HOAX"}, {
       "hari jadi jne juta ke31 kuisioner mendapatkan rupiah tunai uang", 
        "HOAX"}, {
       "asri babi hup jenama leong masak melaka milik minyak penternak \
syarikat terbesar", "HOAX"}, {
       "100 bergambar jokowi pecahan redenominasi uang", "HOAX"}, {
       "agar himbau kiyai modus mui operandi pki pusat rapid test tolak \
ustadz", "HOAX"}, {"adidas and free from get hurry shoes", "HOAX"}, {
       "benda bermagnet corona lengan menempel penerima vaksin", "HOAX"}, {
       "bandung cahya corona info kawaluyaan pasien rekanrekan rshs rujukan \
suspect udah virus", "HOAX"}, {
       "bandung covid19 info ppi pussenif supratman vaksinasi", "HOAX"}, {
       "agustus daftar indonesia kartu pintar tanggal", "HOAX"}, {
       "air dapat daun katarak rebusan sembuhkan siri", "HOAX"}, {
       "covid19 dulu fadilah kena mantan menkes siti", "HOAX"}, {
       "100 covid19 gratis internet isi kuota pandemi tanpa ulang", "HOAX"}, {
       "akun bupati indramayu mengatasnamakan whatsapp", "HOAX"}, {
       "besarbesaran info jabodetabek kejaksaan libatkan masker pemda razia", 
        "HOAX"}, {
       "bakteri bukan covid19 diperkuat hipoksia italia kementerian kesehatan \
melainkan mnyebabkan peradangan radiasi virus", "HOAX"}, {
       "akomodasi arab bayar belum haji indonesia jemaah saudi tolak", 
        "HOAX"}, {
       "bandung covid19 dunia hatihati kota meninggal terpapar warga", 
        "HOAX"}, {"medsos pemerintah sadap telepon warga", "HOAX"}, {
       "broadcast bssn facebook pantau rekam telepon twitter", "HOAX"}, {
       "berantai corona penyebaran pesan puncak", "HOAX"}, {
       "china indonesia jaminan kalimantan minta pulau utang", "HOAX"}, {
       "arab arti buku corona diciptakan huruf iqra kebohongan penuh zaman", 
        "HOAX"}, {
       "baru cina indonesia lewat masker masuk menyebar penyakit", "HOAX"}, {
       "cimahi covid19 disebutkan foto kabur pasien positif rumah sakit \
tersebar wanita", "HOAX"}, {
       "beirut lebanon ledakan rudal serangan versi video", "HOAX"}, {
       "benarkah kanker konsumsi lambung mengakibatkan pakis sayur", 
        "HOAX"}, {"disuntik duluan jokowi mau tak vaksin", "HOAX"}, {
       "0817 akibat disuntik gresik kasdim mayor meninggal riyadi siangnya \
sugeng vaksin", "HOAX"}, {
       "almaidah arti berubah ide menjadi mulai nusantara pemimpin quran \
realisasikan setia surat teman", "HOAX"}, {
       "2020 april area bandung cibiru cileunyi cimahi kamil lembang lockdown \
maret ridwan", "HOAX"}, {"75gb internet kuota subsidi", "HOAX"}, {
       "bandung covid19 dipenuhi meninggal pasien rshs rumah sakit ugd", 
        "HOAX"}, {
       "130 bri hadiah juta rupiah sebesar tahun tunai uang ulang", "HOAX"}, {
       "disuntik pingsan pria sesudah vaksin video", "HOAX"}, {
       "arab bahasa dihapus kurikulum mata pai pelajaran", "HOAX"}, {
       "adalah asri babi hup jenama leong malaysia masak melaka minyak \
penternak produk syarikat terbesar", "HOAX"}, {
       "nusantara pendaftaran vaksin", "HOAX"}, {
       "1000 arya bima diberi gds gelar lingkungan menyemprot meter radius \
razia sanksi siswa terjaring", "HOAX"}, {
       "gratis kuota perayaan tahun tawaran ulang whatsapp", "HOAX"}, {
       "1012 2020 april berhenti hari himbauan tanggal total", "HOAX"}, {
       "3050 5080 air anakanak corona hangat jaga kali kementerian kesehatan \
lembab minumlah pemberitahuan serius tenggorokan virus", "HOAX"}, {
       "100 data gelar internet isi promosi tanpa tokopedia ulang", "HOAX"}, {
       "bola covid19 diduga hilang jenazah mata pasien probolinggo video", 
        "HOAX"}, {"foto hijab kartini memakai", "HOAX"}, {
       "covid19 dokter hari namanama rilis sama wafat", "HOAX"}, {
       "anggrek apartemen corona pasien taman virus", "HOAX"}, {
       "china himbauan kbri makanan mengkonsumsi produk", "HOAX"}, {
       "gratis guru laptop pemerintah sediakan siswa", "HOAX"}, {
       "bagikan farma juta ke50 kimia rupiah uang ultah", "HOAX"}, {
       "20000 coronavirus hindari lebih membunuh minta pasien pengadilan \
penyebaran persetujuan tiongkok virus", "HOAX"}, {
       "alamat corona meninggal pasien positif rshs", "HOAX"}, {
       "aliansi berbahaya covid19 dokter dunia penyataan", "HOAX"}, {
       "2021 china ikut juta pns tes warga", "HOAX"}, {
       "ajak artikel bangun brigjen covid hadapi mardjo mengatasnamakan \
optimisme purn subiandono tni warga", "HOAX"}, {
       "175 berbahaya divaksinkan indonesia juta rakyat sinovac ternyata \
vaksin", "HOAX"}, {
       "baru biaya indonesia kapolri mantap terbaru tilang", "HOAX"}, {
       "anaknya diri disebabkan gantung ibu kedua lockdown video", "HOAX"}, {
       "5500000 bantuan bjb finansial sosial", "HOAX"}, {
       "600 bahan bakar gas gratis isi ribu senilai voucher", "HOAX"}, {
       "aliansi berbahaya covid19 dokter eropa lintas negara pernyataan", 
        "HOAX"}, {"ayam bahan burger kfc konsumsi layak sisanya", "HOAX"}, {
       "daftar indonesia kementrian kendaraan keuangan lelang noneksekusi \
republik", "HOAX"}, {
       "co2 keracunan manusia masker penggunaan sebabkan", "HOAX"}, {
       "berakhirnya kopit proyek tanggal", "HOAX"}, {
       "akun cirebon dprd ketua kota mengatasnamakan wakil whatsapp", 
        "HOAX"}, {"dini divaksin jangka mati siapsiap tahun waktu", "HOAX"}, {
       "ajid ambruk bangunan demi foto jihyo selamatkan terobos", "HOAX"}, {
       "bandung kamil kota lockdown melakukan ridwan utusan", "HOAX"}, {
       "189 juta link pertamina sms subsidi via", "HOAX"}, {
       "800000 alfamart orang tawarkan voucher", "HOAX"}, {
       "diskominfo jabar kerja lowongan", "BENAR"}, {
       "corona daerah kemenkes penting siagakan virus waspada", "BENAR"}, {
       "dana galang palestina", "BENAR"}, {
       "arah bangsa eceran hingga jokowi kehilangan kelas ketum legalkan \
miras muhammadiyah", "BENAR"}, {
       "2021 championship ditutup garut gelar icf jalan kota menuju oktober", 
        "BENAR"}, {
       "bandung corona kota medis puskesmas tenaga terpapar virus", 
        "BENAR"}, {
       "700 covid19 dimakamakan hasil jenazah lebih negatif secara swab \
ternyata", "BENAR"}, {
       "hak kartu konsumen melanggar memungkinkan pencetakan vaksin", 
        "BENAR"}, {
       "1012 2020 april besar jabar patroli polda rute skala tanggal", 
        "BENAR"}, {
       "desa gegara guru jadi jalan kemarahan perangkat posting rusak sasaran \
sukabumi", "BENAR"}, {
       "bandara bus china dijemput langsung puluhan selasa soetta sore tiba \
warga", "BENAR"}, {"118 cipularang kembali longsor pinggir tol", "BENAR"}, {
       "antapani bandung covid19 ditutup karyawannya minimarket positif", 
        "BENAR"}, {"10gb belajar harga kuota rp10 telkomsel", "BENAR"}, {
       "100150ribu 2020 barat bermasker denda jawa juli kena mulai tempat \
umum", "BENAR"}, {
       "australia balik buronan hrs indonesia luncurkan mantan media menyebut \
moral pornografi revolusi", "BENAR"}, {
       "bandung cimaung covid19 ditutup gunung kabupaten kecamatan merah \
puntang wisata zona", "BENAR"}, {
       "aplikasi kominfo lindungi luncurkan peduli", "BENAR"}, {
       "bandung berantai kabupaten masker penggunaan pesan razia", "BENAR"}, {
       "asn covid19 ditutup gedung jabar lebih orang positif sate setda \
terindikasi", "BENAR"}, {
       "bandung corona hasan isolasi pasien sadikin terduga virus", 
        "BENAR"}, {"cabe impor ribu ton", "BENAR"}, {
       "belanja credit dapatkan event lazada pocket rp150000 sebesar share", 
        "BENAR"}, {"cimahi corona personel positif pudikom tni", "BENAR"}, {
       "bangkitkan hip keluarkan khawatir komunis maklumat mui paham ruu \
tolak", "BENAR"}, {
       "berikan corona dispenda insentif kotakabupaten melanda pbb tagihan", 
        "BENAR"}, {"baru china hanta muncul virus", "BENAR"}, {
       "akibat bandung bmkg gempa lembang mitigasi pentingnya potensi sesar \
tekankan waspada", "BENAR"}, {
       "2021 dibuka jabar januari kamil ridwan sebut sekolah", "BENAR"}, {
       "bandung covid19 ratusan secapa siswa terpapar", "BENAR"}, {
       "bandung corona ditutup kota pasar pedagang positif", "BENAR"}, {
       "ade alquran armando perintah sholat tak waktu", "BENAR"}, {
       "corona dua indonesia orang positif virus", "BENAR"}, {
       "9999 antiseptic betadine covid19 detik efektif membunuh povidone \
terbukti virus", "BENAR"}, {
       "anak bantuan beasiswa darurat kecil pedagang ppkm terdampak", 
        "BENAR"}, {
       "arak bali disahkan gubernur hingga industri jokowi kasih presiden \
terima tuak", "BENAR"}, {
       "arab haji indonesia kedutaan klarifikasi kuota saudi surat", 
        "BENAR"}, {
       "covid19 india indonesia masuk meroket ratusan", "BENAR"}, {
       "berbagai china disambut ditolak inonesia negara ratusan turis", 
        "BENAR"}, {
       "75000 baru hari ke75 kemenkeu kemerdekaan pecahan tahun terbitkan \
uang", "BENAR"}, {
       "bakteri berbahaya enoki jamur kandung kementarian musnahkan \
pertanian", "BENAR"}, {
       "covid19 dosis guru lumpuh sukabumi usai vaksin", "BENAR"}, {
       "bandung covid19 positif ratusan secapa siswa", "BENAR"}, {
       "2021 bersama cuti hari libur nasional perubahan tahun", "BENAR"}, {
       "bandung bantuan covid19 kota modal pandemi pelaku tengah terima umkm \
usaha", "BENAR"}, {
       "calon cara cek covid19 gratis pedulilindungiid penerima vaksin \
website", "BENAR"}, {"2020 barat jawa juni perpanjang psbb", "BENAR"}, {
       "bengkak dilarikan divaksin hingga igd jawa mual pasca pos sinovac \
wartawan", "BENAR"}, {
       "bahaya berita cnn covid indonesia potensi vaksin video", "BENAR"}, {
       "8999900411 kalimat kitab mempermudah mencari nomer quran simpan", 
        "BENAR"}, {
       "dirjen edaran kesehatan obat pelayanan pemanfaatan pemeliharaan surat \
tradisional", "BENAR"}, {
       "2017 buku corona ipa pelajaran tahun tertulis virus", "BENAR"}, {
       "bandung ditutup jalan kembali kota proporsional psbb ruas terapkan", 
        "BENAR"}, {
       "bandung bus damri kota operasional pemberhentian pengumuman", 
        "BENAR"}, {
       "bandung covid19 jadwal kota pelaksanaan vakisnasi", "BENAR"}, {
       "besar buka eceran industri investasi izin jokowi miras pintu", 
        "BENAR"}, {
       "berisi divaksin format isian keluhan masyarakat pemberitahuan \
penipuan pesan singkat", "BENAR"}, {
       "200 bergabung bonus buzzbreak dapatkan ribu tambahan uang", 
        "BENAR"}, {"bantu kecil pedagang sebarkan tolong", "BENAR"}, {
       "2453 cegah cetak data diblokir jasa kartu kebocoran produk vaksin", 
        "BENAR"}, {
       "berhasil china ciptakan covid19 massal produksi siap vaksin", 
        "BENAR"}, {
       "bencana covid19 darurat hingga mei memperpanjang pemerintah status", 
        "BENAR"}, {"jabar milenial vaksinasi", "BENAR"}, {
       "bayi bulan diduga imunisasi meninggal sukabumi usia viral", 
        "BENAR"}, {
       "fitri idul izinkan jumat kamil laksanakan masjid pengurus ridwan \
solat", "BENAR"}, {
       "arief judi kasino legalkan puyono togel usulkan", "BENAR"}, {
       "bekasi covid kehabisan parkiran pasien ruangan terlantar video", 
        "BENAR"}, {"disnakertrans jabar kartu prakerja program", "BENAR"}, {
       "238 alatnya corona mahal tak terungkap tes virus wni wuhan", 
        "BENAR"}, {
       "fadilah gagalkah herd imunity mantan menkes nidom siti", "BENAR"}, {
       "bantuan kartu kembalikan kerja perpres peserta revisi uang wajib", 
        "BENAR"}, {
       "bogor jadi lautan membara merah penyebaran sekali virusnya", 
        "BENAR"}, {
       "dewan dua edaran ganjil gelombang genap indonesia jumat masjid sholat \
surat", "BENAR"}, {
       "babi bandung daging kabupaten pengungkapan penjualan", "BENAR"}, {
       "barat diprediksi jawa mter pantai potensi selatan terjadi timur \
tsunami", "BENAR"}, {
       "china corona daftarkan diri kamil klinis relawan ridwan uji vaksin \
virs", "BENAR"}, {
       "ade armando beragama dijalankan harus islam percaya syariat", 
        "BENAR"}, {"2021 berlaku elektronik maret mulai tilang", "BENAR"}, {
       "anak bejat cabuli depok guru muridnya ngaji", "BENAR"}, {
       "abk buang china hingga indonesia kapal kisah laut manusiawi mayatnya \
meninggal perlakukan", "BENAR"}}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`AtomShape[52.5]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["BENAR", "HOAX"]]}], 160], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`AtomShape[560.], 
           TypeSystem`PackageScope`AtomShape[52.5]}], 
         DirectedInfinity[1], 2, {All}]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["BENAR", "HOAX"]]}], 160], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     160, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
              "150gb berikan gratis hut internet ke76 kominfo kuota \
peringati", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "ditengah jokowi kerumunan masker memakai tanpa tiongkok video \
warga", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "2000 2021 3550000 bantuan finansial kerja sosial tahun", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["akun instgram laptop store", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["bupati jam situbondo video wafat wejangan", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["cara klik listrik mendapatkan pln subsidi tautan", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["bahaya berisiko tinggi vaksin", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["200 kemendikbud kuota pulsa ribu subsidi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "bbm isi karyawan kerja mogok penuh pertamina seruan tangki", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["corona droplet lagi lewat penularan tak udara who", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "hari jadi jne juta ke31 kuisioner mendapatkan rupiah tunai \
uang", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "asri babi hup jenama leong masak melaka milik minyak penternak \
syarikat terbesar", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["100 bergambar jokowi pecahan redenominasi uang", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "agar himbau kiyai modus mui operandi pki pusat rapid test \
tolak ustadz", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["adidas and free from get hurry shoes", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "benda bermagnet corona lengan menempel penerima vaksin", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "bandung cahya corona info kawaluyaan pasien rekanrekan rshs \
rujukan suspect udah virus", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
              "bandung covid19 info ppi pussenif supratman vaksinasi", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["agustus daftar indonesia kartu pintar tanggal", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["air dapat daun katarak rebusan sembuhkan siri", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["HOAX", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{52.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 160, 1], {1, 160 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 160, 1], {1, 160 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[160, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[160, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 160, 1], {1, 160 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 160, 1], {1, 160 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       644.0000000000001, {246.55772988281248`, 251.71647011718747`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      644.0000000000001, {246.55772988281248`, 251.71647011718747`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9409578755460606`*^9, 3.9409579875721874`*^9, 
  3.9418662862968597`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"cf43a7b4-738c-424a-89de-c36cde5fd2be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"poin", " ", "=", " ", 
  RowBox[{"Normal", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"processedData", "[", 
     RowBox[{"All", ",", " ", 
      RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "]"}]}], "\n", 
 RowBox[{"label", " ", "=", " ", 
  RowBox[{"Normal", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"processedData", "[", 
     RowBox[{"All", ",", " ", 
      RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.9409580123955173`*^9, 3.940958036784216*^9}, {
  3.9409586989453144`*^9, 3.9409587098477173`*^9}, {3.9418662985681877`*^9, 
  3.941866305875204*^9}, {3.9418666681228447`*^9, 3.9418667012436924`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"62cbb5da-5625-484f-ab4e-e8ed8d331817"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"150gb berikan gratis hut internet ke76 kominfo kuota peringati\
\"\>", ",", "\<\"ditengah jokowi kerumunan masker memakai tanpa tiongkok \
video warga\"\>", 
   ",", "\<\"2000 2021 3550000 bantuan finansial kerja sosial tahun\"\>", 
   ",", "\<\"akun instgram laptop store\"\>", 
   ",", "\<\"bupati jam situbondo video wafat wejangan\"\>", 
   ",", "\<\"cara klik listrik mendapatkan pln subsidi tautan\"\>", 
   ",", "\<\"bahaya berisiko tinggi vaksin\"\>", 
   ",", "\<\"200 kemendikbud kuota pulsa ribu subsidi\"\>", 
   ",", "\<\"bbm isi karyawan kerja mogok penuh pertamina seruan tangki\"\>", 
   ",", "\<\"corona droplet lagi lewat penularan tak udara who\"\>", 
   ",", "\<\"hari jadi jne juta ke31 kuisioner mendapatkan rupiah tunai \
uang\"\>", 
   ",", "\<\"asri babi hup jenama leong masak melaka milik minyak penternak \
syarikat terbesar\"\>", 
   ",", "\<\"100 bergambar jokowi pecahan redenominasi uang\"\>", 
   ",", "\<\"agar himbau kiyai modus mui operandi pki pusat rapid test tolak \
ustadz\"\>", ",", "\<\"adidas and free from get hurry shoes\"\>", 
   ",", "\<\"benda bermagnet corona lengan menempel penerima vaksin\"\>", 
   ",", "\<\"bandung cahya corona info kawaluyaan pasien rekanrekan rshs \
rujukan suspect udah virus\"\>", 
   ",", "\<\"bandung covid19 info ppi pussenif supratman vaksinasi\"\>", 
   ",", "\<\"agustus daftar indonesia kartu pintar tanggal\"\>", 
   ",", "\<\"air dapat daun katarak rebusan sembuhkan siri\"\>", 
   ",", "\<\"covid19 dulu fadilah kena mantan menkes siti\"\>", 
   ",", "\<\"100 covid19 gratis internet isi kuota pandemi tanpa ulang\"\>", 
   ",", "\<\"akun bupati indramayu mengatasnamakan whatsapp\"\>", 
   ",", "\<\"besarbesaran info jabodetabek kejaksaan libatkan masker pemda \
razia\"\>", 
   ",", "\<\"bakteri bukan covid19 diperkuat hipoksia italia kementerian \
kesehatan melainkan mnyebabkan peradangan radiasi virus\"\>", 
   ",", "\<\"akomodasi arab bayar belum haji indonesia jemaah saudi \
tolak\"\>", 
   ",", "\<\"bandung covid19 dunia hatihati kota meninggal terpapar \
warga\"\>", ",", "\<\"medsos pemerintah sadap telepon warga\"\>", 
   ",", "\<\"broadcast bssn facebook pantau rekam telepon twitter\"\>", 
   ",", "\<\"berantai corona penyebaran pesan puncak\"\>", 
   ",", "\<\"china indonesia jaminan kalimantan minta pulau utang\"\>", 
   ",", "\<\"arab arti buku corona diciptakan huruf iqra kebohongan penuh \
zaman\"\>", 
   ",", "\<\"baru cina indonesia lewat masker masuk menyebar penyakit\"\>", 
   ",", "\<\"cimahi covid19 disebutkan foto kabur pasien positif rumah sakit \
tersebar wanita\"\>", 
   ",", "\<\"beirut lebanon ledakan rudal serangan versi video\"\>", 
   ",", "\<\"benarkah kanker konsumsi lambung mengakibatkan pakis sayur\"\>", 
   ",", "\<\"disuntik duluan jokowi mau tak vaksin\"\>", 
   ",", "\<\"0817 akibat disuntik gresik kasdim mayor meninggal riyadi \
siangnya sugeng vaksin\"\>", 
   ",", "\<\"almaidah arti berubah ide menjadi mulai nusantara pemimpin quran \
realisasikan setia surat teman\"\>", 
   ",", "\<\"2020 april area bandung cibiru cileunyi cimahi kamil lembang \
lockdown maret ridwan\"\>", ",", "\<\"75gb internet kuota subsidi\"\>", 
   ",", "\<\"bandung covid19 dipenuhi meninggal pasien rshs rumah sakit ugd\"\
\>", ",", "\<\"130 bri hadiah juta rupiah sebesar tahun tunai uang ulang\"\>",
    ",", "\<\"disuntik pingsan pria sesudah vaksin video\"\>", 
   ",", "\<\"arab bahasa dihapus kurikulum mata pai pelajaran\"\>", 
   ",", "\<\"adalah asri babi hup jenama leong malaysia masak melaka minyak \
penternak produk syarikat terbesar\"\>", 
   ",", "\<\"nusantara pendaftaran vaksin\"\>", 
   ",", "\<\"1000 arya bima diberi gds gelar lingkungan menyemprot meter \
radius razia sanksi siswa terjaring\"\>", 
   ",", "\<\"gratis kuota perayaan tahun tawaran ulang whatsapp\"\>", 
   ",", "\<\"1012 2020 april berhenti hari himbauan tanggal total\"\>", 
   ",", "\<\"3050 5080 air anakanak corona hangat jaga kali kementerian \
kesehatan lembab minumlah pemberitahuan serius tenggorokan virus\"\>", 
   ",", "\<\"100 data gelar internet isi promosi tanpa tokopedia ulang\"\>", 
   ",", "\<\"bola covid19 diduga hilang jenazah mata pasien probolinggo video\
\"\>", ",", "\<\"foto hijab kartini memakai\"\>", 
   ",", "\<\"covid19 dokter hari namanama rilis sama wafat\"\>", 
   ",", "\<\"anggrek apartemen corona pasien taman virus\"\>", 
   ",", "\<\"china himbauan kbri makanan mengkonsumsi produk\"\>", 
   ",", "\<\"gratis guru laptop pemerintah sediakan siswa\"\>", 
   ",", "\<\"bagikan farma juta ke50 kimia rupiah uang ultah\"\>", 
   ",", "\<\"20000 coronavirus hindari lebih membunuh minta pasien pengadilan \
penyebaran persetujuan tiongkok virus\"\>", 
   ",", "\<\"alamat corona meninggal pasien positif rshs\"\>", 
   ",", "\<\"aliansi berbahaya covid19 dokter dunia penyataan\"\>", 
   ",", "\<\"2021 china ikut juta pns tes warga\"\>", 
   ",", "\<\"ajak artikel bangun brigjen covid hadapi mardjo mengatasnamakan \
optimisme purn subiandono tni warga\"\>", 
   ",", "\<\"175 berbahaya divaksinkan indonesia juta rakyat sinovac ternyata \
vaksin\"\>", 
   ",", "\<\"baru biaya indonesia kapolri mantap terbaru tilang\"\>", 
   ",", "\<\"anaknya diri disebabkan gantung ibu kedua lockdown video\"\>", 
   ",", "\<\"5500000 bantuan bjb finansial sosial\"\>", 
   ",", "\<\"600 bahan bakar gas gratis isi ribu senilai voucher\"\>", 
   ",", "\<\"aliansi berbahaya covid19 dokter eropa lintas negara \
pernyataan\"\>", ",", "\<\"ayam bahan burger kfc konsumsi layak sisanya\"\>", 
   ",", "\<\"daftar indonesia kementrian kendaraan keuangan lelang \
noneksekusi republik\"\>", 
   ",", "\<\"co2 keracunan manusia masker penggunaan sebabkan\"\>", 
   ",", "\<\"berakhirnya kopit proyek tanggal\"\>", 
   ",", "\<\"akun cirebon dprd ketua kota mengatasnamakan wakil whatsapp\"\>",
    ",", "\<\"dini divaksin jangka mati siapsiap tahun waktu\"\>", 
   ",", "\<\"ajid ambruk bangunan demi foto jihyo selamatkan terobos\"\>", 
   ",", "\<\"bandung kamil kota lockdown melakukan ridwan utusan\"\>", 
   ",", "\<\"189 juta link pertamina sms subsidi via\"\>", 
   ",", "\<\"800000 alfamart orang tawarkan voucher\"\>", 
   ",", "\<\"diskominfo jabar kerja lowongan\"\>", 
   ",", "\<\"corona daerah kemenkes penting siagakan virus waspada\"\>", 
   ",", "\<\"dana galang palestina\"\>", 
   ",", "\<\"arah bangsa eceran hingga jokowi kehilangan kelas ketum legalkan \
miras muhammadiyah\"\>", 
   ",", "\<\"2021 championship ditutup garut gelar icf jalan kota menuju \
oktober\"\>", 
   ",", "\<\"bandung corona kota medis puskesmas tenaga terpapar virus\"\>", 
   ",", "\<\"700 covid19 dimakamakan hasil jenazah lebih negatif secara swab \
ternyata\"\>", 
   ",", "\<\"hak kartu konsumen melanggar memungkinkan pencetakan vaksin\"\>",
    ",", "\<\"1012 2020 april besar jabar patroli polda rute skala \
tanggal\"\>", 
   ",", "\<\"desa gegara guru jadi jalan kemarahan perangkat posting rusak \
sasaran sukabumi\"\>", 
   ",", "\<\"bandara bus china dijemput langsung puluhan selasa soetta sore \
tiba warga\"\>", ",", "\<\"118 cipularang kembali longsor pinggir tol\"\>", 
   ",", "\<\"antapani bandung covid19 ditutup karyawannya minimarket \
positif\"\>", ",", "\<\"10gb belajar harga kuota rp10 telkomsel\"\>", 
   ",", "\<\"100150ribu 2020 barat bermasker denda jawa juli kena mulai \
tempat umum\"\>", 
   ",", "\<\"australia balik buronan hrs indonesia luncurkan mantan media \
menyebut moral pornografi revolusi\"\>", 
   ",", "\<\"bandung cimaung covid19 ditutup gunung kabupaten kecamatan merah \
puntang wisata zona\"\>", 
   ",", "\<\"aplikasi kominfo lindungi luncurkan peduli\"\>", 
   ",", "\<\"bandung berantai kabupaten masker penggunaan pesan razia\"\>", 
   ",", "\<\"asn covid19 ditutup gedung jabar lebih orang positif sate setda \
terindikasi\"\>", 
   ",", "\<\"bandung corona hasan isolasi pasien sadikin terduga virus\"\>", 
   ",", "\<\"cabe impor ribu ton\"\>", 
   ",", "\<\"belanja credit dapatkan event lazada pocket rp150000 sebesar \
share\"\>", ",", "\<\"cimahi corona personel positif pudikom tni\"\>", 
   ",", "\<\"bangkitkan hip keluarkan khawatir komunis maklumat mui paham ruu \
tolak\"\>", 
   ",", "\<\"berikan corona dispenda insentif kotakabupaten melanda pbb \
tagihan\"\>", ",", "\<\"baru china hanta muncul virus\"\>", 
   ",", "\<\"akibat bandung bmkg gempa lembang mitigasi pentingnya potensi \
sesar tekankan waspada\"\>", 
   ",", "\<\"2021 dibuka jabar januari kamil ridwan sebut sekolah\"\>", 
   ",", "\<\"bandung covid19 ratusan secapa siswa terpapar\"\>", 
   ",", "\<\"bandung corona ditutup kota pasar pedagang positif\"\>", 
   ",", "\<\"ade alquran armando perintah sholat tak waktu\"\>", 
   ",", "\<\"corona dua indonesia orang positif virus\"\>", 
   ",", "\<\"9999 antiseptic betadine covid19 detik efektif membunuh povidone \
terbukti virus\"\>", 
   ",", "\<\"anak bantuan beasiswa darurat kecil pedagang ppkm terdampak\"\>",
    ",", "\<\"arak bali disahkan gubernur hingga industri jokowi kasih \
presiden terima tuak\"\>", 
   ",", "\<\"arab haji indonesia kedutaan klarifikasi kuota saudi surat\"\>", 
   ",", "\<\"covid19 india indonesia masuk meroket ratusan\"\>", 
   ",", "\<\"berbagai china disambut ditolak inonesia negara ratusan \
turis\"\>", 
   ",", "\<\"75000 baru hari ke75 kemenkeu kemerdekaan pecahan tahun \
terbitkan uang\"\>", 
   ",", "\<\"bakteri berbahaya enoki jamur kandung kementarian musnahkan \
pertanian\"\>", ",", "\<\"covid19 dosis guru lumpuh sukabumi usai vaksin\"\>",
    ",", "\<\"bandung covid19 positif ratusan secapa siswa\"\>", 
   ",", "\<\"2021 bersama cuti hari libur nasional perubahan tahun\"\>", 
   ",", "\<\"bandung bantuan covid19 kota modal pandemi pelaku tengah terima \
umkm usaha\"\>", 
   ",", "\<\"calon cara cek covid19 gratis pedulilindungiid penerima vaksin \
website\"\>", ",", "\<\"2020 barat jawa juni perpanjang psbb\"\>", 
   ",", "\<\"bengkak dilarikan divaksin hingga igd jawa mual pasca pos \
sinovac wartawan\"\>", 
   ",", "\<\"bahaya berita cnn covid indonesia potensi vaksin video\"\>", 
   ",", "\<\"8999900411 kalimat kitab mempermudah mencari nomer quran \
simpan\"\>", 
   ",", "\<\"dirjen edaran kesehatan obat pelayanan pemanfaatan pemeliharaan \
surat tradisional\"\>", 
   ",", "\<\"2017 buku corona ipa pelajaran tahun tertulis virus\"\>", 
   ",", "\<\"bandung ditutup jalan kembali kota proporsional psbb ruas \
terapkan\"\>", 
   ",", "\<\"bandung bus damri kota operasional pemberhentian pengumuman\"\>",
    ",", "\<\"bandung covid19 jadwal kota pelaksanaan vakisnasi\"\>", 
   ",", "\<\"besar buka eceran industri investasi izin jokowi miras \
pintu\"\>", 
   ",", "\<\"berisi divaksin format isian keluhan masyarakat pemberitahuan \
penipuan pesan singkat\"\>", 
   ",", "\<\"200 bergabung bonus buzzbreak dapatkan ribu tambahan uang\"\>", 
   ",", "\<\"bantu kecil pedagang sebarkan tolong\"\>", 
   ",", "\<\"2453 cegah cetak data diblokir jasa kartu kebocoran produk \
vaksin\"\>", 
   ",", "\<\"berhasil china ciptakan covid19 massal produksi siap vaksin\"\>",
    ",", "\<\"bencana covid19 darurat hingga mei memperpanjang pemerintah \
status\"\>", ",", "\<\"jabar milenial vaksinasi\"\>", 
   ",", "\<\"bayi bulan diduga imunisasi meninggal sukabumi usia viral\"\>", 
   ",", "\<\"fitri idul izinkan jumat kamil laksanakan masjid pengurus ridwan \
solat\"\>", ",", "\<\"arief judi kasino legalkan puyono togel usulkan\"\>", 
   ",", "\<\"bekasi covid kehabisan parkiran pasien ruangan terlantar video\"\
\>", ",", "\<\"disnakertrans jabar kartu prakerja program\"\>", 
   ",", "\<\"238 alatnya corona mahal tak terungkap tes virus wni wuhan\"\>", 
   ",", "\<\"fadilah gagalkah herd imunity mantan menkes nidom siti\"\>", 
   ",", "\<\"bantuan kartu kembalikan kerja perpres peserta revisi uang wajib\
\"\>", ",", "\<\"bogor jadi lautan membara merah penyebaran sekali virusnya\"\
\>", ",", "\<\"dewan dua edaran ganjil gelombang genap indonesia jumat masjid \
sholat surat\"\>", 
   ",", "\<\"babi bandung daging kabupaten pengungkapan penjualan\"\>", 
   ",", "\<\"barat diprediksi jawa mter pantai potensi selatan terjadi timur \
tsunami\"\>", 
   ",", "\<\"china corona daftarkan diri kamil klinis relawan ridwan uji \
vaksin virs\"\>", 
   ",", "\<\"ade armando beragama dijalankan harus islam percaya syariat\"\>",
    ",", "\<\"2021 berlaku elektronik maret mulai tilang\"\>", 
   ",", "\<\"anak bejat cabuli depok guru muridnya ngaji\"\>", 
   ",", "\<\"abk buang china hingga indonesia kapal kisah laut manusiawi \
mayatnya meninggal perlakukan\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.941866306351919*^9, {3.9418666740823555`*^9, 3.9418667018334293`*^9}},
 CellLabel->"Out[76]=",ExpressionUUID->"321a8854-2075-7a40-87c5-4cdbd8bd05df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", 
   ",", "\<\"HOAX\"\>", ",", "\<\"HOAX\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", ",", "\<\"BENAR\"\>", 
   ",", "\<\"BENAR\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.941866306351919*^9, {3.9418666740823555`*^9, 3.94186670184643*^9}},
 CellLabel->"Out[77]=",ExpressionUUID->"877a5c58-2d9e-a54a-b751-3f092eef1bd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<D:\\\\Coding\\\\school\\\\Chula Big Data Class\\\\newLabel.txt\>\"", 
   ",", " ", "label", ",", " ", "\"\<CSV\>\"", ",", " ", 
   RowBox[{"\"\<FieldSeparator\>\"", " ", "->", " ", "\"\<,\>\""}]}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.9409591744263554`*^9, 3.9409592011555233`*^9}, {
  3.940959237601408*^9, 3.9409592762418633`*^9}, {3.940959764777706*^9, 
  3.940959769848505*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"d050489d-d176-2146-b904-2ae0c8053be2"],

Cell[BoxData["\<\"D:\\\\Coding\\\\school\\\\Chula Big Data \
Class\\\\newLabel.txt\"\>"], "Output",
 CellChangeTimes->{3.940959186777092*^9, 3.9409592805175247`*^9, 
  3.9409597730314045`*^9, 3.9409872445062313`*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"4ce2578a-7c1f-f54d-aab3-f5440dba43e7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Make association thread", "Subsection",
 CellChangeTimes->{{3.940978350392477*^9, 
  3.9409783548813667`*^9}},ExpressionUUID->"c132f351-793f-4a46-9521-\
60dcc8459a6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xy", " ", "=", " ", 
  RowBox[{"Thread", "[", 
   RowBox[{"poin", "->", "label"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.941866318054306*^9, 3.9418663272801685`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"a32f4eab-1e10-3443-b00e-f85f5d6db8e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"150gb berikan gratis hut internet ke76 kominfo kuota \
peringati\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"ditengah jokowi kerumunan masker memakai tanpa tiongkok video \
warga\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"2000 2021 3550000 bantuan finansial kerja sosial tahun\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"akun instgram laptop store\"\>", "\[Rule]", "\<\"HOAX\"\>"}], 
   ",", 
   RowBox[{"\<\"bupati jam situbondo video wafat wejangan\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"cara klik listrik mendapatkan pln subsidi tautan\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bahaya berisiko tinggi vaksin\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"200 kemendikbud kuota pulsa ribu subsidi\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bbm isi karyawan kerja mogok penuh pertamina seruan \
tangki\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"corona droplet lagi lewat penularan tak udara who\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"hari jadi jne juta ke31 kuisioner mendapatkan rupiah tunai \
uang\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"asri babi hup jenama leong masak melaka milik minyak \
penternak syarikat terbesar\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"100 bergambar jokowi pecahan redenominasi uang\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"agar himbau kiyai modus mui operandi pki pusat rapid test \
tolak ustadz\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"adidas and free from get hurry shoes\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"benda bermagnet corona lengan menempel penerima vaksin\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bandung cahya corona info kawaluyaan pasien rekanrekan rshs \
rujukan suspect udah virus\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bandung covid19 info ppi pussenif supratman vaksinasi\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"agustus daftar indonesia kartu pintar tanggal\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"air dapat daun katarak rebusan sembuhkan siri\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"covid19 dulu fadilah kena mantan menkes siti\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"100 covid19 gratis internet isi kuota pandemi tanpa \
ulang\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"akun bupati indramayu mengatasnamakan whatsapp\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"besarbesaran info jabodetabek kejaksaan libatkan masker pemda \
razia\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bakteri bukan covid19 diperkuat hipoksia italia kementerian \
kesehatan melainkan mnyebabkan peradangan radiasi virus\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"akomodasi arab bayar belum haji indonesia jemaah saudi \
tolak\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bandung covid19 dunia hatihati kota meninggal terpapar \
warga\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"medsos pemerintah sadap telepon warga\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"broadcast bssn facebook pantau rekam telepon twitter\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"berantai corona penyebaran pesan puncak\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"china indonesia jaminan kalimantan minta pulau utang\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"arab arti buku corona diciptakan huruf iqra kebohongan penuh \
zaman\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"baru cina indonesia lewat masker masuk menyebar penyakit\"\>",
     "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"cimahi covid19 disebutkan foto kabur pasien positif rumah \
sakit tersebar wanita\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"beirut lebanon ledakan rudal serangan versi video\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"benarkah kanker konsumsi lambung mengakibatkan pakis \
sayur\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"disuntik duluan jokowi mau tak vaksin\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"0817 akibat disuntik gresik kasdim mayor meninggal riyadi \
siangnya sugeng vaksin\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"almaidah arti berubah ide menjadi mulai nusantara pemimpin \
quran realisasikan setia surat teman\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"2020 april area bandung cibiru cileunyi cimahi kamil lembang \
lockdown maret ridwan\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"75gb internet kuota subsidi\"\>", "\[Rule]", "\<\"HOAX\"\>"}],
    ",", 
   RowBox[{"\<\"bandung covid19 dipenuhi meninggal pasien rshs rumah sakit \
ugd\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"130 bri hadiah juta rupiah sebesar tahun tunai uang \
ulang\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"disuntik pingsan pria sesudah vaksin video\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"arab bahasa dihapus kurikulum mata pai pelajaran\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"adalah asri babi hup jenama leong malaysia masak melaka \
minyak penternak produk syarikat terbesar\"\>", "\[Rule]", "\<\"HOAX\"\>"}], 
   ",", 
   RowBox[{"\<\"nusantara pendaftaran vaksin\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"1000 arya bima diberi gds gelar lingkungan menyemprot meter \
radius razia sanksi siswa terjaring\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"gratis kuota perayaan tahun tawaran ulang whatsapp\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"1012 2020 april berhenti hari himbauan tanggal total\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"3050 5080 air anakanak corona hangat jaga kali kementerian \
kesehatan lembab minumlah pemberitahuan serius tenggorokan virus\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"100 data gelar internet isi promosi tanpa tokopedia \
ulang\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bola covid19 diduga hilang jenazah mata pasien probolinggo \
video\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"foto hijab kartini memakai\"\>", "\[Rule]", "\<\"HOAX\"\>"}], 
   ",", 
   RowBox[{"\<\"covid19 dokter hari namanama rilis sama wafat\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"anggrek apartemen corona pasien taman virus\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"china himbauan kbri makanan mengkonsumsi produk\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"gratis guru laptop pemerintah sediakan siswa\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bagikan farma juta ke50 kimia rupiah uang ultah\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"20000 coronavirus hindari lebih membunuh minta pasien \
pengadilan penyebaran persetujuan tiongkok virus\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"alamat corona meninggal pasien positif rshs\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"aliansi berbahaya covid19 dokter dunia penyataan\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"2021 china ikut juta pns tes warga\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"ajak artikel bangun brigjen covid hadapi mardjo \
mengatasnamakan optimisme purn subiandono tni warga\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"175 berbahaya divaksinkan indonesia juta rakyat sinovac \
ternyata vaksin\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"baru biaya indonesia kapolri mantap terbaru tilang\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"anaknya diri disebabkan gantung ibu kedua lockdown video\"\>",
     "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"5500000 bantuan bjb finansial sosial\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"600 bahan bakar gas gratis isi ribu senilai voucher\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"aliansi berbahaya covid19 dokter eropa lintas negara \
pernyataan\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"ayam bahan burger kfc konsumsi layak sisanya\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"daftar indonesia kementrian kendaraan keuangan lelang \
noneksekusi republik\"\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"co2 keracunan manusia masker penggunaan sebabkan\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"berakhirnya kopit proyek tanggal\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"akun cirebon dprd ketua kota mengatasnamakan wakil whatsapp\"\
\>", "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"dini divaksin jangka mati siapsiap tahun waktu\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"ajid ambruk bangunan demi foto jihyo selamatkan terobos\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"bandung kamil kota lockdown melakukan ridwan utusan\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"189 juta link pertamina sms subsidi via\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"800000 alfamart orang tawarkan voucher\"\>", 
    "\[Rule]", "\<\"HOAX\"\>"}], ",", 
   RowBox[{"\<\"diskominfo jabar kerja lowongan\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"corona daerah kemenkes penting siagakan virus waspada\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"dana galang palestina\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"arah bangsa eceran hingga jokowi kehilangan kelas ketum \
legalkan miras muhammadiyah\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"2021 championship ditutup garut gelar icf jalan kota menuju \
oktober\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung corona kota medis puskesmas tenaga terpapar \
virus\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"700 covid19 dimakamakan hasil jenazah lebih negatif secara \
swab ternyata\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"hak kartu konsumen melanggar memungkinkan pencetakan vaksin\"\
\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"1012 2020 april besar jabar patroli polda rute skala \
tanggal\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"desa gegara guru jadi jalan kemarahan perangkat posting rusak \
sasaran sukabumi\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandara bus china dijemput langsung puluhan selasa soetta \
sore tiba warga\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"118 cipularang kembali longsor pinggir tol\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"antapani bandung covid19 ditutup karyawannya minimarket \
positif\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"10gb belajar harga kuota rp10 telkomsel\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"100150ribu 2020 barat bermasker denda jawa juli kena mulai \
tempat umum\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"australia balik buronan hrs indonesia luncurkan mantan media \
menyebut moral pornografi revolusi\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung cimaung covid19 ditutup gunung kabupaten kecamatan \
merah puntang wisata zona\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"aplikasi kominfo lindungi luncurkan peduli\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung berantai kabupaten masker penggunaan pesan razia\"\>",
     "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"asn covid19 ditutup gedung jabar lebih orang positif sate \
setda terindikasi\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung corona hasan isolasi pasien sadikin terduga \
virus\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"cabe impor ribu ton\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"belanja credit dapatkan event lazada pocket rp150000 sebesar \
share\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"cimahi corona personel positif pudikom tni\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bangkitkan hip keluarkan khawatir komunis maklumat mui paham \
ruu tolak\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"berikan corona dispenda insentif kotakabupaten melanda pbb \
tagihan\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"baru china hanta muncul virus\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"akibat bandung bmkg gempa lembang mitigasi pentingnya potensi \
sesar tekankan waspada\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"2021 dibuka jabar januari kamil ridwan sebut sekolah\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung covid19 ratusan secapa siswa terpapar\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung corona ditutup kota pasar pedagang positif\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"ade alquran armando perintah sholat tak waktu\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"corona dua indonesia orang positif virus\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"9999 antiseptic betadine covid19 detik efektif membunuh \
povidone terbukti virus\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"anak bantuan beasiswa darurat kecil pedagang ppkm terdampak\"\
\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"arak bali disahkan gubernur hingga industri jokowi kasih \
presiden terima tuak\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"arab haji indonesia kedutaan klarifikasi kuota saudi \
surat\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"covid19 india indonesia masuk meroket ratusan\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"berbagai china disambut ditolak inonesia negara ratusan turis\
\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"75000 baru hari ke75 kemenkeu kemerdekaan pecahan tahun \
terbitkan uang\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bakteri berbahaya enoki jamur kandung kementarian musnahkan \
pertanian\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"covid19 dosis guru lumpuh sukabumi usai vaksin\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung covid19 positif ratusan secapa siswa\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"2021 bersama cuti hari libur nasional perubahan tahun\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung bantuan covid19 kota modal pandemi pelaku tengah \
terima umkm usaha\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"calon cara cek covid19 gratis pedulilindungiid penerima \
vaksin website\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"2020 barat jawa juni perpanjang psbb\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bengkak dilarikan divaksin hingga igd jawa mual pasca pos \
sinovac wartawan\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bahaya berita cnn covid indonesia potensi vaksin video\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"8999900411 kalimat kitab mempermudah mencari nomer quran \
simpan\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"dirjen edaran kesehatan obat pelayanan pemanfaatan \
pemeliharaan surat tradisional\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"2017 buku corona ipa pelajaran tahun tertulis virus\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung ditutup jalan kembali kota proporsional psbb ruas \
terapkan\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung bus damri kota operasional pemberhentian pengumuman\"\
\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bandung covid19 jadwal kota pelaksanaan vakisnasi\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"besar buka eceran industri investasi izin jokowi miras \
pintu\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"berisi divaksin format isian keluhan masyarakat pemberitahuan \
penipuan pesan singkat\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"200 bergabung bonus buzzbreak dapatkan ribu tambahan \
uang\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bantu kecil pedagang sebarkan tolong\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"2453 cegah cetak data diblokir jasa kartu kebocoran produk \
vaksin\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"berhasil china ciptakan covid19 massal produksi siap vaksin\"\
\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bencana covid19 darurat hingga mei memperpanjang pemerintah \
status\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"jabar milenial vaksinasi\"\>", "\[Rule]", "\<\"BENAR\"\>"}], 
   ",", 
   RowBox[{"\<\"bayi bulan diduga imunisasi meninggal sukabumi usia \
viral\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"fitri idul izinkan jumat kamil laksanakan masjid pengurus \
ridwan solat\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"arief judi kasino legalkan puyono togel usulkan\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bekasi covid kehabisan parkiran pasien ruangan terlantar \
video\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"disnakertrans jabar kartu prakerja program\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"238 alatnya corona mahal tak terungkap tes virus wni \
wuhan\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"fadilah gagalkah herd imunity mantan menkes nidom siti\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bantuan kartu kembalikan kerja perpres peserta revisi uang \
wajib\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"bogor jadi lautan membara merah penyebaran sekali \
virusnya\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"dewan dua edaran ganjil gelombang genap indonesia jumat \
masjid sholat surat\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"babi bandung daging kabupaten pengungkapan penjualan\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"barat diprediksi jawa mter pantai potensi selatan terjadi \
timur tsunami\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"china corona daftarkan diri kamil klinis relawan ridwan uji \
vaksin virs\"\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"ade armando beragama dijalankan harus islam percaya syariat\"\
\>", "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"2021 berlaku elektronik maret mulai tilang\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"anak bejat cabuli depok guru muridnya ngaji\"\>", 
    "\[Rule]", "\<\"BENAR\"\>"}], ",", 
   RowBox[{"\<\"abk buang china hingga indonesia kapal kisah laut manusiawi \
mayatnya meninggal perlakukan\"\>", "\[Rule]", "\<\"BENAR\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.941866368708172*^9, 3.9418666793473186`*^9, 
  3.941866710246113*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"9a8cd1b6-fc41-b749-8cfa-5f96663a5796"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Splitting Train and Test for Validation", "Subsection",
 CellChangeTimes->{{3.9409783871475544`*^9, 
  3.9409783971925144`*^9}},ExpressionUUID->"1be27858-b4b3-8d4e-a446-\
8a1a1aba0433"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainingSet", ",", " ", "testSet"}], "}"}], " ", "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{
     RowBox[{"RandomSample", "[", "xy", "]"}], ",", " ", 
     RowBox[{"Floor", "[", 
      RowBox[{"0.8", "*", 
       RowBox[{"Length", "[", "xy", "]"}]}], "]"}]}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.9409610140346107`*^9, 3.940961017010948*^9}, {
  3.9409610514951096`*^9, 3.9409610563145695`*^9}, {3.9409611068226166`*^9, 
  3.9409611536486073`*^9}, {3.9418665481644917`*^9, 3.9418665507255*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"f5715c2a-99c6-7747-a2b9-62ff0d49fd2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Setting the model", "Subsection",
 CellChangeTimes->{{3.9409784018921337`*^9, 
  3.940978404016897*^9}},ExpressionUUID->"754fa6c8-5082-ca48-89f1-\
56462b26abf7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", " ", "=", " ", 
  RowBox[{"Classify", "[", "trainingSet", "]"}]}]], "Code",
 CellChangeTimes->{3.940961160046444*^9},
 CellLabel->"In[80]:=",ExpressionUUID->"82f65d35-7a40-d44c-b418-9d5c96efc7c8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Markov\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["128", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 128, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 128, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 977354774366526235|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5964736801689017400|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"" -> 1|>}, "MissingCode" -> Indeterminate, 
                    "Version" -> {14.1, 0}, "ID" -> 8928567103510828875, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {1}|>|>, "Boundaries" -> {{-0.5, 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 5412181252758401233, 
                    "Output" -> <|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{1.}}, 
                  "Precisions" -> {12.711896857730567`}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.030376057328109846`}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 8327193644222201350|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 1, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.03037605732810983}, 
                    "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    1141341796882961439|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {0.03037605732810983}, 
                   "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   1141341796882961439|>], "InputDimension" -> 0, 
                "OutputDimension" -> 1, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4243662280806592300|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.0837599, "MaxTrainingMemory" -> 192080, 
                  "DataMemory" -> 7072, "FunctionMemory" -> 42112, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 11, 29, 17, 58, 36.6183844`9.316274070321702}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-0.7608402945300776, -0.7608402945300776, \
-0.5102510733456789, -0.29285782483194944`, -0.28567613009884685`, \
-0.21599017280023688`, -0.16411757677520503`, -0.005973503207894077, 
                    0.04373386745093821, 0.05142288029632165, 
                    0.05324683311748989}, 
                   "LeftBoundary" -> -0.5102510733456789, "LeftScale" -> 
                   0.12529461059219937`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[0.2087302994725139, 0.08511048341462331], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 4270897793735380344|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 3288521766005748305, 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 4915787944086918060, 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "TextToNominalSequence", <|
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {14.1, 0}, "ID" -> 828642053410511469, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
             "Index" -> MachineLearning`SortedHashAssociation[<|
               "KeyHashes" -> CompressedData["
1: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

                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 1954515685523983380, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 8544993552421202197|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"BENAR" -> 1, "HOAX" -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 6919228972511305067, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 2359065663380275966|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "BENAR" -> 0.5076923076923077, "HOAX" -> 0.49230769230769234`|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "ClassPriors" -> <|1 -> 0.5076923076923077, 2 -> 0.49230769230769234`|>, 
      "LogCounts" -> CompressedData["
1:eJzFWj1oVEEQfjkJiBanghqEFCmDjYWlcO8EKwshTUBCAh4pIoKI2MpZiiKI
aGFKkxSpjgPBQkIgWFiKVkHShoNgkSKFCJoU04wM8/ftuxRZ9r19u7PfzHzf
vL03c+/h3HKrqqovx/9O2tGH9ur1B586r3pnP66vtLZ5X7ou9b3zedcrZR9q
vfbG28781r7bPnru2fbk7KPuqfraz6fPX29O1NZ9WfGmdajl+5Ts5+MlnLz+
pnkv3Ph6cPfKoYq/ZB89f+vM943+myPRTm1/6Pjj18k+Wu/Oj9H06sLfzmBp
bTj7ufrP39b50fmBmj8bv6X6Uf9qeKD5LDq/FM9e+719iV+8fBLFU+K1KB+j
/Yvmc2s8ofDm94m/qC1dT2j6GuU5zV4tnsfNa1q+R/1r1dEs71rt8d73xktW
70vtn1qqH7L+a+r57P41Pveul9UHNP97x0fzLspvTfPduPUWjXPT/vHi92T3
/aXH53/D+KA0n3vzI6ufpcZr/qT3WVQ8oPgMHR+SzqH5zXq+gOZ78pN0LqHF
U9Z/ko7SOJ7/3N6oHlrrUX5fq2+i5zRRe7z4Z+M9yz98HI/70vyO4hepTkPX
I9L1UnqLHk/+lfQli4f3/uDd/eVvv/6I+lWK/7XntXNhlF5oceTdX/b9p7R+
S9dJV6y/G2TXj57PZHnWmy9aXljtb+r3Cn6d8pvXDVa/eXkJHS/Z+ELjm41H
774Wz71cvzqcql/c7K6dvj1Vl9Zn733tuSz/ZfUNnX9oni6NlxcfDaem/NWU
fmp6JPV5vSHhJumHFe+m+VWaXzvfiNqTPe/3jpfqROu8vC7luNB+SHc1e7zf
N3jrG26f1x4vP1njy/v9iLZ+9DwcHV/Z8WgdsfId+YO3VDdqeYN6/87iUhpv
DQeUnmnfWaHqEs1/UX6O8qzGR8Sr1GZxyeovuv6x5m/0fnR/Ek4X93o7l/ut
mngChZ/1PCrrb1S+aG2p73m8/Yr9/QNHTk03
       "], "LogNorms" -> {6.999304577347511, 6.9096243312152925`}, 
      "VocabularyPosition" -> 
      MachineLearning`SortedHashAssociation[<|"KeyHashes" -> CompressedData["
1:eJwl1mOXGAYUBNDNxrZt27a9sZONubFt27ZtO2ljlLFtFEGb3px+uGd+wZt5
KYNDgrqECggIOBkYEPA9RUBowhCWcIQnAhGJRGSiEJVoRCcGMYlFbOIQl3jE
JwEJSURikpCUZCQnBSlJRWrSkJZ0pCcDGclEZrKQlWxkJwc5yUVu8pCXfOSn
AAUpRGGKUJRiFKcEJSlFacpQlnKUpwIVqURlqlCValSnBjUJoha1qUNd6lGf
BjSkEY1pQlOa0ZwWBNOSVrSmDW1pR3s60JFOdKYLIXSlG93pQU960Zs+9KUf
/RnAQAYxmCEMZRjDGcFIRjGaMYxlHOOZwEQmMZkpTGUa05nBTGYxmznMZR7z
WcBCFrGYJSxlGctZwUpWsZo1rGUd69nARjaxmS1sZRvb2cFOdrGbPexlH/s5
wEEOcZgjHOUYxznBSU5xmh/4kTOc5RznucBFLnGZK1zlJ37mF37lN37nGte5
wU1ucZs73OUe93nAQx7xmCc85RnPecFLXvGaN7zlHe/5wEf+4E/+4m8+8Zkv
fOUf/uUb348/FIGEJgxhCUd4IhCRSEQmClGJRnRiEJNYxCYOcYlHfBKQkEQk
JglJSUZyUpCSVKQmDWlJR3oykJFMZCYLWclGdnKQk1zkJg95yUd+ClCQQhSm
CEUpRnFKUJJSlKYMZSlHeSpQkUpUpgpVqUZ1alCTIGpRmzrUpR71aUBDGtGY
JjSlGc1pQTAtaUVr2tCWdrSnAx3pRGe+l3cIXelGd3rQk170pg996Ud/BjCQ
QQxmCEMZxnBGMJJRjGYMYxnHeCYwkUlMZgpTmcZ0ZjCTWcxmDnOZx3wWsJBF
LGYJS1nGclawklWsZg1rWcd6NrCRTWxmC1vZxnZ2sJNd7GYPe9nHfg5wkEMc
5ghHOcZxTnCSU5zmB37kDGc5x3kucJFLXOYKV/mJn/mFX/mN37nGdW5wk1vc
5g53ucd9HvCQRzzmCU95xnNe8JJXvOYNb3nHez7wkT/4k7/4m0985gtf+Yd/
+cb34Q9FIKEJQ1jCEZ4IRCQSkYlCVKIRnRjEJBaxiUNc4hGfBCQkEYlJQlKS
kZwUpCQVqUlDWtKRngxkJBOZyUJWspGdHOQkF7nJQ17ykZ8CFKQQhSlCUYpR
nBKUpBSlKUNZylGeClSkEpWpQlWqUZ0a1CSIWtSmDnWpR30a0JBGNKYJTWlG
c1oQTEta0Zo2tKUd7elARzrRmS6E0JVudKcHPelFb/rQl370ZwADGcRghjCU
YQxnBCMZxWjGMJZxjGcCE5nEZKYwlWlMZwYzmcVs5jCXecxnAQtZxGKWsJRl
LGcFK1nFatawlnWsZwMb2cRmtrCVbWxnBzvZxW72sJd97OcABznEYY5wlGMc
50Tg///wf1ugT30=
          "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
         Function[{
           MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$}, 
           Switch[
           MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$, {
             BlankSequence[String]}, 
            Data`StringHash[
            MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$,
              "Murmur3-64"], 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
            MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$, 
            PatternTest[
             Blank[], 
             MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
            
            Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
             MachineLearning`file163SortedHashAssociation`PackagePrivate`q = {
                Quotient[
                MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 
                Quotient[
                 Mod[
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^48], 2^32], 
                Quotient[
                 Mod[
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^32], 2^16], 
                Mod[
                MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 2^16]}; 
             MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                MachineLearning`PackageScope`ToPackedArray[
                MachineLearning`file163SortedHashAssociation`PackagePrivate`q]\
, {1, 3, 2}]; 
             MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
              Transpose[
                Flatten[
                MachineLearning`file163SortedHashAssociation`PackagePrivate`q,
                  1]]; Data`StringHash[
               FromCharacterCode[
                Abs[
                MachineLearning`file163SortedHashAssociation`PackagePrivate`q]\
], "Murmur3-64"]], 
            Blank[List], 
            Map[Switch[#, 
              Blank[String], 
              Data`StringHash[#, "Murmur3-64"], 
              PatternTest[
               Blank[], Developer`MachineIntegerQ], #, {
               PatternTest[
                BlankSequence[], Developer`MachineIntegerQ]}, 
              
              Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
               MachineLearning`file163SortedHashAssociation`PackagePrivate`q = {
                  Quotient[#, 2^48], 
                  Quotient[
                   Mod[#, 2^48], 2^32], 
                  Quotient[
                   Mod[#, 2^32], 2^16], 
                  Mod[#, 2^16]}; 
               MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
                Flatten[
                 MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q]; Data`StringHash[
                 FromCharacterCode[
                  Abs[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q]], "Murmur3-64"]], 
              Blank[], 
              Data`StringHash[
              ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
             MachineLearning`file163SortedHashAssociation`PackagePrivate`keys$\
]]], "Version" -> {14.1, 0}|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>,
          "Output" -> <|
          "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
             "Index" -> MachineLearning`SortedHashAssociation[<|
               "KeyHashes" -> CompressedData["
1:eJwl1mOXGAYUBNDNxrZt27a9sZONubFt27ZtO2ljlLFtFEGb3px+uGd+wZt5
KYNDgrqECggIOBkYEPA9RUBowhCWcIQnAhGJRGSiEJVoRCcGMYlFbOIQl3jE
JwEJSURikpCUZCQnBSlJRWrSkJZ0pCcDGclEZrKQlWxkJwc5yUVu8pCXfOSn
AAUpRGGKUJRiFKcEJSlFacpQlnKUpwIVqURlqlCValSnBjUJoha1qUNd6lGf
BjSkEY1pQlOa0ZwWBNOSVrSmDW1pR3s60JFOdKYLIXSlG93pQU960Zs+9KUf
/RnAQAYxmCEMZRjDGcFIRjGaMYxlHOOZwEQmMZkpTGUa05nBTGYxmznMZR7z
WcBCFrGYJSxlGctZwUpWsZo1rGUd69nARjaxmS1sZRvb2cFOdrGbPexlH/s5
wEEOcZgjHOUYxznBSU5xmh/4kTOc5RznucBFLnGZK1zlJ37mF37lN37nGte5
wU1ucZs73OUe93nAQx7xmCc85RnPecFLXvGaN7zlHe/5wEf+4E/+4m8+8Zkv
fOUf/uUb348/FIGEJgxhCUd4IhCRSEQmClGJRnRiEJNYxCYOcYlHfBKQkEQk
JglJSUZyUpCSVKQmDWlJR3oykJFMZCYLWclGdnKQk1zkJg95yUd+ClCQQhSm
CEUpRnFKUJJSlKYMZSlHeSpQkUpUpgpVqUZ1alCTIGpRmzrUpR71aUBDGtGY
JjSlGc1pQTAtaUVr2tCWdrSnAx3pRGe+l3cIXelGd3rQk170pg996Ud/BjCQ
QQxmCEMZxnBGMJJRjGYMYxnHeCYwkUlMZgpTmcZ0ZjCTWcxmDnOZx3wWsJBF
LGYJS1nGclawklWsZg1rWcd6NrCRTWxmC1vZxnZ2sJNd7GYPe9nHfg5wkEMc
5ghHOcZxTnCSU5zmB37kDGc5x3kucJFLXOYKV/mJn/mFX/mN37nGdW5wk1vc
5g53ucd9HvCQRzzmCU95xnNe8JJXvOYNb3nHez7wkT/4k7/4m0985gtf+Yd/
+cb34Q9FIKEJQ1jCEZ4IRCQSkYlCVKIRnRjEJBaxiUNc4hGfBCQkEYlJQlKS
kZwUpCQVqUlDWtKRngxkJBOZyUJWspGdHOQkF7nJQ17ykZ8CFKQQhSlCUYpR
nBKUpBSlKUNZylGeClSkEpWpQlWqUZ0a1CSIWtSmDnWpR30a0JBGNKYJTWlG
c1oQTEta0Zo2tKUd7elARzrRmS6E0JVudKcHPelFb/rQl370ZwADGcRghjCU
YQxnBCMZxWjGMJZxjGcCE5nEZKYwlWlMZwYzmcVs5jCXecxnAQtZxGKWsJRl
LGcFK1nFatawlnWsZwMb2cRmtrCVbWxnBzvZxW72sJd97OcABznEYY5wlGMc
50Tg///wf1ugT30=
                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 491500811320082459, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>, "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
         "Impossible", "StructurePreserving" -> False, "Missing" -> 
         "Imputed"|>], "Calibrator" -> None, "Method" -> "Markov", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "Order" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "AdditiveSmoothing" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
        "MinimumTokenCount" -> <|"Value" -> 0, "Options" -> <||>|>, 
        "ExcludedTokens" -> <|"Value" -> {}, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Configurations" -> 
      Dataset[<|<|
          "Value" -> "Markov", 
           "Options" -> <|
            "Order" -> <|"Value" -> Automatic|>, 
             "AdditiveSmoothing" -> <|"Value" -> 0.1|>, 
             "MinimumTokenCount" -> <|"Value" -> Automatic|>, 
             "ExcludedTokens" -> <|"Value" -> {}|>|>, "NaiveImputer" -> 
           Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4], 
           TypeSystem`UnknownType, TypeSystem`UnknownType}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
      Dataset[<|"Configuration" -> {
          "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
           "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}, 
         "ModelUtility" -> Missing[]|>, 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`UnknownType}], <||>], "InputDimension" -> 
      Rational[76, 5], "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
    "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "bakteri bukan covid19 diperkuat hipoksia italia kementerian \
kesehatan melainkan mnyebabkan peradangan radiasi virus"}, "ID" -> 
           302169982824646901|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.7232278, 
      "MaxTrainingMemory" -> 6748544, "DataMemory" -> 23472, "FunctionMemory" -> 
      173600, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 11, 29, 17, 58, 37.2039006`9.32316336361384}, 
        "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.940961160490309*^9, 3.940961188850336*^9}, 
   3.940987251800991*^9, 3.941866560916174*^9, 3.941866717242193*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"c0e498ba-753e-d744-ab37-926d5fca18d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"samplePrediction", " ", "=", " ", 
  RowBox[{"classifier", "[", 
   RowBox[{"{", "\"\<Jokowi makan sapi\>\"", "}"}], "]"}]}]], "Code",
 CellChangeTimes->{3.9409787829495544`*^9},
 CellLabel->"In[81]:=",ExpressionUUID->"7a92ca6d-5749-4f43-b50e-f5619a2610a7"],

Cell[BoxData[
 RowBox[{"{", "\<\"BENAR\"\>", "}"}]], "Output",
 CellChangeTimes->{3.9409787835820827`*^9, 3.9409872522069416`*^9, 
  3.9418667210056934`*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"1c22567d-9f9b-8143-87f0-833200b3a06f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"samplePrediction", " ", "=", " ", 
  RowBox[{"classifier", "[", 
   RowBox[{
   "{", "\"\<Covid 19 itu adalah berita bohong jangan percaya\>\"", "}"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.9409787865186024`*^9, 3.9409787969745636`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"439cada6-37b7-4242-a2a7-2a54e029f749"],

Cell[BoxData[
 RowBox[{"{", "\<\"BENAR\"\>", "}"}]], "Output",
 CellChangeTimes->{3.94097879731979*^9, 3.940987252227419*^9, 
  3.94186672228631*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"4d775013-c052-d54b-92ff-4a992032b4d9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Model Evaluation", "Subsection",
 CellChangeTimes->{{3.9409788076199036`*^9, 
  3.940978811865906*^9}},ExpressionUUID->"5520d230-7628-a647-9f67-\
57894c7f6cdd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"accuracy", " ", "=", " ", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", " ", "testSet", ",", " ", "\"\<Accuracy\>\""}], 
   "]"}]}]], "Code",
 CellChangeTimes->{3.9409611952260036`*^9},
 CellLabel->"In[83]:=",ExpressionUUID->"75a04f76-cde6-9645-b3fa-ba8da842b8c1"],

Cell[BoxData["0.75`"], "Output",
 CellChangeTimes->{3.940961195818838*^9, 3.940987252262953*^9, 
  3.941866725682873*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"76cc063c-3a31-ee46-8b42-dc44bf78aa5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evalMarkov", " ", "=", " ", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", " ", "testSet"}], "]"}]}]], "Code",
 CellChangeTimes->{
  3.9409611996206665`*^9, {3.9409612921111317`*^9, 3.9409612965603237`*^9}, {
   3.9409788230260525`*^9, 3.9409788721725483`*^9}, {3.940979552199087*^9, 
   3.940979555767992*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"fda7feea-a81f-3e41-a13d-ccfd2d0777e6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "Markov",ExpressionUUID->
                 "3437cb6e-1a68-1d40-87fa-26c8e9ef4435"],
                TextCell["Markov"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "32"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"75.", "8."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[75.`3., 7.7771377104782057899`3.]], ")"}], "\"%\"",
                  "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"53.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[53.125`3., 8.9627083590303477934`3.]], ")"}], 
                 "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.3822551087439475803`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1286482038393163552`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", "0.12495870106531487`3.", 
                   "\", \"", "0.6395515164225802351`3.", "\"]\""}, 
                  "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.12495870106531487`3., 
                   ", ", 0.6395515164225802351`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9616670693337008302`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.3305008848682251532`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.3006652995972505238`3.", "\", \"", 
                   "1.6226688390701511366`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.3006652995972505238`3., 
                   ", ", 1.6226688390701511366`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.87`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"724.`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                 FractionBox["\"Examples\"", "\"Seconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{0.9149481719037645, 0.7970553973691279, 
                  0.47950839508804194`}, {1., 0.42, 0.}}, {{
                  0.8978700888752068, 0.5214532201704827, 
                  0.005084762522782647}, {0.9149481719037645, 
                  0.7970553973691279, 0.47950839508804194`}}}, {{0, 0}, {2, 
                  2}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"BENAR\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.7333333333333333`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.7333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "BENAR", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7333333333333333}], 
                    Row[{"Recall = ", 0.7333333333333333}], 
                    Row[{"FScore = ", 0.7333333333333333}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"HOAX\"", 
                    "\" misclassified as \"", "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.26666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.23529411764705882`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "HOAX", " misclassified as ", 
                    "BENAR"}], 
                    Row[{"Column fraction = ", 0.26666666666666666`}], 
                    Row[{"Row fraction = ", 0.23529411764705882`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"BENAR\"", 
                    "\" misclassified as \"", "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.23529411764705882`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.26666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "BENAR", " misclassified as ", 
                    "HOAX"}], 
                    Row[{"Column fraction = ", 0.23529411764705882`}], 
                    Row[{"Row fraction = ", 0.26666666666666666`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"HOAX\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7647058823529411`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.7647058823529411`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.7647058823529411`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "HOAX", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7647058823529411}], 
                    Row[{"Recall = ", 0.7647058823529411}], 
                    Row[{"FScore = ", 0.7647058823529411}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.7333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "BENAR"}], 
                    Row[{"Recall = ", 0.7333333333333333}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.7647058823529411`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{17, " example", "s", " of class ", "HOAX"}], 
                    Row[{"Recall = ", 0.7647058823529411}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " classified as ", "BENAR"}], 
                    Row[{"Precision = ", 0.7333333333333333}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7647058823529411`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{17, " example", "s", " classified as ", "HOAX"}], 
                    Row[{"Precision = ", 0.7647058823529411}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"BENAR\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"HOAX\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["15", TraditionalForm]}, {0.5, 
                    FormBox["17", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["17", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"BENAR\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"HOAX\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->181.2,
                 
                 Method->{
                  "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
                   "DefaultBoundaryStyle" -> Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 128, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 128, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 977354774366526235|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5964736801689017400|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"" -> 1|>}, "MissingCode" -> Indeterminate, 
                    "Version" -> {14.1, 0}, "ID" -> 8928567103510828875, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {1}|>|>, "Boundaries" -> {{-0.5, 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 5412181252758401233, 
                    "Output" -> <|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{1.}}, 
                    "Precisions" -> {12.711896857730567`}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.030376057328109846`}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 8327193644222201350|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 1, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.03037605732810983}, 
                    "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    1141341796882961439|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.03037605732810983}, 
                    "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    1141341796882961439|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 1, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4243662280806592300|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.0837599, "MaxTrainingMemory" -> 
                    192080, "DataMemory" -> 7072, "FunctionMemory" -> 42112, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 11, 29, 17, 58, 36.6183844`9.316274070321702}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-0.7608402945300776, -0.7608402945300776, \
-0.5102510733456789, -0.29285782483194944`, -0.28567613009884685`, \
-0.21599017280023688`, -0.16411757677520503`, -0.005973503207894077, 
                    0.04373386745093821, 0.05142288029632165, 
                    0.05324683311748989}, 
                    "LeftBoundary" -> -0.5102510733456789, "LeftScale" -> 
                    0.12529461059219937`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[0.2087302994725139, 0.08511048341462331], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 4270897793735380344|>], 
              MachineLearning`MLProcessor[
              "ToLowerCase", <|
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 3288521766005748305, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "RemoveDiacritics", <|
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 4915787944086918060, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "TextToNominalSequence", <|
               "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                "Tokens" -> {{
                  " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                   "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{",
                    "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                  ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                   ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                  "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                "Version" -> {14.1, 0}, "ID" -> 828642053410511469, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "NoninvertibleIntegerEncodeNominalSequence", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                "Index" -> 
                MachineLearning`SortedHashAssociation[<|
                  "KeyHashes" -> CompressedData["
1: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

                    "], "Values" -> None, "DefaultValue" -> -1, 
                   "HashFunction" -> 
                   Function[{
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], "MissingCode" -> 0, 
                "Version" -> {14.1, 0}, "ID" -> 1954515685523983380, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>]},
             "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 8544993552421202197|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"BENAR" -> 1, "HOAX" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 6919228972511305067, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 2359065663380275966|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "BENAR" -> 0.5076923076923077, "HOAX" -> 0.49230769230769234`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "ClassPriors" -> <|
          1 -> 0.5076923076923077, 2 -> 0.49230769230769234`|>, 
         "LogCounts" -> CompressedData["
1:eJzFWj1oVEEQfjkJiBanghqEFCmDjYWlcO8EKwshTUBCAh4pIoKI2MpZiiKI
aGFKkxSpjgPBQkIgWFiKVkHShoNgkSKFCJoU04wM8/ftuxRZ9r19u7PfzHzf
vL03c+/h3HKrqqovx/9O2tGH9ur1B586r3pnP66vtLZ5X7ou9b3zedcrZR9q
vfbG28781r7bPnru2fbk7KPuqfraz6fPX29O1NZ9WfGmdajl+5Ts5+MlnLz+
pnkv3Ph6cPfKoYq/ZB89f+vM943+myPRTm1/6Pjj18k+Wu/Oj9H06sLfzmBp
bTj7ufrP39b50fmBmj8bv6X6Uf9qeKD5LDq/FM9e+719iV+8fBLFU+K1KB+j
/Yvmc2s8ofDm94m/qC1dT2j6GuU5zV4tnsfNa1q+R/1r1dEs71rt8d73xktW
70vtn1qqH7L+a+r57P41Pveul9UHNP97x0fzLspvTfPduPUWjXPT/vHi92T3
/aXH53/D+KA0n3vzI6ufpcZr/qT3WVQ8oPgMHR+SzqH5zXq+gOZ78pN0LqHF
U9Z/ko7SOJ7/3N6oHlrrUX5fq2+i5zRRe7z4Z+M9yz98HI/70vyO4hepTkPX
I9L1UnqLHk/+lfQli4f3/uDd/eVvv/6I+lWK/7XntXNhlF5oceTdX/b9p7R+
S9dJV6y/G2TXj57PZHnWmy9aXljtb+r3Cn6d8pvXDVa/eXkJHS/Z+ELjm41H
774Wz71cvzqcql/c7K6dvj1Vl9Zn733tuSz/ZfUNnX9oni6NlxcfDaem/NWU
fmp6JPV5vSHhJumHFe+m+VWaXzvfiNqTPe/3jpfqROu8vC7luNB+SHc1e7zf
N3jrG26f1x4vP1njy/v9iLZ+9DwcHV/Z8WgdsfId+YO3VDdqeYN6/87iUhpv
DQeUnmnfWaHqEs1/UX6O8qzGR8Sr1GZxyeovuv6x5m/0fnR/Ek4X93o7l/ut
mngChZ/1PCrrb1S+aG2p73m8/Yr9/QNHTk03
          "], "LogNorms" -> {6.999304577347511, 6.9096243312152925`}, 
         "VocabularyPosition" -> 
         MachineLearning`SortedHashAssociation[<|
           "KeyHashes" -> CompressedData["
1:eJwl1mOXGAYUBNDNxrZt27a9sZONubFt27ZtO2ljlLFtFEGb3px+uGd+wZt5
KYNDgrqECggIOBkYEPA9RUBowhCWcIQnAhGJRGSiEJVoRCcGMYlFbOIQl3jE
JwEJSURikpCUZCQnBSlJRWrSkJZ0pCcDGclEZrKQlWxkJwc5yUVu8pCXfOSn
AAUpRGGKUJRiFKcEJSlFacpQlnKUpwIVqURlqlCValSnBjUJoha1qUNd6lGf
BjSkEY1pQlOa0ZwWBNOSVrSmDW1pR3s60JFOdKYLIXSlG93pQU960Zs+9KUf
/RnAQAYxmCEMZRjDGcFIRjGaMYxlHOOZwEQmMZkpTGUa05nBTGYxmznMZR7z
WcBCFrGYJSxlGctZwUpWsZo1rGUd69nARjaxmS1sZRvb2cFOdrGbPexlH/s5
wEEOcZgjHOUYxznBSU5xmh/4kTOc5RznucBFLnGZK1zlJ37mF37lN37nGte5
wU1ucZs73OUe93nAQx7xmCc85RnPecFLXvGaN7zlHe/5wEf+4E/+4m8+8Zkv
fOUf/uUb348/FIGEJgxhCUd4IhCRSEQmClGJRnRiEJNYxCYOcYlHfBKQkEQk
JglJSUZyUpCSVKQmDWlJR3oykJFMZCYLWclGdnKQk1zkJg95yUd+ClCQQhSm
CEUpRnFKUJJSlKYMZSlHeSpQkUpUpgpVqUZ1alCTIGpRmzrUpR71aUBDGtGY
JjSlGc1pQTAtaUVr2tCWdrSnAx3pRGe+l3cIXelGd3rQk170pg996Ud/BjCQ
QQxmCEMZxnBGMJJRjGYMYxnHeCYwkUlMZgpTmcZ0ZjCTWcxmDnOZx3wWsJBF
LGYJS1nGclawklWsZg1rWcd6NrCRTWxmC1vZxnZ2sJNd7GYPe9nHfg5wkEMc
5ghHOcZxTnCSU5zmB37kDGc5x3kucJFLXOYKV/mJn/mFX/mN37nGdW5wk1vc
5g53ucd9HvCQRzzmCU95xnNe8JJXvOYNb3nHez7wkT/4k7/4m0985gtf+Yd/
+cb34Q9FIKEJQ1jCEZ4IRCQSkYlCVKIRnRjEJBaxiUNc4hGfBCQkEYlJQlKS
kZwUpCQVqUlDWtKRngxkJBOZyUJWspGdHOQkF7nJQ17ykZ8CFKQQhSlCUYpR
nBKUpBSlKUNZylGeClSkEpWpQlWqUZ0a1CSIWtSmDnWpR30a0JBGNKYJTWlG
c1oQTEta0Zo2tKUd7elARzrRmS6E0JVudKcHPelFb/rQl370ZwADGcRghjCU
YQxnBCMZxWjGMJZxjGcCE5nEZKYwlWlMZwYzmcVs5jCXecxnAQtZxGKWsJRl
LGcFK1nFatawlnWsZwMb2cRmtrCVbWxnBzvZxW72sJd97OcABznEYY5wlGMc
50Tg///wf1ugT30=
             "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
            Function[{
              MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$}, 
              Switch[
              MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, {
                BlankSequence[String]}, 
               Data`StringHash[
               MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, "Murmur3-64"], 
               PatternTest[
                Blank[], 
                MachineLearning`PackageScope`PackedArrayQ[#, Integer, 1]& ], 
               MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, 
               PatternTest[
                Blank[], 
                MachineLearning`PackageScope`PackedArrayQ[#, Integer, 2]& ], 
               
               Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                MachineLearning`file163SortedHashAssociation`PackagePrivate`q = {
                   Quotient[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                   Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                   Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                   Mod[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
                 Transpose[
                   MachineLearning`PackageScope`ToPackedArray[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                MachineLearning`file163SortedHashAssociation`PackagePrivate`q = 
                 Transpose[
                   Flatten[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                  FromCharacterCode[
                   Abs[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
               Blank[List], 
               Map[Switch[#, 
                 Blank[String], 
                 Data`StringHash[#, "Murmur3-64"], 
                 PatternTest[
                  Blank[], Developer`MachineIntegerQ], #, {
                  PatternTest[
                   BlankSequence[], Developer`MachineIntegerQ]}, 
                 
                 Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
q = Flatten[MachineLearning`file163SortedHashAssociation`PackagePrivate`q]; 
                  Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                 Blank[], 
                 Data`StringHash[
                 ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$]]], "Version" -> {14.1, 0}|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "NoninvertibleIntegerEncodeNominalSequence", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                "Index" -> 
                MachineLearning`SortedHashAssociation[<|
                  "KeyHashes" -> CompressedData["
1:eJwl1mOXGAYUBNDNxrZt27a9sZONubFt27ZtO2ljlLFtFEGb3px+uGd+wZt5
KYNDgrqECggIOBkYEPA9RUBowhCWcIQnAhGJRGSiEJVoRCcGMYlFbOIQl3jE
JwEJSURikpCUZCQnBSlJRWrSkJZ0pCcDGclEZrKQlWxkJwc5yUVu8pCXfOSn
AAUpRGGKUJRiFKcEJSlFacpQlnKUpwIVqURlqlCValSnBjUJoha1qUNd6lGf
BjSkEY1pQlOa0ZwWBNOSVrSmDW1pR3s60JFOdKYLIXSlG93pQU960Zs+9KUf
/RnAQAYxmCEMZRjDGcFIRjGaMYxlHOOZwEQmMZkpTGUa05nBTGYxmznMZR7z
WcBCFrGYJSxlGctZwUpWsZo1rGUd69nARjaxmS1sZRvb2cFOdrGbPexlH/s5
wEEOcZgjHOUYxznBSU5xmh/4kTOc5RznucBFLnGZK1zlJ37mF37lN37nGte5
wU1ucZs73OUe93nAQx7xmCc85RnPecFLXvGaN7zlHe/5wEf+4E/+4m8+8Zkv
fOUf/uUb348/FIGEJgxhCUd4IhCRSEQmClGJRnRiEJNYxCYOcYlHfBKQkEQk
JglJSUZyUpCSVKQmDWlJR3oykJFMZCYLWclGdnKQk1zkJg95yUd+ClCQQhSm
CEUpRnFKUJJSlKYMZSlHeSpQkUpUpgpVqUZ1alCTIGpRmzrUpR71aUBDGtGY
JjSlGc1pQTAtaUVr2tCWdrSnAx3pRGe+l3cIXelGd3rQk170pg996Ud/BjCQ
QQxmCEMZxnBGMJJRjGYMYxnHeCYwkUlMZgpTmcZ0ZjCTWcxmDnOZx3wWsJBF
LGYJS1nGclawklWsZg1rWcd6NrCRTWxmC1vZxnZ2sJNd7GYPe9nHfg5wkEMc
5ghHOcZxTnCSU5zmB37kDGc5x3kucJFLXOYKV/mJn/mFX/mN37nGdW5wk1vc
5g53ucd9HvCQRzzmCU95xnNe8JJXvOYNb3nHez7wkT/4k7/4m0985gtf+Yd/
+cb34Q9FIKEJQ1jCEZ4IRCQSkYlCVKIRnRjEJBaxiUNc4hGfBCQkEYlJQlKS
kZwUpCQVqUlDWtKRngxkJBOZyUJWspGdHOQkF7nJQ17ykZ8CFKQQhSlCUYpR
nBKUpBSlKUNZylGeClSkEpWpQlWqUZ0a1CSIWtSmDnWpR30a0JBGNKYJTWlG
c1oQTEta0Zo2tKUd7elARzrRmS6E0JVudKcHPelFb/rQl370ZwADGcRghjCU
YQxnBCMZxWjGMJZxjGcCE5nEZKYwlWlMZwYzmcVs5jCXecxnAQtZxGKWsJRl
LGcFK1nFatawlnWsZwMb2cRmtrCVbWxnBzvZxW72sJd97OcABznEYY5wlGMc
50Tg///wf1ugT30=
                    "], "Values" -> None, "DefaultValue" -> -1, 
                   "HashFunction" -> 
                   Function[{
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], "MissingCode" -> 0, 
                "Version" -> {14.1, 0}, "ID" -> 491500811320082459, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>, 
                "Key" -> "f1", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
            "Missing" -> "Imputed"|>], "Calibrator" -> None, "Method" -> 
         "Markov", "PostProcessor" -> MachineLearning`MLProcessor["Identity"],
          "Options" -> <|
          "Order" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "AdditiveSmoothing" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
           "MinimumTokenCount" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "ExcludedTokens" -> <|"Value" -> {}, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Configurations" -> 
         Dataset[<|<|
             "Value" -> "Markov", 
              "Options" -> <|
               "Order" -> <|"Value" -> Automatic|>, 
                "AdditiveSmoothing" -> <|"Value" -> 0.1|>, 
                "MinimumTokenCount" -> <|"Value" -> Automatic|>, 
                "ExcludedTokens" -> <|"Value" -> {}|>|>, "NaiveImputer" -> 
              Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
              Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
           TypeSystem`Assoc[
            
            TypeSystem`Struct[{
             "Value", "Options", "NaiveImputer", "EMIterations"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 
            TypeSystem`Assoc[
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
             TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
         Dataset[<|
           "Configuration" -> {
             "Markov", "Order" -> Automatic, "AdditiveSmoothing" -> 0.1, 
              "MinimumTokenCount" -> Automatic, "ExcludedTokens" -> {}}, 
            "ModelUtility" -> Missing[]|>, 
           TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`UnknownType}], <||>], "InputDimension" -> 
         Rational[76, 5], "OutputDimension" -> 1|>, "AnomalyDetector" -> None,
        "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {
               "bakteri bukan covid19 diperkuat hipoksia italia kementerian \
kesehatan melainkan mnyebabkan peradangan radiasi virus"}, "ID" -> 
              302169982824646901|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.7232278, 
         "MaxTrainingMemory" -> 6748544, "DataMemory" -> 23472, 
         "FunctionMemory" -> 173600, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 11, 29, 17, 58, 37.2039006`9.32316336361384}, 
           "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {
       "aplikasi kominfo lindungi luncurkan peduli", 
        "akun bupati indramayu mengatasnamakan whatsapp", 
        "cabe impor ribu ton", 
        "ajak artikel bangun brigjen covid hadapi mardjo mengatasnamakan \
optimisme purn subiandono tni warga", 
        "beirut lebanon ledakan rudal serangan versi video", 
        "118 cipularang kembali longsor pinggir tol", 
        "1000 arya bima diberi gds gelar lingkungan menyemprot meter radius \
razia sanksi siswa terjaring", 
        "bangkitkan hip keluarkan khawatir komunis maklumat mui paham ruu \
tolak", "jabar milenial vaksinasi", 
        "dini divaksin jangka mati siapsiap tahun waktu", 
        "disuntik duluan jokowi mau tak vaksin", 
        "100 covid19 gratis internet isi kuota pandemi tanpa ulang", 
        "bandung covid19 positif ratusan secapa siswa", 
        "238 alatnya corona mahal tak terungkap tes virus wni wuhan", 
        "200 kemendikbud kuota pulsa ribu subsidi", 
        "bandung corona ditutup kota pasar pedagang positif", 
        "2020 april area bandung cibiru cileunyi cimahi kamil lembang \
lockdown maret ridwan", 
        "bandung bantuan covid19 kota modal pandemi pelaku tengah terima umkm \
usaha", "desa gegara guru jadi jalan kemarahan perangkat posting rusak \
sasaran sukabumi", "75gb internet kuota subsidi", 
        "5500000 bantuan bjb finansial sosial", 
        "diskominfo jabar kerja lowongan", 
        "cimahi covid19 disebutkan foto kabur pasien positif rumah sakit \
tersebar wanita", "100 bergambar jokowi pecahan redenominasi uang", 
        "bagikan farma juta ke50 kimia rupiah uang ultah", 
        "ade armando beragama dijalankan harus islam percaya syariat", 
        "corona daerah kemenkes penting siagakan virus waspada", 
        "babi bandung daging kabupaten pengungkapan penjualan", 
        "covid19 dosis guru lumpuh sukabumi usai vaksin", 
        "ditengah jokowi kerumunan masker memakai tanpa tiongkok video warga",
         "air dapat daun katarak rebusan sembuhkan siri", 
        "ajid ambruk bangunan demi foto jihyo selamatkan terobos"}, 
      "Output" -> {
       "BENAR", "HOAX", "BENAR", "HOAX", "HOAX", "BENAR", "HOAX", "BENAR", 
        "BENAR", "HOAX", "HOAX", "HOAX", "BENAR", "BENAR", "HOAX", "BENAR", 
        "HOAX", "BENAR", "BENAR", "HOAX", "HOAX", "BENAR", "HOAX", "HOAX", 
        "HOAX", "BENAR", "BENAR", "BENAR", "BENAR", "HOAX", "HOAX", "HOAX"}|>,
     "Predictions" -> {
     "HOAX", "HOAX", "HOAX", "BENAR", "HOAX", "BENAR", "HOAX", "HOAX", 
      "BENAR", "BENAR", "HOAX", "HOAX", "BENAR", "HOAX", "HOAX", "BENAR", 
      "BENAR", "BENAR", "BENAR", "HOAX", "HOAX", "BENAR", "HOAX", "BENAR", 
      "HOAX", "BENAR", "BENAR", "BENAR", "BENAR", "HOAX", "HOAX", "HOAX"}, 
    "LogProbabilities" -> CompressedData["
1:eJwBEQLu/SFib1JlAgAAACAAAAACAAAASsx+QQO27L8KkohLhsLgvzR9PfFa
gibABOz5Kjwn6747ZQtilT7rv5vIzZhSz+G/DhD8YsT2079EyqpR6RH1v59x
uH3qaPe/+//xO3Pa0L8+SUeMzhvBv2Sf/HnWoADA7jltFQT59b+2Ys1E/7DS
v8IXEQ1F1hjATJK6pBd9YL+Kmp2+E2bSvwL3hv69MPa/D69LtsUXfr80++o2
KasTwOugKnz0Mue/a5t485sx5b+exD0iMYIwwAnvr32HKnK+g7l7xUvNQL+m
cMkLy00ewLm6ywkrRwnAN977jq8zpr8SRrwQhi72v0YGLKUIadK/NcHLTwCW
I7+UdFRoFp4hwKZyb0yMbU2/7OY8ARcQHMAhX6SjdTWcv76/K9w52AzA8BKm
F6aUhL+p7CyC0GsSwERAv/veiBnANIP5a9qxW79F8TmEcSASwMsJfztCKYa/
IJpySwwVr7+AX0ZctacGwFJxK5KbyRTA4oZiiba6dr9ii/r8MU6hv25qN9G1
OwvAOX3GvcvHHMAcJMqo25dIv0Ii+/MB9I6/+dtZ63vMEMDxy+2gKp7Bv99I
0bPAaADA3Vm7Ffyx4r/dRWbTvRfqv0p5C2eZkb6/ikPJcHd5AcC0huloVcAc
wB2JOE7sxUi/5kgCWMnWB8CfwSKRarGqv7p3jsX1bwjAfqKkKOO4qL/NehJj

     "], "CountMatrix" -> {{11, 4, 0}, {4, 13, 0}}, 
    "IndicesMatrix" -> {{{6, 9, 13, 16, 18, 19, 22, 26, 27, 28, 29}, {1, 3, 8,
        14}, {}}, {{4, 10, 17, 24}, {2, 5, 7, 11, 12, 15, 20, 21, 23, 25, 30, 
       31, 32}, {}}}, "ExtendedClasses" -> {"BENAR", "HOAX"}, "Weights" -> 
    SparseArray[Automatic, {32}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.001384203125, "SingleEvaluationTime" -> 
    0.0038755, "Version" -> {14.1, 0}|>]]], "Output",
 CellChangeTimes->{3.9409788733747616`*^9, 3.94097955707889*^9, 
  3.9409872526916103`*^9, 3.941866729691063*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"8f3f0f14-f0b5-b64e-a328-80fab7c06573"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"classifier", ",", " ", "testSet", ",", " ", "\"\<Precision\>\""}], 
  "]"}], "\n", 
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"classifier", ",", " ", "testSet", ",", " ", "\"\<Recall\>\""}], 
  "]"}], "\n", 
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"classifier", ",", " ", "testSet", ",", " ", "\"\<FScore\>\""}], 
  "]"}]}], "Code",
 CellChangeTimes->{
  3.9409612136232796`*^9, {3.9409788983286457`*^9, 3.9409789151783466`*^9}, {
   3.940978992802206*^9, 3.9409790224467487`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"a5fa2282-d7c9-9547-bc1c-17c8f1f19578"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"BENAR\"\>", "\[Rule]", "0.7333333333333333`"}], ",", 
   RowBox[{"\<\"HOAX\"\>", "\[Rule]", "0.7647058823529411`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.9409612145049343`*^9, {3.9409789036954327`*^9, 3.940978918558037*^9}, 
   3.940979022817255*^9, 3.940987252788292*^9, 3.941866732281681*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"6037f3b9-fb95-ce44-ab3e-e50ead4f0218"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"BENAR\"\>", "\[Rule]", "0.7333333333333333`"}], ",", 
   RowBox[{"\<\"HOAX\"\>", "\[Rule]", "0.7647058823529411`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.9409612145049343`*^9, {3.9409789036954327`*^9, 3.940978918558037*^9}, 
   3.940979022817255*^9, 3.940987252788292*^9, 3.941866732317335*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"8427fd42-effd-1144-8367-256c092069d0"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"BENAR\"\>", "\[Rule]", "0.7333333333333333`"}], ",", 
   RowBox[{"\<\"HOAX\"\>", "\[Rule]", "0.7647058823529411`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.9409612145049343`*^9, {3.9409789036954327`*^9, 3.940978918558037*^9}, 
   3.940979022817255*^9, 3.940987252788292*^9, 3.941866732348791*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"3379a618-856b-a748-b0de-d5348d5f99ae"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fine Tuning", "Subsection",
 CellChangeTimes->{{3.9409790674480743`*^9, 
  3.9409790689322605`*^9}},ExpressionUUID->"1312ce66-1c3d-b74c-af8f-\
41b27f69e0d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Try", " ", "different", " ", "methods"}], " ", "*)"}], "\n", 
  RowBox[{
   RowBox[{"classifierSVM", " ", "=", " ", 
    RowBox[{"Classify", "[", 
     RowBox[{"trainingSet", ",", " ", 
      RowBox[{"Method", " ", "->", " ", "\"\<SupportVectorMachine\>\""}]}], 
     "]"}]}], "\n", 
   RowBox[{"classifierRF", " ", "=", " ", 
    RowBox[{"Classify", "[", 
     RowBox[{"trainingSet", ",", " ", 
      RowBox[{"Method", " ", "->", " ", "\"\<RandomForest\>\""}]}], "]"}]}], 
   "\n", 
   RowBox[{"classifierNN", " ", "=", " ", 
    RowBox[{"Classify", "[", 
     RowBox[{"trainingSet", ",", " ", 
      RowBox[{"Method", " ", "->", " ", "\"\<NeuralNetwork\>\""}]}], "]"}]}], 
   "\n", 
   RowBox[{"classifierGB", " ", "=", " ", 
    RowBox[{"Classify", "[", 
     RowBox[{"trainingSet", ",", " ", 
      RowBox[{"Method", "->", "\"\<GradientBoostedTrees\>\""}]}], 
     "]"}]}]}]}]], "Code",
 CellChangeTimes->{
  3.940961222989708*^9, {3.9409790796474648`*^9, 3.9409791144571342`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"8a25ab35-ee6f-e34b-9a00-03d9ab5715f8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["128", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1185016, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", ClassifierFunction, 1185016, 
            7281945590428546646849115489680303321459923636749175636144, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 7281945590428546646849115489680303321459923636749175636144,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9409612309186726`*^9, 3.940979117388483*^9, 
  3.940987258651024*^9, 3.941866743441143*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"6a7a9ff8-f03a-454c-8a2a-9f04f1906bf7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["128", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 128, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 128, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 977354774366526235|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5964736801689017400|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"" -> 1|>}, "MissingCode" -> Indeterminate, 
                    "Version" -> {14.1, 0}, "ID" -> 8928567103510828875, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {1}|>|>, "Boundaries" -> {{-0.5, 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 5412181252758401233, 
                    "Output" -> <|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{1.}}, 
                  "Precisions" -> {12.711896857730567`}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.030376057328109846`}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 8327193644222201350|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 1, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.03037605732810983}, 
                    "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    1141341796882961439|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {0.03037605732810983}, 
                   "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   1141341796882961439|>], "InputDimension" -> 0, 
                "OutputDimension" -> 1, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4243662280806592300|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.3216273, "MaxTrainingMemory" -> 192400, 
                  "DataMemory" -> 7072, "FunctionMemory" -> 42112, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 11, 29, 17, 59, 3.7877306`8.330954063480174}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-0.7614146577694836, -0.5139022623780334, \
-0.29418083922150595`, -0.2844032148973443, -0.21537405792225203`, \
-0.16622376670095362`, -0.04324731154131704, -0.010562324555738908`, 
                    0.04602923805262181, 0.051683274830005226`, 
                    0.05306528819605039}, 
                   "LeftBoundary" -> -0.5139022623780334, "LeftScale" -> 
                   0.12375619769572511`, "LeftTailNorm" -> 
                   0.18181818181818182`|>], "Entropy" -> 
                Around[0.19441187580981376`, 0.07857385718948029], 
                "EntropySampleSize" -> 11|>], 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 4270897793735380344|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 3288521766005748305, 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 4915787944086918060, 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "TextToNominalSequence", <|
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {14.1, 0}, "ID" -> 8661128169745179370, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "NominalSequenceToTFIDFVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
             "Index" -> MachineLearning`SortedHashAssociation[<|
               "KeyHashes" -> CompressedData["
1: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

                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], 
             "InverseDocumentFrequency" -> CompressedData["
1:eJxTTMoPSmVkYGA4wsTAsPGT1PyqDGGHgaKLV1vbb1okQLY6mPhi5pbW1M1/
7Ym1N/vEjn2Xd3LD9aPTxLrvpJy905UPnDjddTf5PgMDOx+GOlz2EUsnXVVw
zK/mcHCZ+4Llvhoj1cKXXPdQO96p7Q5S4xVXeiFXPywd0Mu/1LJnt2acuvYW
3OmL2vFL63inVnzR2z2kmo+eXulFExtutApfUsOZXvmOXu4g1Rxc9Re9/Eeu
OLo8seXzQJcvlKZ7WL2Py35C7kG3Hxb/6OaS6k9C4U9s+4Ja+RaXPK3L9cFW
38Dil9J0H/Go4zCXLSvF8YCrvKFWvUHrcCTVfFLDndh0RKh+Jze+YfrE121r
E1zETHXzqR1e5JrDAAENpMYDqXx6hwOt6j169w+JdT96Px6XOLXdTWr7mtr1
Asw8WLkEc897y1//nPTYSE7PhNpT5KYDXO5HF6d1f4Dc9I3en4K1k9DDmdr5
ldL0Qcg+dH2k1uOUtq9g+p+5JTXee89E83CitTmExuFoVW7gGr+kVn4CAOoi
qz0=
              "], "Version" -> {14.1, 0}, "ID" -> 688510993045186295, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "DimensionReduceNumericalVector", <|
            "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Reducer" -> 
             DimensionReducerFunction[<|
               "ExampleNumber" -> 128, "Imputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Fill" -> CompressedData["
1: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
gnuBv8IQnVOis0hzo+o9qJqD/wW21G29
                    "], "Method" -> "Naive", "VectorLength" -> 708, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Type" -> "NumericalVector"|>], "RandomImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> CompressedData["
1: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
gnuBv8IQnVOis0hzo+o9qJqD/wW21G29
                    "], "StandardDeviation" -> CompressedData["
1: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
+7CIS6ddoI+wjJvjWyN/t1S9B1Vz8H8cUmK+
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 708, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Type" -> "NumericalVector"|>], "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Length" -> 708|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Preprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"|>], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], 
                "Model" -> <|"Matrix" -> CompressedData["
1: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
2KgAMz5vsr48kYCj0l3klVTmQDM7cIFqsQNX37RVVdIawwVxp6fk0rU4FRb2
pMH7DkoYfU2/LZuGZlLhGdKb+XjW/qLIIEcJiq18Vr/aUoQHmsnA6m4xrP/4
N//7ewXerV/xl23MgZMFGj12PRVgYWEXNWsZgvgjVqbccwYe1uz7qBRKT5BL
MBR5rUFC/NKouBtad5FYdtHcosGDgugV8Lug4vy4GDXlsaVgGg6Cz5Z/6mzd
AUIEzeZbHR0GglnIgp52+DkCKR0Na+OkOLHFQHGD24+dEKVHOSOueIn46bze
t7TP/ESBT+alDbJCxFuiObFyHDTEWIGFxg9LssT24KcijNq3iN1eTnb+jd/F
Trz0od43zkOgjMm1z3/PRbhTnH3E6tBFwtvR4iQePwFCWr32xSZVfkJ+usF3
k35p4lUp8ZiVWHbixwcfuNbWZ8QkZfdCnn07QxhXybrDIEpHDItMrC1x5CPY
Gw57WrSqE7hm/npLtIkTaS1W3B/hJaLu5hSmu18jfHunw3DM35z4dqB9qPm4
FJEzv4mBW1yK8GUs7+vneWOC8OwzBqnHxsShFEV2mp4bxPfRCjPbtS6E34PJ
hsuDZoREmYST5V9siHszTl1fQrQIuXkfDt2k1yK0fT7tbdvvTByJ1ckNKXAn
mvz+OCGQbUg4f7XD7nyMPcH9uzL51kNvAuvAdc1GuXjCyx+TbiEU0cRA3rq3
5/4OEe8NVdanBVQQmtR0x03DAomw7wfLkogDUTG3zGf1iQlx35IKgZJvH3Gw
xyQ6hd6WmKC29lfzuxThbMg3k0JhJ2JK3XOFgRxj4oeehpbtZjXiwNbH9Ngf
BoSXdh2KoRaOBE8Sn8GyHw6EuNcJQkhzjjChp29xOEaYSHiwyvzuqhnhbk+m
xub2VUIhXwxJQ5wi8Z2dMOGGiSrhuHrx1hFBAsFVuc+dTlWf8PDZId3eW/zE
Xj/x6wd77hLKfYzFf/CbElVZB/dclCSISwkaptX90oSWMKvI8xP0BEn1GnFL
FX3CYuqXBX4/U8LPWxObo7KaxJOnUz4rxhsT8oKnCNknjhNzXONHVWhViA1W
D4IMy5SI+/y9M15F6BFl6qtTIi+qEwzSRHOPOxkQKnL310nzmBEu5D4fZduV
Jh5mVmZYjmYgjr/t7QpSFSAGV12wiJrWIS4eqXvVTWJEuMpBokWkUCGqxnrV
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
EvT2fIVDZvZu+bNQ/Kq9361TJQdM1eiZ2MZsoKHuZ7LqYz+wKvJv8qI3hcfx
Wt/Mht0hn+3Udd6qdFxtkaIfUg0Fohjpgn5ZPdhKWKOXck+Cv0dt1HiPZ8CA
9b+vc6dS4fHLaqFuT018fqhJzp42DGzmDrsdD0qHb7l3y5nvGMPdXneyGbsw
vNPouybyNgEvOH+znBlIwuhI704pU1Ngp1HuGdAzxVTxuRJO5hT4wdG49KTU
C7/8CvlDxJWBpdE21O6nRKBntmigTt4Vjq4SUziR5CBr2rGp1meGkKMrWCXw
OwwfRTFRqv8fe+f9zvX7/n+jIVSkkJUQZYQkWc8TkVlWVkZm9t5777333iOb
iJ4nSihKZBWSNCTqVZQkffv+HZ/3T4+fHsfjcVzXed3P2/04j+N+HWyAsCY2
ENf1hfelLzZiZJNgNrHkoVlkLJ77oOeg9j4Sc7h/Xu83jMDTp4qNbK0yoeYA
6eYZo2woen2rSvSrH9BTL+cdWUiEtkzJlzOHstCiIWVA6V44vtI1bTN8WABs
vgyWL9XzcOmD5kte+Uo01qS+qxHfgd/X0vt49Yvxi5iIpDVzHK5+DIUqlmbo
dA5a3FisQaNgp1VBxijkOUX+XQw78PGbQhnPqEIw+q/xIuNICerkPDxMGZyO
3eKtSRd+l8Ngc8CGYqAnfhYLIHtzNh1eK2qedIprRYpzMvekVbvR9IF4dft0
KbiJeQrA7l3c53vM1nG+FfRS22NK/R6AX86+WoHpRgy4/Cy9nSwW6GhP/tzb
lwJvr9a+nOK/i+b3XZikTQtg7u4vQ+P9qVBt6frRV7EBfomvdPHPxOCu/0c7
CzFdSH4gyhtxuwxsH6e/Y5qIg01tXYrNpVxMJLUZ/RNkCpJByyyBMW54PlUk
OXPcGVhETGs2XlmiNtK/5g8Lwo0Lu63Ot7X/9YfBcUGlODzv9GtARtwIbKh+
OlKWlWKt2M5zC3DDlnP9ehuCLsj1ptz0bGAOnLr3q6kb0rFIjn38hSEX0Z9h
a5NzU4PQKJaWf25MihghF/T5vJIdsVr5Y5tVlwaxklLXZ9tDgBAjfkGcpzqM
8N+uuOthQVNC1bJqUpmeL6HCVpWsgyOCMGUYMX/reSWx1OWrcuZAOsG/ZoTY
vpFFlGh+ODf9tYa4/JTIxyLZTHzG0H0vfSCGaLSoID75YJSY/2dfw4DNNLGJ
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
d5PhiW7SlOlXIu4e6lLynxhGA44P8vudPfHXzPH64kgvOFCW+HROqwpdZHjV
VtzKgP6ixohKayF0Nq2GsIxGwZVQ0auurAlItO9IfcxUiHpnb0qRaGSDQynr
nm9yMgh7nchpGXdFarqDn3u/x4HBWnWmI3UM1tgnStwdDESfmwVxHtcTQCOX
WnVDxxk0b7ytFt8ywIWnnC+NQgPhiMPbZwpTthDCYGTuu5EAjBtfNpSXopGU
kbc/QrsIPl01/9r1j2NJi8tkKb5loWvtZ7LgE8EYLscWuVnqhiMWbytKHxDA
cfZbO/URHXDVHMnHMAuUiD6QL2Whh8xLpDcVlAMhWKpioq//Xy/4erRL+4kr
FLOzXH9SlgQeYgLzyWxuSHn9/PlfbY4ofFuZvnwrEn60F7aTtKfDg5Np+g+t
GqEJcvtuUgRhqaz6nOWrWLhy2V30ZFQZFPvl7sp+dMYgg1gOqd+FEHJjeCJu
Jg/vuev850BeA+6iIXkSEndx5BWDo8P1Qgy22Jrsr9aAZNlOl1eQiHNLUjR6
0pbYYnjoUeY9bxScLrfVb4/GBLaexPIbLiCwoHuqUNkRPxS5k5w6noNGCuSF
Wx2lcGZ7kJ/qSwTsmLEP/JQjYD1RhCds2Bc5I8sCrgs7QXhqbuHbO5Ko1/d1
nO+OOXxyPH7f6K0iknYXC32KssUFvwqSg3/cQC7cxY3X2B/eeb9eDN2n1f3h
PLviuU5dUM7dXLQ5adktO3at5s4RA/D2zXvjflAFiq/mOn/RSgPWH70HHC08
8bjZ3sJ1TwWUr1W0v/oxBs6wnP16mt0DfBoW67h3vCAmo2V2LyETO2MOXJW6
6wlqZrUCnrZFsCNvpmBmmgmVzNJfF+NjUKlrsl1UrBiXn+8EXJtMhmn+9mWV
LCfM0D354lyPEiwVjFYxMGfhw/7HjM5hcTjZ1vRgucQLLrA+Yq74nQz7ydPz
DrV2df+VV+XLsgyB2kd7L5+flkRBLogIOESFoto/W7Rk//XTBH+1rJAkNGNY
LExkswS+j9ZnU05Fg9GQnrNtehyyuEz3v7xWA4nfXK5Hpd2HG7vbWxZCLdDT
tXj+omYZPnq9K2wikQY5VwhjYzcAaMpG2NNuNoBbmqSEcXQalAmzjWaLxKFL
/4HAxI0GmFWYPTP9T6eXewY831Poov63tPQXPUWg7OaYn3jXC+n2LlPMMFfj
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
9b78tlq0o4zKXSP3wtGazussi7l40Zs4Zvy9AppTgho08mWQ61blVH1RAe6t
NaS0wHhw4Pu11HCvAzYvjQqpbj2Gq52/LftNfdDv4vR5Rap1sYf+nIJ7WJRJ
Pa0/dnd3J0FZf/pAd7oyyelS6qLPVX7SiTQBz86yX2LWBWo52WEShGjGm8ND
e5gIJsNGBUZ01wiu3pcYBRMFCIYdCukUV9RIV3vGGpVCxQj3GEJr6VVFSBlG
ySKXve+QpMiiF9P65EmCN1V+cGuykES5scJi4z5JfJVe46emDomSgqb4Z9WW
2AAzdbMe1U0Ca7XA0RPFBEJLO/m++1zXCd9ymgS+tt8mZC3Fn+BWkSH0n7lg
FVCiRvIyrBN9bnGDtNr54QjJ/ZfYAUEeFunsq4SxX0nhR0NYSG8yhui/pN0i
HGr/lVHcYUTYd1b63uVqJRL/uUdTJ/MFSTquM47xvDcJcT8dGQZpHUlp/wb1
eawKqf/QihdTvQohnjHl5VVNW4LjS84MPlZbUqmMo0LQliSpaDFabmXaj/DU
cZz34yd7QrAfyXCn0JV0pZD8LOc9E8J/D6LNj08bE1rfzp4a6vAl/WTOtVSX
CyQxF/UvTnVaEn5TDCTTPXEnhDbGG7b9CiHs7Up8UiuZQSC9I7Z4EVJInJ7t
NJVdU6SV0P3P+YcaCb684l7XBaNJYWry2ycX3UmnCwc1/5OwJb1Ir6dIrz1K
6nsk/nPpgwtJ0KPLNEVKhdDJVib2LMabJBtObZ9+3IZ0uibxGfmaPimfxBlV
x2hB0KlbzeX18SCU+g9l9my6E0TK/T+4jHMTundflbosyZDG3/HfvcllR5hO
Y/UvtyEQ2E5LHmex0SLVnRmUnzr+kLAsZvRN6NcdwnGP1lu6TGaEKudBmmOv
JUnCNEu2eT2PCL/cBJciKGxJIg/Jr5zOUyRF59M/3tRRIey7/3Nf+TlWAoHz
jfNIiylhyhGXo0/YEhY+iY9J+RmSXGV5iS71VoTn6c5WpNDzJA+lG9xU1Dqk
0fdHKD3KtUjNpx9vqvc+Jp07XEzV4qJPoLoQfNpN24xwNeZA4l0rW0KT0H8J
HWdVSBUek/fduNlIV8sE59jopUg+hl8jKGRNSL0/yz5eJpoTjlkt+J+O0Cb1
Oiluxi2YE+IFesizf1uRHtnsEfjCaEWa79i4ZmGpR+gb/UMuMipBSvUSe0kU
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
CLv7jCPa3ZiQlXiELXDICRWJuKWHgvxRL+5elk5kMiQUFFx9TmIPq8wxRmyc
1FAj8NeIf9gYrvWPnQjttUACjs/LsvZqMBvaQKkWFowLxwxTTpz3wf/e//Xf
+7/+e//X/7v3f/23/v9b//+t//936/+//ue//ue//uf/Xf/DEfc//uf1nv+5
0kX0//kf9T3/U7Hnf6r2/I/onv9p3PM/oy/+//4nYs//BP6H/3m9539U9vwP
y57/+bbnfzT3/A/Pf/if6D3/M7Hnf5z2/E/Dnv+hYf4f/9O753+4Zv/H/8zs
+R/7Pf8juOd/Rvf8j9ae/8nf8z8Ne/4nfs//BPwv/mdgz/88+F/8T96e/5nZ
8z+6e/6nfc//yO75n1N7/idjz//07PmfjT3/o7jnf47s+Z/UPf9zc8//UO75
n+A9//Nmz/+E7Pkfij3/o7bnf6b3/M/kf/ifuj3/I7Dnfzr3/I/Vnv8p3PM/
+/b8j8Ce/zn8H/5H6j/8D8+e/3m653/e7fkfvz3/E7Tnf0L3/E/6nv8J/F/8
j8We/+nf8z+je/6HeM//mO35n+w9/9O+53+6/8P/GO75HyK6//E/qXv+5+Ke
/6He8z+0e/7Hes//vN3zP6R7/odsz//07PmfjT3/Y7LnfxL2/I/Af/gf5T3/
07jnf3L/w/+82vM/J/b8T8Ce/zn6H/6Hec//sO75n7k9//Nuz/+M7vkf6T3/
M/K/+J9XHlvHP/cL9QW6TBjwsLhD7qVDh8lklfr8EjlSMoTFgZ1ThnOHXARI
yOujYrfSQPzMJ47i4kAwjLI20F9Xwcg/06yxYuIg/fdDSUJfKD587ERwntgc
nTxUi8cfJ+GTv12NKZth8OntSTIm2xR835Iq9nvLBdvI7R+eOtgCFYwNs4M7
/+qiKFBA1z8YeH9O3vxwOhwK/AqXXb9nAsczNavi1Ch48NKRyUIxAIVFA55M
yfzbWzVv0HV2RWGOW28j48Gxvv3AgvcjbdH4s60V4wURkH+uLiTIFgk8jZJz
5qsWcExRX9FVIg1o/lyG86uVEM7/egs+58GG+t008r/lwGZrbTkaEg82sWYL
rx+XYVyD8Hnd4SgIfPr8avVWGR66+cotzqEcLhl/r0iSCoLVs1/1BpyjsOt+
aLTEuWK88SVXm+BcKpYKa3QosOXjAANXbE59Gw6RxCZ2BBTjqnoXVwOvFyyM
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
koiss5knmmrz4Wtdsx+lgC0yOev/qbqSBoLjLiuMd5zgkt+1gcRUKyyZizCV
VArGj/3pC4nbekjtbLHx0TAN4Ij6n6GhIDAkUfBq6A1Frms59+wt40Dn4U8W
PfcE0DamTeYrDQNyDi3SghIvUD3kKrzmZAuKx04StFPYwO7Xx5qmqm4Q9/VS
8nciZ2AattfgZi7EJTfin0DrAV8EmPK0pq1BvGmPs5YgAhmvuWYvi4ahFskl
tjHXOFxsG7D8+NIEu5aPphNBCXDFSmnyFFwGv5ntVbGuVMhKIWMhDEpDlj9d
k912hTAqK7CUa+iBEeR6pCYa9bAxszX8+LoKrnB8v6ByOgJ/6GmP9eSHoEB6
ONH3+QZc7Q+XOSnVgm0iupV3plrBsKTKoRP+zQ0dGUXrIm7UNm9vOPM6Cu7x
yV6xP+8JXmtlqq+u6oCmhWZ2fb8XtmQmxx+icoUvF//+lU62RTjE/v5Oih40
vQj6fobaAxMzYqJ9hzhBOK5WK/N2NBBcqx+qOggGma1E1TZq4k56jTXuEetw
IHrqWZkUf0V4dFGL7fpJazhoOXGVMcUckqlcrYkjC8BDdH1gOM0OhctU2M4p
GgGNV791U24uWMxR99u0FcOPLBXW4LgUUCGdNLTu88NfnGFyRcwlYP+xdVGT
4xE0/hjvr81OBaHb7l/YtV3hq8QDIsmOemjsF5MhFSvGr2IXfw//bUQZ1jId
BpFuZFX4bipnkoikYfIk/gOFGPxzPlBbsQM2t0sS++4/xaePeOkM8l51fuQt
OPnNJQv8+KumxdRVwJSonMz2iwCSe4etlaXGgnj9vv3EiSisznlJJdLiB1eE
p5eqd0Kh+Vk3y8BfN7zEQR3iO9mEp52vuLXVFCBnHJnfBGMzPFe1FOUaaMP3
KeG2yldzcSTSkyb0WgLKHdjntya3w9ihLKow3xp0qJh8csIsFQdPC2ok/SjE
Cs+LJ7Sj0lGDVF2tODYVzO+euvfqRThWnN/wFSioQcPwi7ti6u0QNDRxVTst
D0LO7REOWLbDdlht2gNww/1PV2yI/rSgBr0m2L4KAJM2/1tNUV7Yyi1x4bFR
LtLonMUvZ+rBT2H2/ppbK2Q/X7PLEssDd7VvnlXnA+GIveUr3qI65NluymZZ
KoLTavq3213tkPICZ/W+Sxka/qycFBRMxKfqGyrXFqvhyvvMQULaFNi8Ep1C
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
oXytlAXkv8PrJxNKMUhLUXF6yRIP//x4Mpo5Gak8np9knbWFkyKGbyaFyvA1
UWzj6bdI0Oyxv5J7XxLd559vu/N1Qofj1ZFfvUl40+cux9O1OuScczE24y+F
By2DdaLMJRjAXbvuqVYP7Cx1rw5ThQGt5SGZtOwwdBLq4HrjnI4zu/WPfw4X
wNvAOYpWhmRgqAtaZYlJhnPui+7JJNkQzagbQDyTA61VyefiiGlw6lq/K/Oz
GPzFpRIeLxwKk09UyhwulWDE2jxxYqgEl4eSr35dzAeXPcbDHQMaaBod+sg0
0xy9aVz2qVS0w2DjSeFiFYQskVNuu8tNCC516hbuxbij2LFvnqYNXXZ1B9ut
IlFrW0HT6kAhNhmVUhoOh2LizKLZk9FAiF7XM+G6F40hUUK8CUfd0FM1/8SJ
niag9s4yz3nRiP/l//yX//Nf/s//bv6Peoo/u2u9NLH34Mng/SoicOf0PY2d
EV3inDgPg2QlO+Tq63UtveYBjcGLHKFHjf7pSLOs4otX0HnS5WOBMTcYXZr/
kaugDZVmh2QjJFVglEk9/yynPFzK/LPo3S2KY218fzQzFLFr42P1Y3IzuLn/
YdjLfWrA7pF+eoREDkPr3bcZnYNB6DxBoVsqEr2qe+1+etmDg/hMoiGzMwxc
VbOLnoxHv5aAA9RHXHEf/RGtrdNJ6MSi7VnA5ocBf96c8xkZJlZ/r6mXdvCA
VZW3rNneZiD4brzm3KYFsFDjp9Zaa8ia8G8msfWDrb9EKh9dJ3h8OEZgcCEA
BKh6X884qMJG0g6zQ6EHMp48tihb4QI/5A+vaXE6w3m6WnVOTic8z369ocvR
EtkvsRgqi2pgtZGOigKzC2w2HBv8aWCP7599bvrwWQ+iVx7+uOPsjB2rg3eZ
ZIMho77eP64qEyS9z1od+JoAa515TDQbUeA7wCUcdtoXNR0v9IZMyaO7Q+8j
oeoQbLi0cHFLXAPaFWe1KDfMgDQ89VsuixvabLkyvIkJxBfO6tM9H7XQbWKP
cLt+OvjMoN6FnXQg36PvV7UbBKYGDrK+JclY7RWpljSTggW2Px25L2WBad0Y
3yiTBTbpBVxh8gzAzIPxRoNP4pHKsK/17O0KyNtPrnC09TYWLirdDiR3xolJ
zcGo7DAYU5GzCpiLBZU18JMiFAE3cj4LfteIh00jFS+at+FQ6GKNITEUY2XL
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
RGcKrN7no+WRxHNM5IngevKCESntEPQfMFm7sDcO0X+oe9uyGzFuvIHjO2M/
5J77JTitkg/6hd2WvamNqPsx+T9Hj2Rw/M09w5NcBd48gqdn0iPRd5KbhWCa
gDXenAOZu7lw/N6DEO1fkTAjdeoWiV0ymm9EHr9r2gRdP8OaP/P7wi71o0vX
+xLxYq/AA4FWJDhdrzAcmAuGH9xF4yrBohhQn5HdV3kVxoueLfE16UPjq+N9
7A8j8ByZ7auRzQyQ6OBy8TmFQN5XUXnjUjv6NFxtH4vpRqOHzFovbUrxAlsE
kYlsAeoEP6t8/C4YTHjY3N/o5eBJ6WSafB53JF3T7NSfKUTCuE0dk2gWaLDU
DW+fDcamGpXlgR0P5LzYOn6hOhLNjNaLb/JVY8jHomHltXjwpZK5NuRdi5GO
8XU3OYsx440tmUl5I9bTyZakyeehzadLO7brJVjl1GuQNVeIUZWnKCh0AlEs
MezSepcf3jjwJ+OZdjXst1wRDR10Q5Nzk4d1NRsw5fwF0QKBBCA3V3/OfKoR
XDvuWUhIVsNnr0yvEwwVyC94cRXUAqEmeyUsgdsdRqkm7FkG63BeUzTqc3M5
5n0s+KOnX453n+yJ6slbQOL80O63tWJQe1v3QpM4E8/s9n6eaavFtYCyIq2T
kTDY+Fx1OT8ZmHkFhHZ8WvE9yfbFgKZyHK55fyZboAGWI8YonlqmomHRbwbV
q5XARX5nbrI1EhbtaDTjbtWghWfPnGJyJUaohfiaLFbjfOSnkq812jgTnWD8
gC4XqZKPZxU6luC2bJqj5WwMKBEq5/KWlVBNsX3nQ1g9ZE/Tr+/z1WG3q/vr
w9oeSPb5c8bxBie0ffalMZE1HQ8d3FJz/S8EFm279NeFCtBj/hSlK1UpPCpO
4bz4uRQaNAquna6LwJvLRc+i0wvxVqzL2YJvHuDTl1ZRJpkGr0+6NdtSZ8NT
T5/J7N47SOSYcqzjaRjIU1f4j3Z54/ObM43+vYnIKfW2WW3YA5xCbA9SbaXA
mP566uS/Xnjy45zWtIMfpH+D+y3Eqbiz8r0z53IonOdODCA3l0AvusHiyfY8
NJRW/Xa8yR8H+2Zuy4sYQ2xyhIKddww0nmV9f+hNKvwavKl3k6sIeK1o6U89
SEHJxrXbVyEWG6LdfzFFRKBZ9tWAriUbZFx8+niKPBx3C7t5s40V0dlaj4k6
OhbVmkgJzc3qWG8tbJxbbAYsH8MtRvqqYFT8vz+W880Yv8HifYgjQ/yDUtCI
bHsUNAw09ceMV4pzHfZ9mZjKBPEMLPA+xgLuL4ZyFf51g4Y4L1q2Fm8YP+2n
yX1TAe5yR913YpdBAbq96dMXbcCFzWOvNjcXXkZ9DE+65wrP9hpLSIuUQauo
3N1iRxV6lV5yMjeZAmu4I/VdEzM48+LXetkhb8w6sOZl2mYFmS60leVxt/H0
ooIr76ox1Jgl5rwZS0DKZJHM5Ueh6DlbeHFXJQKo4oO28y3vwqaLwpukh0eh
MvZez/2f1lhGPKp+5IYY1tbVjt3lskLFUHba5ss+GE77W/jEbA6OZJ1RD5V3
goitXfmbLl7wM/3KnfPjWSArPXN89lkk5PnKPH59KAwVFy7TgE8ynvsRancl
KRNeRSXvDlMlYZOZU7qmgCuO20jrT5/411PL7zeV1hnhfaciRdXLf33pKf47
e1wfNjs8zC5diYU/Bf48gqSOEM40utUXHIfVFB5LZ02TgSMqd2anxhKp780/
4MxIx5+9/X4SWdHYMjf87JJEGN7ufRZA+dkZt47OFw8ylcOcwuS5G+Yp+En1
F01eXSrsjx41pp6KAUGiGdezsXfRuWTkkz5vKu6SCAQ7tqdD8nrXiFprJKqv
vn18+JQXOnTfCNHSdMSpF4xBt9pjQNiEI075UTE2jwzun3CMhu/CDSLUP1Ow
fbZZvqtYDEIoc88RfbLEOWqvDT2lCjj0KjTDtzQASm/SPaspLMV61dtl81Q5
UNfaS1XzUwbIEzOLX/QVQcucVVTL9UJgCotY/W5aCcG3X1C+I8rFeLoH3BbS
FaD9XvyKgVojUl1ChytJNahdQXYu3FgEtxueyRz7lgOzPA4yb2nTQboqNUFT
qAFyzxNujNyLwFyHcVEDpgrwdH77mszaEI0I4/pV9yuAY3FM7Pv5IZyRXorO
F2mEGmqOIuG5fLB3ss8h3ynHGDqGS37q1VDEMU1/rqIUB/yI/eQOpwLb8PLH
i+tDUMptcDFAogxXu0jirlUXg9JfzPkvrRkopXL7fINy0e3qrdorJHdB60Vt
8W+dDjgtM7PIPpkJf8KWT96wuwfVhINSnSUlQDdZbhQpXQpaxE4drq2xoFk9
HE//zxfbWIZlOAXTYYb+yYduvWDcefOH8uiyO5Bdu3S/J+omHmn93VemW4oW
LN6K7zQ8YZVb0sTG2RmpY/PWL/qrglhza/aUjjd0urCcDmoPgQYHyoqslVBc
5aLlLCTcQXmO7/MGVDF46PaBvqW0EMDS+zQWxxyRKIi1hNpGGWV2qgbOLvhi
8gTJJNtGPMotr3vkyVoCo0sT+dJZPWR4zhl5TpyX4PTYKfEXhwYo5dWfp+OQ
IqxfcH2u+0cMIlY1PD0JgkClUK0Zr+MFhnoWlx6JyKAfT+TgHzkpWPnoTsHa
7Ani8aOunJOhQDO8veVr6AW/n+29WTS1RJuZRwotfdHALWvgSfkvT+2uN8pN
qTrCoXQb3cJ8CxDR1ZqmqC4F4uciilsUBUi5SrV3UqUeib5cb6Y/2YWKjDH6
AdIhmP4sVM1GpgYHZn6HstN3AguFYtbx2kf4rZb60uXjS4RnzScjRy0rIcv8
gG+6iToU+V6WAFs/SDpulyPVcx+0mccUBezjITMmWvdieDnQ6pHaPw4uRMOC
2EnesyXo5LMinyxSjBRymq5+gul47yjlxXXPXDCMyzZv1W5C0rTQzCOiiah1
bt0+gCsCPxdcnvXueARFAYdtLEka8Ue6KYPP9XIsbH1SH2XejixcAhf0LJIx
NS2ooNmmGaYYqAnunV3Y8M5vsD/jPlLSnD/QztgJWhUXO942SQFXYQimchfA
E6K3Uf2FpfBJ4UvAKcNqLM7IfOryxh2Cx15AekgCruu1VA1BOBreCg04F10M
76xzFQauFEPH6WGLQsNqWLouK6tfXoMz305Qh5Olg/DfK2x//+QD38mnBo8h
EE+wuhmwa4egj7f9ZS/jTHj+x5DbdiQVbloKrOj/roKuWa9DLrWh8HrN4oOg
ajFEOu3FGp5Jwp67ez8av1Ripgh9VZtVKohqaM1KvmuFnY+tlG7nMrBTjznl
clcLjhpumQu4lcFzg1fJF4OygYU97cznon+8FUTRdNYpAqKzBG/d3m3BDrkZ
V8OVMrS+ly/sl5KNfUPkjPPpweCacckqxDYUKTIvM5q/K4QUf+dcmfB4vMO9
02mmHw5c9xVEtEPSgX/16EqNXxpQe9GdTB9PARrvZ28klUrAlqLTw+FCNh7/
fXVM+1Q+ng4mbMocSgC26tK38eH5uPfgWrxZZyC+PvU49mlXKTopHVt/0B+M
yU3/kpwpB3SKmavTiaxxeylCuJwyAS4TnP5WPLKFbyMfDmQYGGNcajoygSt6
jwnEf/T9x2nzbBvFpV74a3GcK0rZFbj4e6MukViAEdOlhEcODuho/n3B+mA4
+Prf+hI9EY1li/pEJ98lgN/aZ6mRaWccYuue+yTmgpcevk1RFw/G/eh8PTGb
dFylnlLyV3HHjMEqRhUiV1xnqQzi3QvEzqEe9do0PTh+l7B0J9wNE6WTRqfS
FIF19U5bqYk3xGsJhfCuKWBlp0OdmZcb7syy0aQedIXJIBFOtoVYIF28lGdH
eh1UGe1nfva7gCS+mHjpIih+v5ZDjCjEAaZ6lMQXRhTFGcoFNY9z3QBi6i3J
36yX4LJUM59tdCT0Dx8IObfmAUa2t81bdgWRsVDHkdTfCW6mplmvC9vhC2+p
Msp8A3A7wNe54ZGCD9OlYm9c8sEmcwdas1duOJ8avvaU0gZpGJNYORTq4TFv
4b6JQBGIRJGIvL+QCbSnGYmz2GKAw5VfeYojB1Tlv2ruCoWD9c1MrcbfQehc
v3v9tVAWdLx7oOhY4Qa8omZ39n0eibtx8/CXDsSBAFGjhieVNBhQ/3r97IMn
7kmtjrAsqINhZlbc6EAEPv317gqFRgXov/O1JTK4BZ9PcJQEGlRAswhFKIN8
DfY1rB7ir/zXI+/iPrx6kAnXPFfUz9wqQ4fMHRbGnjpw/F5kw1oQAzddTiiX
/v+/TxarqcCdSPgYHaY/JZSDbdxXT0pJFyNBqbpYtjgAHj7QQxLl85jAtT5h
3NSGd1in6U2K82Ctr3SWEFmCEW7Tul9f/xS/+J2woqnYhlVmgvZTa61oLLXn
dHqkCmc6A8Lz7S1BP8Sd6j31XRitU/rtJd6G7ER8wUmNDfjIa/D9ytVuaOxw
vVrF3QPHjsoxT+2nwoheyhvzzWLcP9SjEjDxGA25PigecPHCn9O0jWVR3kBc
mTQ6d/seuspd0VhxrwQGNq2nah0l0N3yKfT8s2jgDxMVcmNPxGKHB+nDZ0pQ
/5SENIlWLjhWsP/2S00FQW+6vLYxNzxGf3D90fd4MPxcm+10LBbrHZIkTQaD
0FeiKN5TLBG08o+pf9V1Ae0bC7Xi24Y4P3rxpXFYEJA5LjxXemMHoYzGln5f
E4H565evqksxSMF8pT9SpxRWhSw3e46kAUVZpTzVtxx0u79+JIQuBCMUOKO2
KtzxqfVCdUV7MjjNfOs6RqYLbtpPCzHcGiVjiAulrfXx3BKFhJJqEIRIV0/0
9acg9SZ5j86IG5RdOC82UpkCntf53qZyuuNRsbNnf3Y6oaCMKkPVdhTsdJV0
kXRlQvuJDIOH/3K7BfL7JKiCsUJec+7Oqzjgv+wheiK6Esr88/flP7pgsGEc
l/RuCYTeeDwRP12AVh66G46U9eAhGlogKWmCT18xOjmKlWCI9fbr/lotSJXv
dn0FSTi3JE2jL3sH24wOPcm28sFrU1V2Bl0xmMjZm1R1wxX45vWYSlSd8EOp
BwkTbR4aK1GWbD+oAJa9wavUXyLhl8WFgR8KydhYLMwT/tgPL0ZVBooJOkNE
en7Jwi0p1O/bHOO9ZQmrTrR1xgvKSEEoE1iNtsN5/2qSg3/cQSHC1f2KaQB4
dGdd8BsQEmfrXjls6C8BF1SJ3j8wUhKvW3wmasvIAL/m8mOXJy+A1ZaVoLeO
GVAGtKd9y1bHWOHwOTNSbjzF1L3d2yWLj1bxjd4Rfgy780VE01IbiFbuxvqO
SeFXri9Sir/doDll/7pAkAv81GzaGa5yQrlfjonxrcxAYyHWl9bpimyDqtVn
f0jjoV3G/E+x+jA9eM7yb4opMKjsUb1r94ZDB7rSAkOsgeTQU8vfDwJR1/TD
E6sYLyQOZdf+Ttcj3nqRXsGdMg7uTQmB6PGreD5kWIxawAvPxOb/TfEJx98t
l+Il//ji97inZbbfPcH23VO3t14BKFcv5/rAzhftrGoKL12NxFezJVfFg31h
iv+wZQF7MF5YlyW5EemMB/1TT/zGfz15jJlbatwNTWMXLl6udEO69+fjHuum
4Cnbw/kd/3hvxF2hcms8AF/y+m8VyPkAtUSigNO3EMzSIx7hGK2AWfaw7VKq
EiBo9Jg0GZQCfd7Kb5ritn/eYHjqDE8y3OAfrbiR0QLHN632HdajwUGs4WVf
dTLErZOHH3JphQjHpyWr9I3QKZUeM3m8HOUOatUeP1UGcgtSzRY69eBPkba7
oZII1wfUcrN0s/BpAbHnt/pkVBUeut/o+h9q7K+0Sv8oBkaC5pfg7WCkL6kN
83GowCih3r26igyYPBIqEfO1GBv49J9yrrtDk/u1eikMAst0/jhkT4N+YpKl
ptpsuPe4x727JQR1iZzuVc7WAnNq1FycfTjmfOfYdSWKwiC9Xnph3xiYpZNc
/ns0DZpHOwtf3EiGZg3FFdGsFDh4c+aBbUIZ2i6RftJ+mwgqOYM9ETyVcPmG
qJHxs1acutekez9FDV56rWk92yqBH4U63n3a/hCfRl7sfioE9Gy/UgsFBOO3
M66fw1yj8YmUSFNgpyuQr4znsvDG4Iso7p1D/R7Q1xtW32UTB20j824S7+2g
eM5CQf62Ky7KXBLYclWHinSHyLen/ZBLqlE9QbAImTMnmqK14kGHNVY4paIE
a0MYHz1KjcDjbfTK3AdKMNdcZbvodQD8F99sruTih0nMVqOPi33gkX9Y9Gid
D3IyMOpaNhdAYDr7bw7HStCjdCPuj4lFszP30whcnngvhu78y81GEKV2Jzwf
Tf7nf4sDPebFcMjs9xQ3Rx7kCyz/OhYZCvtfQl4pC9Zg2EOW0muVGfAitvA/
49VyOOjK/YXRNRQV8088IdP1wsjDtL3BvRG4JO39c6grFmSkuNRkWROAhXXt
twqfE/r8LQPddHnU+8bX8v3zMSCXLSZV/FwBwc0OF+5z5MK7atYDLzeExCXZ
1Tesw0Whqa530cdaXjyo1bNofFcMXmUdei6xwQVElJVaIwMBoFE3N/sxygK/
V4vUPM2UwPy/DYZrIpqwkfqrzbZHC6/zWv2aTuHDmjiDcflsdyx4Jf6dRF73
nx/cDr+1u0YgP2DAcWtaE0a+/lCkOqmH24M/v/O3u2P9pKb8xpwodj3vqP/I
p4QSbo/bwvN1sJbMhf0cqQKqPuUbZ440AKvvDQdFqyVQICQo7HjBSXjqVN9l
11kq7kmqGpa+bYN962eXttI+EVYW91g4nivB9tNaW5sH5rgYx0XNxx0BVNWa
9QtkhlBDaz23fUQAyKOHWTvJtUFcdEw9ad4ElaU0zHVOSKLjIfWGG0P2eDZX
t3btrSnQBxOuldrawTJF1erkcDEhIcWY77iEPlzYXmdWUBEB679D70aFvHD9
IGHitYwLcqcUkxJJuuOYD5Fm652zSKHnTfHQ3wDyYipNN6NiYb/5WH+YbSDe
0y23TvHww8FdGUYD0jQ4LnEsO000BITKXZhVen3h1ZY23cK0FjyaSAxuveYH
pFfools+B0HRV8Ifsn/8s/3Kq6ZsgxnaiZ+x2D2PgxM9bF5m2d/Evfulwqyp
dKGQbenUh4eRKLLBTH/9USYmfFlo6Uu0BAORm0bT5BJwJNtfaM3WHXTkpmkq
SMPwbLKRmvAxb1BYHhUs7LwNXn/26dntLHH+zpdPp97Y4MY5ZHu/wgf//Y5m
NWDRwzR3vo7bf3+Kmx6rs2p8rwG2DIKLOncUYHPPmv5hzF04WWS7o6ISBoqh
+1K5H8Lw9Wuf5lfLCdhYEFkVX+AIyaltkdbsKXDLfqbk8/UIGLyvM1LskYDa
o9YPtySs4div6Pq0vQBQGQ0+HfbCHdhGQhvK/rjAr4WZwfZcJziXqMxyaP+n
+JvnGRQ7y0kYZP7i3s3rUVD8xfl1BE0oaqfLXr18JBwXSjmssvmy8fZe2oL7
Ny9MZs2e2LHzB/KKVEL0ZgzqjbR+4ItMx1oU/BBamY1M8RcIVOqR8IrwojFx
rwjfRhVRzSsU4BJ6vz29n4bKl2lK63PT8QXH3cWwB+2QR/aR58tmNVCyqx/g
uV2NN9UMazS9hrE0a7XNPrYcyQ6WhlY2JSFT24UznOdb0eH6mphZQC6slD36
xuCZjHfyv/K9JyvA3zumxSo1XqgT89BOd60OLHwFXAVdEsBHZvbxflU0/oo/
c/fGAwvQCzuxMO6UDLdDrkRrWiVDcdHtLaX36VA38WP2s1c/8GweKmEbzIO2
t4XO7kNpSCMXmulv4A392TMukq8jMeKlU3UbUQrm2USa7QYwi9OEHBKuvX8X
jO4v05LPqYo//M3bbxY6Dz3SnFnpF9KxuuvX2E+x+2jpX5FWp54GPrnHgk3k
Q/FMi2upyXI1GlJteSlfbkau86OZSieT4RQzU/5CUQjOJBxt3IiOhnHhL97+
/VqgKHm8qLijFM7zv5UwaUiEG92hiZtHfZG6c1zYZTcBLY4VsJcuJwOpzweR
2vwAzKN3bc5TysMJieiXQm1tcMKxQX34yj9vvSqaF/w4DVVzrZ9SrbcSvr0k
Se984APSnw3uX/+oCwwhJCesKZxB9ZfJYdascBBYfO1L63QSD1VsvaL5nQqa
xFHVT86k42MO49eOPFKgzSVUbT8XisJV3E5M6Xn4yGAoQ5U1BxjHGQuqykow
hZlK+MDpNCy6djWUZcIGjxyvDtV85wCsvTIcbr9KIfItI6d3ZBjms1ZJdP52
QlryZNMreQlwVd0vTd/BFd+TTepQncqG07v2hHNrcRgIgnsf4iJhuz5te1Ez
DePo03OzOVQwPjeaiHYvA7VSw9ZG35QD1zni6NBgDXzWWKB40ycJQvSWwt+W
hKBwx8CdsSFLIM/7IJJnHoZGG0PTXXbp+NzttdsMWzPcZj12UPNZLtrtizGX
qGRgqZryZlC5NVQ9DMhxJkuBF3pk2wUPSrAknNnxWOY/Dunu4jvLV4F8UUsG
p4NS0P314WtSRVYgxmkVeiytCF7ETX3vPhqNQnvyDLISWaChnM3OdKAAPCnV
5ppv5aNTXHzkwk4xWqkt3dbpy8E/XleUAs3zkejOn7uzVmmg882H5snvSKRW
dHV0/FGCpmB7RH0sFe4Xz94jep2Lk5hRyXclGQkCZ8d19Yrw+4WAg9sy5Xjo
zKtPm/WlYLFKTXZdzgFVPtDpXxsqgsUcM3bvgHRoOy2ybnCqAEg174f6Wkcg
oX72xGZ7IEpc+0Vpnh4L/CTd3OrnpHHub6xtX04m3rda/7n4IwNuZTeuescV
wrVvZ0OKfZKRrYp/8x1xKTzX5XY9JxaMBUb8P01tbwJTAUPBt70YSCEMfLNP
D4Ybhxo8qoxcQf/C8i2SZ34oTD86SN6vDUzC6w1Hd9LRxd3FOfu7C2TGv/n+
M1YKnuZ9dFwyikbi679U5OiSgS4wt/fV2UDw53QdSd+PwUdrHy6m5ijBzegj
xBV/bMHPR+w2ZtiAXF+mKZFDOtDLsV8MsS+C66OdbvbRIeh8PeiIg3UG9jjH
tE7apuNfaXHjY8PeaMD6JyOGxwym48W+BAbrobhdIH/JiBlmlVZVmZhpwLbP
bnTcWiyEFCg96VWJhAGec413hCJxtjYnMtjPmuBIF+SybRUK1mRzKfmp3gT/
2q+M7z0lwEHWP8pwWQS0bL0yM/LigHZA7aU7iSgYtOW7a1jKYyaJEJ/yvhYQ
nIOZ3n2wxZ/UsaKG/7/Xk2WR4zRxC6Mab8uwc0eC5goZqe8AL7ZvGFSPmntA
e8Gav0qlFnScJPtekxoOt8gP2Wp2BAPl21cCQT904ZXG4q7epD1sH03LUXbz
QHYDwa4XQqZofrH+D71sIvCSdto1Xg4G5oaHJr/pFgke+9Q35dutcb/7McuV
hiugqlj6XUMhGLNehc9T61jimDfyqDaHYsosNzcfZTIIl4W5NdxyxiM8SRPv
GqMgas+nWfBwDvq2Koo9HywBv9NSnxi5AkCY1Id6914YFhw3SOSvKoQlxoh+
4rwQ4HEn/W0T5IuL0J1P9zQdzp4PUnCdCsFYjfNKnMe8IMMjurGNqRhIfphu
B7S6AW3GInvIqD+qHnINtq29C00L9hf/rIaAueEFVbYTFpCW8zXy2AV6CHlh
arNl6Yg9Pg+lDFccsLGuzvfxlWCcG0mMzrUNwYaNk7uC7Hf+7ef4U45sfVR1
mqDZO34Hye6eZrMXMsPzGw4Sc2p+mMrur0zz1gx0Rz3fF47bwOKd4UveGT6Q
qZJv9o7NFB/Y+Sw9TLHDGl6Sv0ktwUC+y5+Z4/yPV2IqvjV/jURyK5knhFFH
YJxR3DWOtsXa93OXRZ4HgTbRPLd1lweYPvnrKihsjucXb2SwyavhM2m6grmP
MWBUdqpvi8EJbAuSN0RMLaBBrne2+mgEHpB90xPDG4dLPxt4H7l4oSJvTAkl
vx9qv9hlGTjvg/zDPRTDwyGQm8ZiQsKWjKWJY5QyQt7A2BBn+dvkFlCkD1Ga
t7sCPeU543eR3nDi6KSh6xc5PGx31m7oYShau2pQHS0xRHY8d1mZKAxbR4JW
XmSeB955F6G0MiMgbVO3ul9ji5cseMIOGqWgblrShKu8OVz3Ge9XLgnDmuSp
O34+aXjqTULevGA0ircln7lWlIWWE8FCRq1maP8+1CvMLhArz9Z5O3R7ovpn
nzWtUXMwdZLm6F7IwCl01Lwemwg5TrmLJNHJ2PBYr/yhjyAEHlTdo5YqQ+5X
FT9Ynnig2oqoyE/7XCBeuaZlJR2Iy8RZTCM2zvB32NcOnFKh+n2Oas9wOehd
4K3wuNCHQTbGRiZULXDAqPTLpt04arGbk2+b1+O1cxKsXYMEsKOrYRyiq4NE
HgrJmvPZsNN5PKzfMQNk9fdra35nIoNvmZBYbilcLCkzuqfmj3zO73ts0krw
C8fab+mFBHD6c+NOnKCWuMg923K7D2agKhyacVrHSvyk8k5wpJc3eKU9PzN5
4BZUhD0Jan9YBQb0VCJtx1OQpN89rNTVGElII2PFkovh9sR/bxoxAabmeTsr
RoPxbMOLypLPBXjKwGhZg6QYv+gO2J+gj8FqDzoi1VBrtCt6p9NZlYcb5ltl
VldjQezQmvPhxGxgUytQ0PC2hXqOEC7zm+pwbyb5W+ioCTYzuxetvYmCXGVG
Ry2XSKBWPN/D8UUdd/QHaSp2B8SD5xnrflY6w6VeSpMAel74qOKfomMojXQF
5JrHum5j+cyLfSkDXTye3CA6wRsOW/w8Z9Iz4iDwi3vJsycumLYZuViQ7oc8
n5d/GnTnYuN5A+e70d44fbUqrf6vHc5w5aoa+SQgf10sNKc44aP/yLgNBqzg
d4fMmk1JMopoRyuZqYUDrUOsl2RzFpz+HhDZ4OwPpxao79lQuIA8NLgEC1jj
Tr53sXBVNi7m1duclrkMiVaKA50KPKjNxc335Iw1frw0+LJDNQDgaORbXDCD
Z+uMlYNPbeFu9Yl00dPhQGpyo6LbNgC+XjPqFucPwjFOycoVpgAIwLmpFS4n
vLx2u0ODSgp7Z/67WcgdggqkfgEyPLE4NBFabDqbAOm3FkXyBFLwWnikCMPX
UKTqQd97UZUYwmi7U3IvHJmT6Xvd6xNw7HaTX7ZdHYrmHtDvL0qFAeaCwyy2
jdDaQneQlToZz12zjBXXToFx0+YKcYYKqElsvIppPoBTxfzz1ZV4fvUZofJn
BqbyUP38q5gPk9ujvA+iwyGz+4ny85Ea7Gx5PSLj/49XA6TMROnysKaY9wmr
UhaGsvu3RyTexCi/wVMiYcVoID4TRZpXDHms7DoRk8k4v+VhqGLshfVHP/1H
RpMMo1X91x9pFEP7sGb3zaAAuO/lJbz9uA6HTh0pnUyzwc8Tl8PjHkTCS4mX
4u28VTi253Sy4ncmmAe6RP0ULoeraQdF3o6VwMB0oPYT9VLYG7O1n9bMRDEm
Qo5qXzCY9JnmyfenwRlpWeo67WCofdKvGMmujEqTSxFzTVno71RmInI+BVim
aoZVUkxh7M5lF5vvruB+aJQ6mCEUKDo4PuZ3OQPxruX3FdkWrPjK2ufakwYf
H/QobI11Q9Ih3gx2ib+EVD5lESsjfnCMvMd+5WMSTl+KNGANC8Xi7ZW/ymRZ
GM0jck3WNxv8HmspuTyMAOLh5lejFWlAy2yfBTKhyBBudI4yqgjkhi5YdHuI
Isl/B1V24pths9jevPGCBCwYxdzIIMmEWb8wL3WeF1ivyrXy7twcRBxJk/pt
JU5Iq3ZhZbqtCYsM7SUx3uoEI9K9PObDN8HskuQ7lRuSoF4Qf9D8TRq8I5jp
P8n3RVoHWSWJXjNEg9CL8x1u2OxoLp0/m4DRv1eIKfTskWIs06TcOQbqogLd
jsplwUiB3PqRG5GYRbDlaGW+hhNEAe2yOq5QfemYIee7WKyjMWqp/RKGDHuH
O44pW+ID1ad5cRuWmNXIpl5UHQbaj+2o7rM5gcb4iN57nTS0f17ul9Abh/fM
NSe9z/YSnOXSr7V2p0DlwbHj55uMsJ4k0DVPshvXbBcpn7OZ4TtThyDmpBhY
MDudw8zqjD9Oc9kTpLxhTqD9k4q0GZwZoGuw/REA2Ueb0wW3gkF2jEw9w0oQ
HP9kCdlJxUI2a72w9Jg7WI+4Fll52kPLlYiHkvFRECmYGTk3nAH3s5dV1W5F
YZ7FwnKEmjfGFT1qEFTyA77pjuFf2hEQ/WT0Z7hsGK5k5r/g6O1Ei9eXQ2in
K5A4V0L5Z8w9rF3PTuN8mAQ5Aax8qpp1SH6SazfDIxY/FrhwCPlFoSi1feeF
ihZMEjRpZRvJxa1K2ascTTpYftJDZdOwCFkVAs2ckx7iQLYhre/LbpwOil/6
mPoIc7pSkk7VtSH1/U8HXm20omidSpxiVzqav+XyuneRAPX7iUqlkIK7Y488
juSHQ2fH+u8Sll6csLmno9VTDDosqbcl3d1Ai9xlmN4oB4dGwsT+NnugD1Ha
3FPWQryrKhlQKRCGoh/J75VdLoaafPfpI5gGu5eCDb0Op0OMZvyNn7qloBj4
Sjj9rQ+OXjwrOtVWiQZTl+MNQtOgxjt0jWo7GL5dc2uaxxSUzdMXtA3Lg/Zz
HyQKpyKRtmJPqfBmBtDc7nq9kKKFudtDfnrBQfBAXpbcmTcVgukKJ3/YuIOi
6Z2Bof50VKiSTe4VicW7pn3le01RIHbphSLTbhoyf7tweXUzAfPaJVQVjApB
iL9b/mJiLH4mYnnsLtCOIhx7tqYsyTjn4LYKV7Og5VvHLUv3cDD8ZHxTfbcI
9wQ5DiukCcH0/bPUZiq2cPjF0+gvcsXwzAWi/ypV47MzejTmi04QROlfKv7A
HWmST/e3htqjxyHiRfuBGOAsWpcxs7ZFgeyqP8Yxnvib7atX/LQ+xJXTJrWo
6eD7eP2JuSf2GO6ZG6Vg6oaeK31XWSoy4QHDUw3xoUTEsBe6Uy+Swao34QZn
mwK2DbHdoNMNA7m8AdkRqnBQrO+sqZkIBX6TxmdHzvhAS1lLDeVLd0y2WLVe
okuF9SO7HB0i3pghkvyc8Uw0jrSzttjw3AThs4RNTVotgtk7rfv0gvngdui/
MbV2a8Kv7tO1wYLycDVmtIOJmwpyiZqKGyPz4MK0h4yfih/cISO3O/7YEFHU
balc3BPZF4ZdE5MTcN5IodbypitKpLab2GWGwquO9NLR8mwQbWt6T5+YhxH/
2c60uYXiMwlaCPnHvwkXjLUvxnqi56VsoXqiRKyITx+9XB+FZ1KL1vtD4pF1
JLxfuMURdSda3b04Y1DI6eLY2yp9cLvYy/n3chBevKtXobw3SdCVlakIAHfc
5krRumQkhk7hT170J7rh09FMNZ+3d2Bl6dya9WAsTr63nz/5KwMuEBioH4iX
gNuRjesbM/Vw8YX5CENWChTI23kpeN2Dywfcan+Z5eNh5jTWY2ztcKyUL7U3
yxFoHpvBATdHuCzwnq3oXS7wpOr5FY62AqVYvEIiRRaODhwd0TCqBuMIeliK
awQ+g24W6jf50CG20f+MtgmGjQ9OW461I+nDIcKM3T1gs6Z/309agnu9PkCx
0wr1VTdptuJqYPrnFfZD/qWgsxGlx71ZgjJBi1sRBs+w/uyZyHe8tfh+Q4dh
dL4d+fseP1WcbgIzAbFXx3gfQFPwsrQTay9k2dJfbdfPh+KhRVlK9lJ4wnCm
c3xeEpn8qn7I+CZAamZW+p1TwaBzrKb16vkCjFJIetzoWAav9wV9EqrSQS3s
iPphx2io3yi7T7aVB/4ed0VmZrVA4mwjWa5tNV53vehjzP+P+3Zbu3tq7fCL
4+MzXucyUefso+/CZ0vhyL6PgOzDbDz5sSl9/Fg+5O1pf8jpqIUPFG4UXE3h
4NsbkkP3MRhK/IOezpMEwKSe6GbcaTfYPxPcS3s/CTaiE4liB3yw/8bXfOdX
JWCl6EJb/M/jMisWtu79yUHTS4tfLw2kQ3NwsxghpgxqeGPmwhSTMLHnjeB0
QRjk95oHrfe6w2+TI2pr8644lZd1qLglCg6Eik59bfBGvz/UPGfym5Hq5ubR
GwMVECc58mogMweFdR/Ku3pXgL31q++0+zWYfil/f/9NI3ButmVkHM6BDZPC
YlHzNvhDYdDq8q4Fvj92FHznVQAS/rZLLV7RkDWeC0qXvdBC6xwV+acUrBXX
4LdDL5ip47y9PRGGq7sZldP7/zzw5LRXRHcguE0wD7oZ6MNMuoWsbr0R2juG
6iWWumCCfrO6kFAxsEVuHRhct0ZvR/49V98CeLTzY/rXgjX+d/P5C5OVWDgV
thv+kNkCJ5csPzI5hoBT1d8DouZesCBU2jSp5I094pFzls+d4ALlZ7abBu7I
V566K/bXD514LjZMWrtCbr3mgoG/gjjlJQ1T1py7EHxwV8PY0Vi8nFFPVyTd
FAZX2YSeG+uDZZ6ad6x6M+STfJr5WpSLh3enx+VngpGnPauWYasQT00Y17+N
qEBr/klvAkcSqnIdX2dsSwaytjfj0Q1t8GWYqjzOogdpRWKCtJszcGfL18Pm
myXccrJ3lwnOwh8pquE0SdXo3uL0jZohAI/yvpX/q5GB9gEiOjdqE+HYumj0
j28FUGEjYHNX4D4GpfbS+E+3ouERnQFDsgjC+OBtWROLXtxN6iNlOKCGripP
/76b90TMIBWus24FsSsp52DmMYY5JcbY6LQh/beTtB5+lXiwJImG3qMWxU5b
arjS3EOh0P8mZov6oIeJqsblTilcOENRMuhuhrYVbv+pCiG2stI4/50swQsD
dlvES8WY49c13NsZjz0cy17GJrkQQ24/qc6VjsWvWKd9HvqiArnS0NasFa47
ZcHjo9X4gSOA6vR8EUR3mSVvfi3HDzzb3169q4WuHzFyUsKZSIk+fjOG8ege
qOMcY12OmWSH7jEZegHxuY2b1oIFcFBS/u9ZCR94UdZyMn+mCfXvd1xVYS2F
s9zibWZ2dnjaZehn64ESnNHeCafMywOH3rzAkO5KeO85YhZinYo0F4/lnqY3
x7lssf6PauUgzUVh7N1sjSI1djm6uj0o1eDW13akBhxFyPIfzfpitwl9fnll
C6j8ajGg3ylCya/xWrZ3w+C42F2aeXNTTGYx9wPTZmhfveuasRmNfepm2qnz
aZDXqiVstRQOqSSGVYdV0oC1ZZjJTz4SQlL6z7+8GoIWzgeM1FkSkNQ5QnWL
JhelqFoMA1jS4YZfebOwZTn+BW7GrKQm3H8XPUAvHYtThhrejoqh6BTp9TDj
egS2jVouDEfnA4nDYcy+nwuUuzKWGk7FULhhPOo8nwFb6b4i+tQRoLF7guLh
j2qYGhBufH44HC59vP7HRjwTtLvvbJL3akM4T8yoknQSDpU5/KJNy8Bbt55x
0x+7A6Pqe9221BnQ+lYlJ+9JBM5uK6o+OO8NDWMFbFGpXiDbvWq6LmkJWrxv
8+u14kCrW1ayQM8DFaqXp5/8m3/uwX2xDpIo4Cgh43B9GoyTsa8/+25E4b+D
xpeznoeC5muWwel2eDBD/UDCfyHwq6/sfNEVT6jNqQm3iffEwhuftkqjqqBr
jNUmB3Ow7cxB1ncOZiAnf7+Ofs8UlZxy7i7+VwB02V957vyXAq81dG3dVZ1x
nydXtcfoIATaCYYbLpVhP/fVdOuCeKzkbNk7Q2eIl6IfUPzyL0WHRrKi632u
qCFsEug5wE/o8uzjUPsuB577q52TibcIn4x7uRc3twgJjqQujXK/CcwSKPSJ
SgTLib7yPdrTxDdGK4dOrxzBy6ZhfCwMb8U3d6lSU+bWxRNlFHvsxVlhqF/9
uMSPz4TqWuKZ/VRZYFGgYZQQVAXq3+6TGs6/xH957GguWIrhbs/lC2NtZnBz
zfDJFM1tfCanUShVfw3CbWNaXa+KodmLWc5TIVawnjV5Qu++KbSqGM0SB9li
eLYM08AnWeBsuTbvwztG0L5Vuuc+Kwtchei2yPSVMC3kVFcTyA5U+/zuH5Nu
oc3BxqAJEjMUxEiGaTlXGDe/Oi5B5Io9AqoGFN9C8cxVYsknd4OBoBN486KM
M17d2Fv+6JONjT61rnrXY9EiSjSzx6cDcjjy6TaHX2Efb3m//qAflnApNdFd
zwE6y+99mJQKRb/EIv19DKBXcrq8l8wRNK/b6ROfVodtn+ufWg+FYDLlr8rS
MR8sby61ujvsgh/lyPvbT4dBHL/1KTMXc9CWVIo1x0B0607lnaK6jLbsF2rc
ag3gBs+Hyf9WwpDINv6OtZcPTrFOv7Q7GwwZUBxrc8cSGzuujpzou4vBXEN3
X2ZbQcUko8Dnv0bAeEJedpPH5986HUk7+yAQbBmkSb2W+ZCsiSQnOc0aZRi4
t+jXJeHRWvbqTIc53DB/QzDwUUMxgp9o+Sdj/LtIxVT88zbQ9ttyjhw2x9k2
khMrTubgtbcwMl6kg69Jzaacxb0htuzgTuoLc0xxEFTxTpcC0lOdjh0UXnBt
KzDynJgtxKfb77O9g3/92HBbYc8cHwZUf9H57ICX506ISbN6Qub4P/m5qowh
f55NtN8whUC//FEtIwv0vDnv9yfuNDLx3jX3kTPEGT1lsXebnjBOaWF6d5IV
R2eZNbfzZSDwpKzxq6MhqKZuHRTDYQkJv8ZkniebQT7PKQpU88BlcajeeOGG
Mdr+qz/UvTC+OqV/VS4a1J69zFFkEMUfn3j/jpUnIccvaUUDfQ9gqh81fL9i
DD4i/JZrmk5I2HjyWXY2Bd36L03demXxj+1euBU+NMSMF194CPYxIHGATnOE
yBbkli4ea40wg02VPypRBXfAZbZ919LVG63iJtUj6p3gfKCBcgN5GQgcuRg8
2myMR4YLlqmuG4Jl+mNlEvdY/DZ0Pmp/2gat4jUT7D9HQcblpIcNZ3zw9xO3
pusqnvj1uGIMo1QIFFyIqNkxdMC6C6qpe8SBoPNBOp23kw0H/pOnJJ3hg6+T
+2fu8snDEcXnBHVtNRw+JrrpQSyF7GtdIf23dJFtq2uKzE0WWcXLFZc+KIs/
fOi4ncp7F0bVhmSddkzFt64nGSusasN0myWVLP9NKF06StJyJR+6kmktyq44
otgKc0SFnhE+o/y1qX/PFwgNDEQfRwJR3fEb94N/HkPfomai9TEbOZ5//exy
wBT+Y+8sepqdgSe/NQlRTfljxc/dwzS6JUB41g3HLPQx8/X+LfcYD9BwrFg4
/sULMnnNSZST4uD5YY8vZSdjQDsaOCqllAG43IYnemXhboq94o2ULIx6NSNN
Xlchvl3+NW4iLwo30u5dHxbSgLpi1421E+mw5RT0gcI1H6dT3HQHl11h8hlD
+6EjLWCGNpbziwVgWSnxX/rdFBCMcWU71VUP3r1f0o9WPMBuNruSS4M5YMoY
LNvL2YqPCa73E0RdISVdAiZ4gqDaee7zkkEDntX/JnOFmYAGF75F/tl7CG6d
kSRZxi1wSPqY3qmEQTi/fsbJU6AQfAWwOVikEdnWfB7JqJSh3UefT4cfVaHl
ySjvktwkIHx5sfD8Vh48zNYQurwZiJwyNttMPPGwbnu25IWmJ+ivKJdlzXKi
f/Oy5fdmf7BRMTSKEMhCe4blWydYM0Hy3KvfhNPZMCH5tIfnqCfqdvVS6tSG
gJRS+fHbzwLR77Be3ZBCBW4HvT9L9TwNaMJYjwxxl8DLI8/ofJeDQVdXzVKE
qASP9kHJ54Z/PiEfbNg/7AkP2LuHOjfygWNSV4hEqxdPjvMQrWSHI/P1dgZJ
iTwsUNKO9hA2gqAPw+ovTxSDQtgTw+2KHFDWFes4vpEMTDK5GhYv0+Bkuv0V
uv0o5JMt/cn5NhQeWiV8j93xgGkynkg5hmR0opSrzJrKxc+z5fVy2lwQ/vSO
SepPDRyc9ngmSVQGTZdp+ThJskCn5/jUW99ktFtbyue4Fw0L3hV3/fxTwb+U
83b/fwHo+OtgebJ7E6RcvDKs35GGLFaSqW8t00DG/OGvUK1MoD/MyzpzKxmF
j76tJqEvxM0fPK8Up3JQreq/ykdjzUDM8IaMqKMKdswYpOqj9GBkm7ivUzsd
xeaE9Q5F/MuPt9Jmhl2hOPRcTpOY5J/vnrEP7s1tgOU34Qoyav/Gv/BVfhw8
gLPPDJ8uyjeDYnEZHVd68b9c14Vho3LI8Un6amQSBo5WTaszB0Lgi6TvJppl
wurd/ANWXGboZVfK33utEwpnKAcEjhiA7Itvxu5H4uBjQOJRi0QP2DrZx8j0
z5/G1xnFJv6zh1xDaTnSzGTg/0Rr4/PEG/qNxJ6rdTvgaQ864qi7mUiq8Gg0
a0ETI5a8fCHAGb10Sp93HkmCZc5Mp/0cF/yu5SNOWkYvvqh08euLZRmIZJqc
nbG9Kl4zQJKQLG8P7iZ07Wq0AhBGErWdaRAGHznMrfgOOuGm9i2x3UeXgKhL
+fxiTwHmvex5GiGXC1drE/nJrqvhnBW77ilidVC8KarexuuKIcz2hR+XUoCN
+PtJH/Zk9F2y3FW/dAtO9Nabc9Umw3xg34yzdhAC+e3tP+U1OLQPqSx/g/Dk
SNLmCU9XmFmyimP4XITM5P9j77wfuXy8/40IpV5IVslebRGSnkcomVnZe6/s
vffee++9V3bPY0tRGUmlJSGiXaT49P07vu9/4P7h3Od+PK7rl/t0OTxmDIc7
V21axH0DcHKNZOxQ+QChQtRf0vG1Dc7vO5fWV6CEeWfrSvVTtfCxvZShRX8N
aknL/c2+GgIWcl6umisdmBykTLOnUA1Ww9e/S803gGBBtfkhnUKYezH8Zv1L
DKgm7r3eXUlAkVt+k2rfOrBcxp64r6IGScZsenaXMpDZeVpwer0PTYqKNM5c
KEfr/Ni6pY1RFGz78HTCvQTiT7mtPD1YDGOU27UrUAprUsFq3jzJENHJ5CV0
KRhjzi7EmiaFwfM8Kf2Vv3nA6nKwQ5euGH9QPXF8JpwFvBO0w3IhubCbKhbN
suWOdYlM3+VGU5GUbEMquNAeSh/XaLN+r0apUfu8Vw9bsIuL3+hnZCU6lURu
MA/kwGCZZ1G1fzWURo/6NsSE4YZQ3b3NHw3Iku/NVac9jjLhwRxnR2NB9VPn
/onMKhBnYlYiNQqF3NNq28J6FfCgWaL/OV0GlK+S/aqXqMYiyqTsd2+iMM/4
1dUDsfGgvCXBx+4UDvSDRf7nkstg7iI57dpgPbZcYKI47HoH/7jTchv9VwGj
/Z6JtMk+YLDy1aO8OAQOf4jiVrJNQZ5tldBIu2J4WpNGGi4QDBftRFUHKOpw
362k2FqVeOyVqUybIsvFpfxZQeX95ailnxukp9byb9/uZG5BB3yeE5JT9MzH
7hCl1lWRMBzeDpntjEwH/q+9lcNTFlD9i08y4sg/P+Ofkg7SycWRr9S22Rdr
cSjsfVibehLUL9UKqKwU4uWc0Zhjb4Mg3WfEZZ+xHzBFZRsmpxWAoEdX1OTx
WHxC1TeX11QAxMz73xTYKqFT6Uraxf5U4CJt2GM6EwKrmeXTgVKh4BFQ8eTO
B2v89PgFdxSjJT7ncG5U0g9HtpdiXuQyHjDSRffad8sbZNc0Vs5fTYBFPfKJ
p7/VcWzQf+qkjiNM9QYbXEkyh+fcDW0HLtjBRts9KYvLMcBCQr12ZDYLBi5G
v2bjd8UO4W76e3GA7+6t9ZCX2yDHfno2XncBTBN+nzk5Jw81pg/ePmNVwvO1
vdxevHvEQ4v+nMdKXTEx4ougx8dkPBW9/a0yIgLo8zdfkX9xgO4XXgM84aLE
2xsXkw5KqEHLDQ1xe4trRM5DvOlWrFehqsnaLPuBClDyBZf95Q8Fi5KvslwX
9fBXeqLFYNg5PHDsRa3RuAkYyPMq59epA7fVr9hEbVsYoa1+8MTfGtdaBvkO
DIaB1MCB7HPSwUAnt7fc8dcXeHNWDC+yCiNJNf/+a8JBSM3TPdXTYg+6Ba+y
/PyNoTbieKHyphvkVX//EUFvgxIfuVgWKUxwpGxJvs/gOkhwCVHH15mggFdy
6k3HUuJYmPYnPQcbmD/DFTnoZQY5nJQ3J2+YgdN2scadQjsYquOd3Kn3R9Fm
oaH4Hjcg3Kjk9mZ0Bku5AIWA56pwXfl37jVdS1TlODPc4BiM+6aT6t7q2kC9
qMGUeEwEDmXmjpw/ZAqsxts1hjb/eOj1IJPZmimGCf+nm382FgurfhHcHsfA
lMuS9FaqD0izfzWapUoCrvf06bvqiVD2J+e2ukAysFumPqUgusPXT+1tZhyK
yOGXMFFWYAOmFWzzldoaaO7AR8f1iwelKXa+Cbu7wSUx9gM32BTQ9SDR57qy
JT50kco7KeSGtRd2KOd87WHSrnxhzcYFOAyjTTlHBSHzqq+inkQIdi2R27Ma
u6KLduMZ3nV38OzfWS276AGklvaHrtRa4Z+jhgfoPpnhYw6l12zT8XBj4t0e
p5cH5Fl7e7o8iEImqvjaZKEwUDxV2ZkoZ4Edo115oYFloEuZcZ4zwRFPfWY8
spFsjd/VYulr/uXRulrcE4f9tzE35/79OM10DOyd9tjYcIWnJ0uX1x2yMfra
WWJoZSjMLRhcYtxzA3kH6+jnxY4gE3L2wQC/AzzmNWcTiY2AB1USf2NsfKA3
K3Vb3SwYh0w5h27m++Fj7a3+KsVyzFVQaJK9mQ3Lru3eh1lTwFr7npVFUgrY
kn//ELASiIQTH71kQoqRKWrn3rlkM9yRaZ2V+u0BXdLLfmP/ZaNL6+17S6w+
sC3w9nUTgwd4c3IMxop7QtXS+lBzUBxePnPuA7tWHorZ7+emrUiDu8d0a5gY
quCS8sSrnbhE+HPkXlrvkVBU0nrdVaRmgQxyw2QHnCpQUr7mmGDAIDSmkOof
WU8BRiFfnemdTLCjeBOnYtmMkjavao0ujWO13dWT564ZAvmgZ79/xT+e6q5f
CxYu/ceD5venb7nDp5NB0hM3OyBHg+OgIlbAvXCBe5SkqWh/cuPjw4wYkD8t
xmX93hEW7cylqZ0z0Mc4mFt0MRFjLr7plHhkgr2ftsJD9Z3BPbbhxc+FCrzK
O3Ffqj4OH0Hr3eNioWie/+cb5U4sfDl25fF/uzk4GsVv9bMolkAqdJuM5/pJ
iOT7zCWal094Ui98tojlF+HK2ziur4w8UKr7JpIlRwaUXBLPPp6igUixqZDZ
gbuEGblTbBRaImA8Xy/qLX0Jqn48MZul0weDwsHqL4Xn0PZ09tSurgVk/zlg
9YfcFgqvd4t+P24Lq78LKggpdLjHHJ3vxqGOPw8/FV9+owUD476f+2ilYff1
Pb6E/0zgx3JubrhJJJ4iuIX9HnRGf9eMKwn/fLPrtZ5GKKUzZJ4bzw1YJoNZ
/3cvZ4zdMaYspdLjBR9GfIp/lcfggNbarH1yTfb4H2Unx1+3FHxl/ET+17Y7
XDj1QueLiwuavBCcjWrThh0KFsMH65FAkh9KLVXtg4WTcxFRDOH4PMF96dyg
D6jIbMpr35HDC1NxEhwlP4hnPpdMlthp44CF0DrZ0yCcSnnXYuYUj7aD9i3p
7AH4KePRiTun7NFt7Pd54fd62FXykUuTIwaFVlycXtK6AqUjef9wXwwGD9a6
95aWorxCeuU4XTL++zwmQMAP5akvTpsrBMMS7Wl9f5lkUHCOP8GsUYyctM4B
fuvNwDifzb+pdQfiLmXT8bOMwFjY2f/iSBFNJi8QRiarwEfT/5w32QCYcV7/
PnmrBr9fvnxylzQE86K75hoD3eA/FgeVob4ayIx+xZ2hFQrDb/2Iv1ud4Nde
MKfTybh/eyLMv99CEjnaFo1Nzd1Rd7mg+7qWLzQGN7wZ/eYNl59xcTB4eWJv
ZLEa7YI+2G+TBE2eMEIKEjx7WN8LzVwXNPQPueMq732Pcod/fdbH9rfGKRgv
TeoNcGT5w/f8G0+Os1lCTAT1K5MkZdQ2ztfroLDHj4cL/mSNXAUD6QGRnScu
6CK9WEyXKYiPCJ7At+uK60vDuvRPFcChj9njaKcuflOz8hKVjgK+wFHtlwsW
OG2VTFF9yxgbV3N2/3uiA6VKnMsTX3TwC7Nb//ubJuBCFianZHgLicy/Oj8+
CUN5v/H/eCe0QO7uBPPtRUv8vrZ6K5XOCalYtRTO8ogBu9AatYzIRSge3WRJ
bnPH+NiuxuxUFaSJNebK4DJHOXGepAvnrfGN6sbWuysyILer9nL/ucsob2SG
9+9cxELrCcUmak2UnJeqsBoQhX3797FcXebG7aaSow7SClCiFWdpKaQHvm6/
+0TOamLEKEPLQzEOzPuYsP9Jjja2U/J/Zha9AE/b6Hz9aQyQ032kIDz0Ktzj
utamyyuLfmQl/CL8RphcmNPpnesETjsCefMSatj1I/C9zL+5upfKf5lXE8Lc
hM/H3Bk0cOVbXkCMrwz+fexQzqynhPRpqWoXvtkR730XaC0njYRiqLYaWfQj
UofJR50bSoY/SnvcjM4LMHi94v2rPk9UDW0eCpZnA0nfR22mAceBnTeSwStL
BUfIvgXtE7gN7Fd+MHpQVYI/dnny9dsD+/qDa3f/OANl0LJlEX0yCJVE6IYw
hMIdCvmvqYbOUFP41f/DU0d8xzbpINWagYvmhLdHX0VC6bM/DUHqqfDDOon8
0vEKdH3Lx8x8JwGbHENOSzRX4tNbJuGTZXnoPU+xrcL5gVhgm0n5t68M1B5v
Am+iGqrxr05bp0TB7KrzWLWcM+Z89hAawib0NFZxjKMsQ8NKbfe58hjsHqML
VBnPBWpuzwmx0CKcAXwkXdaBWm8GRzkpKtGi/vHv5TupYD6rlppWXAsX3rS1
n3mTBc7bGqMjxZUYWRPjZHG2EawjGrIa+DOhKbCin907G2Nl/ci9b1RgYlGU
9+2JLOA3lY2/Z9uMERSU/10sqUJny81o16gwOKt6+qOhaAMY2kRLvD9cBpd7
NvVXE9OBvmOm/C5/MvpwaMc1a8TCX83Ti/XBFVDVd9Zbpj4FyUgk8e7fGpyt
sOZ/Q9+KXBRG3SXlWaAa071fbLMQfvC/fs663gk0FF7ffRmrcCXnq51+Wygq
uzB+5gypgFMS7qeVRXvgr0nt2MDdXMgLVSGzl8uEacIvknTvWqyPrlnfx9uK
tRISOU+OVwLn2IcvNYZxQNtW7C/5swFjnqf7G2yZwgvBStJrnuXYRJ/mfMo1
Ew8Xq+km7ZYj909TaS+rTqh5UTIQF9uAI+Ld8Sv06qgZPkZKLmGLbDN2X2fq
wuETjYBb2l1r/FNy7ejvN5ooLLePQfdtKRZejN4RDI3DJ0bNeQ4KGUBD02Hp
ZOkNPa/3O7T2mkLF05tynxl9YM7qVarYUi2EKseamzr989NXhr9vKwpBszub
8YvLyfDmkb7ol1MeePyGF+fQZjqspP+OMxQMg9Ahz6MqcWaoofKT0JviCsbv
+olq8zG4X52p3FIhHdp+lj7l94pFylyusLt2CSia9pSkRVEPFfvD1KajwiH7
3Jfpwy1paAeSL/6ecgL6opyQ8XFPOBLsymTNngzfvnMuGvUqoteXH5F9xvFg
sif7ascqGEQYlG4dJYRh2nJqZPcBU3julXqvyNETbgmED2SSRf7rgYOfH5Cq
gNN62fhocjCuOI+3B1/ThohWEdZB3WD89tfnUPHXG1hzdsNWsc0Zos9GZ4ZZ
BaANgfTmE1oX/Pj01F3nASkQZuyWFjV3hZNVf3rnpWSg0Fh33wGZSIxQ+Kzn
dckD318qd393OBhbFysWtK3kCdO1ItcfcdvCDUW9H4pEPcItSgaPSZMw8Hw0
zO445Ahz97V2+KmrQO/jKZcj/+Zh0mFhkNQeAFbnM6na2v3AK26gSP1FNLSF
PTWSHimAVNtdx/VjbkjWUVc3LtUOIaIXiCzs7UDZZ7XB09WMF+5nan/Y7wg/
qA5E+Lj2Akfb39z+kTK8Eey1+CyhCZdejJV7ynVjN/g2u3dWgfLheVkNkmLM
TkmsO7GZAPFufs4hV8zx8brMVMd8CfGyVf7Z78frUUfh4JpUgybOXjyzYNPk
hiqLArfP5I+j1/RFdeGROODIeZqwtjKMeRrzD/frVoDBwzaCdmsLfBiK4jSh
0ocBvkxzhaIEPOxtUzev3gXi+6YPBuwrB4N4JuUL5uUQUquY0yMbBm+UXlau
nQ+BB8ws8nNzlbD49Kj09LsBMEgUlHUxzcNj+y52VnSXIZNkhadxeyumtT3j
PaaUAU6Xf2r4//SF5Nkb57zSO1BJw/XB6ngALMaYnedbzgD3lMgnHzEXpD/W
rT6xKMS1IL/o0WJTiLibkRTPEwg1NbZP9QPzkJ+Uil6yugy6D1erH/reDSIx
jUkzGsmQbTlynDOvGNkyHkZGVpUjLb1KvthaHHicDQ7Q8omCKn698sdSORC2
Mrhcd7oLPSKGe/tfNOAv43Jh0ZP+GC40zp7XkIkh00Oxgv7FkDS01UXFVY77
vH3JFx+14frRVxPkmAlDPIlFvyRjQMaqdH/RQDdW/dgzKT7ShDOsi9e6fnWj
mXtHzwXnSmx8/mZl7GgtTofYC1984I85asLfnURasGzOjrFvqQUjF10zy+Qz
kXwn/dxgcQm+Io4vKHJU4eUYPXczwVTk/M7RMVoXAbVMO4JsHqXgP0U/0/O+
CQyiFevsX96BkLunvXJ+NMDpPftsNWpp7Ov1ejAgF4sGe1VCw5q5wJaVKMLD
ngMtNfHKTH35qC9olVk8GQs8K+7sInGlcEAmSltCpxoMewe9vQwTMUec1Okn
Ux184+/mqrmVjl80LgyE/OsfAns2bfj+UDxBEjPMk6oO2o0uDpyxVbApR7sd
UBGGl5icbdqYbTFzbfp3sU8Sjl28YOpFzARXXcGkyUsxIIBU4RPGqTh8rD9m
zSYLdWelAuja/uWg8IvZJ3dT4ILgqlVJogW0fNubsn4aC71PtlXu5vuCqKUv
rcrHPKCiHjVM1k6E7arrupS7JehC1b3oIJIF+0+8WWM5ngIOT46cz5StwAq9
vSvvs7zhXfQe+zR3AWisNmgrMXlhx08Z/b2FNjxKeWow82UKyu6btwq4ZIaN
LN50XOfMCbNpZ9a4zvhBWJum6SeiJ4FGit3JybEc8sl+6fgfMAN+M+NnHwaG
oM7X/YUqfQMO9Uo/6pCNxHphOxrP560QVqMQcBSysJNuLuFWbzgq9J+jirTv
xVHn6cazq32Y6mFglrJUjaKpy3HX7Apwk7L3oaLnID50eDAskT0OMtcqf68s
D8H0Nd1J075amLYoM6+vbgcqhodXOLaj4NjdCLfynymwu/sfzapdD0Qth1aM
iluC5Y/RgSWBd4RspeoOy6I2+KP+wOGEvwy8af3mzJ+fg4HB1TFvVWvwEV+J
+UasMtI5hMuziVSgU7JYm4pBG07+vda5lp0N+KqArD2pH622pC6W24XCf/vi
nEl3upCFjP6HXUsr9Mn0/rGibsStYxjPa5+GdeFfLAeOJ8N9OYXibvdmfP34
KPO5/khw2eYji2NsB5su/9dOjE1YasH6IU+5HOTVuQ9+o/IEKklXlmOprchy
KypcX6b+H79sT7LFZaIW24gyl+g/zxt9e5ztsAWSbUZZq7EUYt0ai5v3G3eg
lrBwpvVKRLGwynGdd6Hgc6BnOWM3C8n2frT+pgrHrQXOJP1zt+F787Jge2UF
xi73BtVaFcFpoQuv6PJDoJVTiGSuOR4JT77EychG46ONV8Jdf/KB9dHFPIJw
GQblvrgmF5YFD/6E1e/UtcHM4xvm/8VWgHe9d48x6795U3QxJZO7gOeWm6+c
oRIGCKjeqmjLx9/mgfrDR/7lRIrAS971CDRTrvI2U9XB80e3nH/PiwO7W9X1
JPsMrLVLsmC+UQJD3bMmUgkhkHr7whLxnS5GdZ6K0ciPw3MzIiyez4rhRBQ7
e6STGQqeFemw1ZTHRjqbTy5PW9Cknrk6Vbgao5uXH/VZhqHHyvMSpuo7uOfF
M9lR3QDZ9oyFacfDwKX2ctT++VrUp8t+q+kSgn1xs4HKV9LQ+beagUjZv7mM
kz349MoUHBiU8hjaGuFoj6sOB0MW7DmnrgdY54PR8yV+5rZafL6zPyfnXDM+
Dc1j4y4WQbVTA8fnSTIhBbOx1bEGiazc3QPfwuF3yU/Ly1+9UbX9iIilWTIQ
J25vW07UYFKcj4fGaR/8/XH1Y117PRw6EvRDMkwDiV9vl85oFAPLyiuDoYBY
eKnFKET9OBOJ36l/vnHzg72pCEeTUhsItspVjqMqQbkIBaHb3+ox5sKZXwP9
jeCW10sTwl4EnDYvVsz5CsGA6CSrfMgE/J9sPeqtUsHhLjl+yYYQ+HB15OcI
fR24yapn/9FxwfhMnxWxp2ZIoXL2rRRlO2Z4f7TkWWmD/93/+t/9r//d//r/
9/5XgOXT+xuoR7jueugxw/0gENm4Psrj5EigNqUlmyIxA1Wi6oWmTVuwZ1NX
jeCpAuFzGf1/W0OBSAhLlbghj49bDk7n+RdAbGFg9006adhf+mamSdYfNq6y
Ht5k70fPD+Mf9r1uxZYLyYPSw9nwU4SBjep2JNpkeU2naM7CqzS21O6KEkjP
0/XmkA1HC7a3ijeZXFCDLnLMuysNNdf4/vvrkorZT0fcozjC4e/Q4kshukhU
HFY7fexhBYj6RZz6MfGSEHtIwaNjPgf3t/goPolVRd6NUGr1oFx8mDs2eOpX
CIjVCmRO9kUClZxWxumNIRQy/FQWn9COki5uE41/hvGFHQ/J90B3eLtvKPfN
61L0e3uwsLnnn19brhSwRZaB6q+pyFU3a0jtLQkUiQwBbsseyty8UjCqJc9I
iC+CY15uTFYXzZBqqiL+iEQlGPVNWP2haYHjI4pOWh7JUPpVNSM6LhZSNTq6
rTXjUf49+e7MdAUoeixRMl6LQs74nNdjVgXw+YULIwlbMbjnpq4wrXjBx5i5
Y3lJXsDsn1X4wiES4196t5WxBsNPTt6oF/9FQBrTtWhZ6hj8+dNqNfpPKkba
5KZ9vJyO91NV/bidEmHlQLGl9pg7KsatHCxY9ofdmi3Dx4NeaGhTlm92rxg9
7gcev6GUD69PpHvSfk7BI64BurM8iZDqb0XL6N8AWyWdkl40/zw3Zagm800d
XLi5P7c3IAUWlRv4LvtEQkM85WLMgwxYcPk+FrxZCrZ3WgtDb/SCq22FrCZv
KVh4/wo0FcqGxx/JGypSitFowcfu+UIISmpFumemdgDNt5Yl60B9pLOqF7Zk
zAHas0qnP3ZX4r4TvnoTRU2wakWtk19Yj7ytvReoi7zx9Rt6vQekrXCpI2ih
TzYTvl5KSM9K8gHVjSiNw4fT8FD2EGUHbTBwKdTTrmUWw74rdlN32l3R+HcL
9fe7yVAwPHH0SX04nIOJp8EzccD1gh6jNWJhbpiytPRAPHbnP9CKf5WO8zK1
fOcsI/F0c7SQLUkOvMpNfek5Hwt/exJuj6lJ4Y2lXA/mttN4nUpR57mGIxzY
FnqdqlaAEUE3nvBERsKsw5zOw5QwMP0v+uDsx1D8dU/xBBv3RZxuezk7/0sd
qjy23lcfMYMOhcCaIV4lEB9IdvJmZ0EFi8JlMvZ0GP3I8O3l+dug2Ft84pyB
E/i70ZJlrUdD7MNwx6zP/rhel3OYhhAKGboC5LlxqVA2d9//wpcSjOF3qX7Q
ZAWkpLpbnRbJ0JQZktHAHAz9b55VmVOkYqXB4/MGsiGYeafsarVvEniMLtF9
7b9EjHCZMDzH4w47NQ8P0MipEO0TBVMyJAjAclL25C/ay0BFWx8V+yUNJI5/
FiwuDgSyKBtDgw+qePzvY97YKwS4tLdZkkAMxZE5J9LT+y3QzkOt+MFcEs7t
9TSmbITBl1VGGi67FFxtSb3y54sLttA6TDNRt0A9Z8PM0K8wuF4UKKLnHwwn
f0+qbx4Lh0K/wneuW5nA/0zDujg1CmZeO3JZKgWgtGTA00ey3nBXS5mtqycK
z/3pa+SkHidSAA/ej7TDY1/trDnPXAbF55qXRPkiganx6qzFsiUcUjJQcpVK
A9a/YnB6uRKChBe/wNc8+KA5mEa7Vw6cdjZW90LiwTbWfGFxrgxDGyRO641G
gff882vVX8qQSv2tW9ztchAx2apIkg6CVxw/9Aeco7Dnfmi0lEAxKn/P1SEV
SMVSiVt3FPjycYz9VGxOfRsOU8Ym3gkoxiXNnlMNQl7w7EH/X4GNMsgvf9BS
Rp2PN3oeO0rdjseM7Ls2Xc3NaLsqZBejX4GHn7w+/1KkGY2KSE5M1zjgUfqg
hX63IEiN2/kcFnkHKTM/qUw+l8X2vp3Hpj+8YaDyzILZQjxGl1sukzzsAros
Kzke9SSUeslWdsNqEOZTrOdeBFbhKglJkCivPL59bBlZaD0AuUGyjjIMHfiQ
1/19tXwx7kxV3HvmkAlZgqx8D3lrYcvufZSqbzKwu044PtGMQ2/XALmq97Uo
9GjkQHNlPuysVCzb/I4HuuGUL0Pj6XCp9fS0oGUkqKQp0x0504ZtZqcePL5W
gQwi8vTMz/JR4UCDQJB4LWrquexZkBcDjeFwscG//aYkeDn+OBMGTYKkXRFS
6XiR9Tnf+/PusHyOavgmmRpU5zxgviwfj8T7kxJFHQXQfYq7Nb43GV6sTL8k
+1qKup37RD+seAMDv3jbjE8VSoHzEt1EOizsUhm9HEzDsMkpNmOJeORl70lL
502DvdduwY9uO6I/a/dp15BsMNf/YuR185/n/ySRinxWjTGnZZe+9aejq2pX
xWenVOwMMWuy9PIDucNDi43hlaA085Zmb9ob0/706PX+Z4uqvFTXAx+VI6tm
5eG1xQYIDtEejmTLxY0335O5HathZuRQWP1RNwhiJH+20u+DE6JWnJlHI3Hu
7JW0IqU2xKuX3f4MdGBmT+qixsE2mP1r2e++mIBph2mN+YYD4cogyf5zds64
o8qi6b9sBe2/lPf37EZChY5g8shVE5yXupt45LQLXNb/fFKGyw2PtdUQs5Nd
sZU6YK5fPAyv37i3aXZKAz/4v6sc9UqAN+TqdH0nk6H264Pfx08LEn4qte+J
0CrDwWaSW8wqQMgclCqMPysGbwU2j1FbnYYO+uKrDJOBMPD2KzFjxACrpH1J
AySFkfnvjmvcW1+Q5FzfJ9duDClFY6GvWVSA7MiB69q2WfjR/G7q+sU0lLj6
n5TJaCg84c6OjPqjBQzvzVxoRGXwOM+nVGfPItS9Y7F9dzkWb27zetOkpmHB
sccXm05VYdWRZ2WffqZj0+H2F+sOxaDE+sP7U0Ae5oqPhAV/coPIVvcYdrtm
QvQ5n2/X/kvHXnUBLm1heczhkBWWdDLBVdeqawsGoejtEKJkei8FDG/NXWdu
KQcPmefBwUpqmH6U4vu4RjmcYWOxX/BuxPykDD8h8Tzgpgl5nk4sQ/GTMg13
TtkCeZGtqNaPKBijuzBFsWCKOymNJKzrUcBweZMlQ6oZhZXuvpCebkItWjEf
lUNleOj99K9vk1n4w/B+xF6JG2SvJzI1H0/EgEcvbLNl2sEt3Dv8ePYY0ouO
ZsoejMEphprLb4smoUdOavY2bRQGiSwpcDkXg+5r+TrqX7bwk2yi6YRbPAhP
axxIdytGAsXes36PAmAXJ+/24cvENLKtG9iVD3N1hM8diRkg2nBsY7wsH+6R
p4tZuKfiTubkBd2XoaAzecbVJTMSvY0OOqWf8IBKu4gXB8rjgKb9c6Z6fRYO
NUWw/hLzwTJmn7jxjVqg9f3wgTw6CTd6T16Ju5kLE53clx8GpsEL+/r/1vdH
A1vKiayoG0HQlz9CEbUVC2GMjR6CpOVw+MCRTflbYdBFPMPOS+MNeQ9cpXWe
xyD9O5UDhqqxWMZasbIZng2OzIdECIFSwLl07ONF5W+E4SEVogbBBYvFjrLq
SkSA1dSjNfGjImDt/CJkQdITMvjOdnGnWeGRsstP41ZSoPNAOvVx1ySIv4MU
mqy3gNq20cPS0QHJhHhpcyiMMF24TJ7h122YCbisyLeshVneIW/7eELgVeuV
l1H+JkjgHbZeEAgCjpdb31b8kyF7s++gEK0NiBgLXVUg54IMnrOsQtuhkPmL
678SI29YpX2c3XUuBN5oVt5otFaDJ/LvThie8EdtnsbGsmvOeP+HZc1ucRSE
Wwa0RJRXAXfPsHdoTx5Qpf6t2M0ORcEl25L+hDQgXCdr0yYLw+C1yVrlQUWc
q1WkstBwhgHup17WZzLwsvbHP7eUU5B2eZb9uLMnHm70Wv4zq4cJ5Z1Ckuc1
kZpp5GrJugk+5ObrP0ZqhYrO+6qD/3lH7RtzDpLOPGw8cNso+pEJpudPsao1
WgGTD43XfV8djAt0cKEtMsOCw3bWTVpx4FwpvvXjhCwx9jvb0IydJYhW5f0x
uKVF5HA4mETXHQhq7FJHin6qAVVpdN+Xm81Q3FJ15cWXLDQZLgjZI3XBx08f
ExNySoCNd5ddIT4c3+tRXV3JDcTH5e08Lf+k5MZXx4qFiRY8fL4kmZI+BVfy
b11caozF3Kw/Pm9dmlGE0V8y5lE9bEfqxx/aaQQaObm6msg0eO2dmBMwVAyK
V9WFI7rDIPO7tsi9J+bg38Yo6BdbDkpz1n0VN/Xh590LWXksA8RCTXvroa0y
GHu+JLWUKAsUTEKfzTNckaFeZ8rpaRgGRVaVikvx4FZbk2SwUia+shYrGQ8p
QVrxx57m8arwhYuOsYY+CrmOmPuPcmejsvP65buV5cj0+5S7pGs5kEV4dfPS
NSLpS75+VdNkNIk0oNspccbY6ykjYvX/nm+dHinebAibXjN5nsfDoZjz+eJR
sgp0/JBZ6peUDQetj69q21BCzA979u//OD3j+E27pK0wuGvcu2KTn4GBKpes
ct/GYlFBVpXnndsAyps3b78rA8oD4bWriX6od1bq/s6NBFx9HT8wsFCKbJxk
sTvGtVBn/czC5GYINlEQzFsnmoBi/AhPxGoGPmZ+9ie6MxWa3rDzWtsX4kz1
kznq1nxk+83TdTKtGr1fdARcSW6Gax99qLJWG5B8Z+2z0LUhNDgk0z77sBgY
H9ylkLvXCsfTP5OW7TyEePlas+teYRBp0MCbSD8BT7musy0Nt+Fio1jdrks/
tlbYzDw37UeeotrXJe8zMM8kQ/FKRxLW77xac+Bsx2qZQ7yb3DnQ8Ht2zPVu
M5xKIjk5We8HM7dWRQfbmqG3NKT9KnUSnn05bfg3txUGGPS/FZ29C8/z7sSW
9+Qi7+WvF/M78mAv2mInYjsa8y4tfNy2K4YF/fRzEJWPL/W+vPvNlYd++odv
6w+VoVzufLpSuB9MnjVvSksuQarag8Sni8VQ3r/kepO2FL0v+EcXbeVgoyJB
8sBcHPoEv5uwPxmJH9SOan+jKIXuqJiiE/+VQEpoBvWBbCuQpj6fbeJhhyKs
d4ebbGrg775Xz4bTQkB5ICLqxLILPD+vm76jrg0LNB/Wa2TzIUZ414tL6QJq
msbqYWYBstKUd97SuA0HNc5/k0lSBalrj1IO2ZiDwZ7PpK33bVB6RzN7SSgD
9pubzQhcSgUvm//IxTZS0YP22dFazxQoJvyQLRTKwdGQvusHl2Lx7K8xWf7R
EhQbcxeP8N8mONEfV+dY0Ucnj8mC5yFGSB5xn+6tvDdYp2nuvSxUB8F1uodn
U+zhk6o/a6psIZR/jEyvUSnDsB8BRUWDVwl7E2/3ZlKUQWrmRyPN3C2CecvH
tC1zJnC2O20X7CoLu2LZ7xUOmoOu4Z2VZm1TGDc4fyBUhAq8XBkvzkYrg5Gc
KxW74g+Cb6n9QKqzGdhLbVyMPG+NeRKHZUsZtHFQ6TOdbooDYG7SiVc8ZrC6
72BbI5sqbhnLXFFQzAMhP/vg6xLZeHzNyuEKTzz4j1N+cTifBmlsKRsJp0ow
9dPxO9e+hCHTFb+0ttwyLHTjHeeyzMDUbyer/JvrCEf386UVVIbAso+ArS6X
GcrLf7jFmOoFjnJrj4UlvSDv3vxMWEsGnGKLlP8h7gmUvfmeLgaRYH5zYcH2
hiv0lQcGCSS5YO48ndijpjg4f0m4zdMpFPbebfHHevphyN9f9AwiPtjmVp26
SeeAwn4b6d98EoHqtFvvr2Ph+ESYdavXLQRl/QXQ66gPjHK1C497xADL2VPq
DFUxmHfV8GgIdQQYCtlW8r1NhNFM4WUxJz8Eov+RaUpbFK5iV//9Nxkf5Pdf
nfYIwy+yHyRtyoxAPuQ2h+uEGQbGUESIf/uXr5tu+wUuW8GL1nv3xMJ84Ggs
ZcAAdwmsM1A+fpjoi9xG1gRKgwj0+cxV6rqXhxoz+ZqhV8rgHpljh5IPD7RJ
TI+MFCcij/u/9lbJw0JjwSqnf5x7ufhg76x2HW4LeL57KaUE5n+p4iurwiD9
F1d0ul84ljUpOquZFkNqvMfY7v4UfFkaNubEWwib2c2Pa/tb8dPR4wWlSjFw
o3l3TCoqF3eztsiEyxFOzu5jbz/eBRe+9yYrLOfj3NCfVJauOli7Qc2hThaN
nM88Vu1Wc6H6eLK+PLcZEPMTT1NmZMAOxFmTsrSCgsOIfMW5BogZdH77p6IU
SA+EneQ2ycWCuo2+uuYufP/k/BHvj/2wbtpgMcXRAnUnyZhDzphh728gF6dK
R9LPMs+LE8qAP1b+WLf9v33JrVFoNQmBI2XRD0YGW+H6mOQhF5os/PTozk+F
i7WYP9CzPe8SgapMLeeDq32wVnvNQOWoB9SJ1l5rKk8G/+XKpOcurTDuZf/+
zXopkoX13c1ljMTDXEe9GOyCMU3RvTSVPg5ux1TcbvrgAinpOTcebvzzC4VM
iVvNMaAl0+R0NqgQ50s2tL7pemNw/ta3pLQAnOQX29jGRmz+bu/uZVAH91ZG
ic/69dFwm499OMYGGDOMijiHLfDui6Q7O6SuQJf3craxNxTojtfRu6Wk4cvO
U/K9JAr4uVwrjNjBByuk0X3P3A1wdyONcd7ECsgmTdOd18yxRpjrkWihN6hP
FU4Y3bcDXE+4VuWzCI0NpC9UIhgJcsnGl+/fIiG+b1f+E9HCQ6zksbRq86Ym
+gZ/K67mmr9CS3N4M4xOkOC/HZTxroWcEE33a0ZXl5lgEf7BQCeKk0B2hI63
/ZUUsdNI+efZQAFCrAHNopQyP/Ell8Fq5mtRothLy4q265eICpL5CXKCdMQE
sQ/tzzevE++G9V5m1VEgjvi6OAS1r105es+flnT+HIEmvuB20bPTBPWyvIM2
VDyEmSdlqecCxQiZrTo8d9RECUVZRmtmk7LE8zJS8V8SBIgvap+f/v5j8Yr0
9d3wwdUThHnVXHVmySPEyJiU5nKni4TbxtM+Vt2ahNOLf/2u9kkR6a2+eDUh
P1H/1xvM8hIirM7pMh8OsiTOPLw71cEgQzxVdIf5rJQM4f3TwuXXK6YEiXeD
zDJdpsSpdGUBulER4rM4pcXfzW6Eb4/SjD89siCkXEtmqnpvR9xddBl+H65N
KCh8TnWDUZvQ9/qYn/2kK3E2QbcgvNiLaPbtxYJYnjGB63y/A1f8bYLX2k3K
7UY/Au9DYa12uSTCvfVXnuHUccSQCy0znH+niM5TNa2ZwdWEOxr68+aRIUQg
XefYvOxIVC6o9P/aY0Yk3VQl0FwkJT4aNYtLZ7QnJmt8/6u1JkNgD181K5Fw
Iaa3DCk9zDclPh9t6/zdoUF8uP0iK2HdiHDPoV85wsqJ4EPi/6hy3ZGQeD/5
EtJxEhYMDK0OxEsQCbVf2ebOWxD0RnNu/fp9nlByMZ6kLVGZOOcgQRAxUyMw
aJZtHxQnENxvTngdUTMkNA5S6T9QECU+CJQSphjVI1T5m0qti5oT1Xgf7bqp
XCVuJt8yr5+UJXRG2sRwLTASpDUbpKxVDQkfM95/EA00J2woLPx6cl2LyHQs
/bVykimhMOwNIe8oAzHfPemJKr0qsc2mNtS4UoVIGuSXPR5tQLzWWp8ew6NJ
MMqULGBwMSJUF+xrkT1nQeAuGHrC90eWeIDtJvOnOGbi/MyD4VA1MWJYHbdV
7Ftd4seDLeMjJCaE84Ik2kRqVaJagm/rCyUTwviJyb+xDGZE/ooPu3cKTInM
0Y9UyCU0CG6BMs3SNKLEwca+nYN3xYjS7Hnr36+oE3053p3xe2RIaOio4f9Q
ok58tJ/STNDpKqHpKlNx9LALIV/1BOkXs+uE1hNZzOG62gSrxvhyFwklYuel
bvFxQTOi0xtZGeZ+XeKn2rPDb+utCfrTLJmjl3UJElF1YtM3rAjUujS9Dx85
EJdT46ZP84kRlTtbiD7h+sRomcwfg4rCRPn3eykjv60IfHeXa58m2hNVJqja
PbJtCW33XKZUrG8Sbmjv+aQxaBPPWP0Nd3woSdhZnac0p5MmqJhSjZ56LE9I
WR5NEJgzIzKkGR7tPFMAEZ4nv+zXcicu6iYL/iqjgcfq4pxprZ7QJ9NJPikc
AePvZt71VaVAWKnu9mFSM1AUFXAv+2uHRInFFakyHxhTvobXNVuhpIb3Lq90
MpS/fTxTVRiBohxSdSxtCchk14TND92wmK7SRp4YDN8SSVw0fNIwwVnnareI
DVzpYRHz73TB8n0fNVdjruFF5XcXUqROwpfg0THKoTDsr1Iv7pYKggMq1q0v
33mj4nXDrUOXXhNfxDmejyBPhjKVWmfnQ9eRded0SV5yEPw0GtyYq7AFyeNz
7YMBWdjy6UB58qtQSNze+OU8UA4u8y6ecrxdQJV32a4/PQQP8cSfCWwtRiGv
YeYDDYXo/ydt48GzTjiVy57LItqDn4b0dhkKCvDHuM7dG05tIBg7p7rkdRcO
fDfh7HtUgEZiNhO9U+1g8pyn4OTNfjjZ53N++0gF7EwdXji2VY80HGrcI+Y9
IKg8sXy7qwSe7XBXPbL550eerfY3RdIg9fwFz0m1UnT77+2H6gsj2N14IYTi
TBp8/iBitezTB4kvnwnbKBWj9fClk7lFdRBZEZe9360I5x6c0pR7XYy0HMZk
w2eyMOS5qYlVUhjePFn1M37lJojdPjZhFGkJhI9MdhGv1fDxE/HcXY54WEsc
t5pud8NDESSCOWGm8PNPr2bdZg5YfTwbEr5UBeLkDq0frtViqEzRr03BNNyX
cSD3791iEOP9SZF70xPXk+bunufMA10N+j6nuCykot7mV1mtxTuVcVdDDnRg
M7Hh88n2FqB/TvvaQCwE1ahV7vxWrYDulak7h2jDwXb87Fdz2ijgD6rpiwwL
xesF6s2n/0uG4jSV6VQKXyB9TinsMmEDj2JoIqqU3THPy1zq6z9uttWin//Z
aAryN/csHOQq4Lu/iK22Qyq2flk8Ffv2OrgFjPbwx3iBbsLCJqmqN15wjz89
lRYF//XUSMC6CTA3ib9jepKHZVvrD5gUEsDr5Cljv2PKGMqix2kmGAY0FLq3
uE6aw53ThwfV8o1xVlJ4/6GPSjCnyNt/09QK07cDf/mW30bSuMzbvCuaWOF5
HbNInOD53cvp4nPawE+bp7/rY4d8kUIkEy9joMcrt/dkbBi+MdnOawjyQROd
kYcBW9YYZlRUV7RhgH+i3rOm64Rgm/WPghPeVvjVjWs0xU4JJVi/x5+isca3
KTq9JZLRwEFyUpzX1xFo/SkzL/Mr4BNLivrdQGXsc9oS8Rt2Rbduxdc6U7dQ
LvzcBvUrBXB+xSdtFaaLry1z+8WLLMGq19xXeM4aDi2qffxLpwmN2zTnOaI1
iZVOw3kTnzTBO3lGJizXhmibdKJkXEgPsgQon9rFKIBu2bHZXz1ZML1aHUTV
Eoi90sKy87xKeMA9Q0PFIAVcDs3wS07Zwc9jxOBOXlOg/BAeQZypw/W7k6b2
FLXoXt3xqN8/Bf7zGlIfPSYM8Wcpc7eGS/DM8z1Bo8x61JyKj509NovMBU/7
9TJbQJGCsbN1lwgc/Fs62/pdMDpb36FbmIqeX9z44iuGIQPGulXHSiCnlL1r
5MFbQsaBqxQ81nmYMKIcs69IHex3R2oDDeOxzES1kG8tGQsPLxUtvxWHwNTy
hzBjjoaKN4/rzAbhy5Knd4QEnaB7an2s+58Pagc8lXny2RlCjwQtfQoMxhAe
3rc/2nVBSTJe0pbPBfbLVfd++CUPDlJwvIvGDi7FcFO09XlgYth5fsNWW9yg
//V5ydsOZEwMdntN9PGluGxyxD1NMDr6uvisvTteeibRg9KeyHI0I+3XpUj0
tiAjtdJxhzcfDv8sdvCFkM8PDGXTtGDwHihV0/rg+rPkkJdh+8GcdK6+izoY
0ogHqwPXbWHvQfbBp92ReFHG+zjvQy3ATjOLXMowpKdUPfzuuwE4mvYNfwvR
xWOvxLi1PSyB1nGcQ/CiM6TZTMl688rD1KCfI/LqofnBxoqjbgGoTfKnsLQk
Cljm1RnF+eywXYFxivaEG0R3FF7ZknSHuRe2NE95LsLNqXYBdX4XvGt86GiG
syqcN1GYS//gBkOLZ8WYty1QXbhYuidbFdqNJXJ4cpWRcvXwG84MGwiYvLrY
9p8VCDNZrLwgGMF5r/8yPD9cx9T5cg3CjhlemhweNfbVAbF3V5UNn/kgpZTg
/d43tthcYpehzqEM3/qFeBwqz8OILumho7M++H2Tr5VxzR/U3BV0222d4dms
gOy+3hLgqr08bbkZAfc1+wZy7ZLArbjbNK6nEpk9Tf1Sxc2AOn2TYfFiInpS
TU8OFYeC76cb+SM1TiC0VFQl7maP5afdHZhYr0K6ElfVeqMT1Jnpbpjv94aU
V/8ZEeb1wfTmmlF0nTsGVTxhO8p4CxS355dGJCyR9RI9cUPPAk5dC21pK7VE
PFzTrPVRA/5ccKN45OKJ/PVmFdGO17FXkepzkZU7fKOt+fL0gRHOHHEz+bEV
BjpboX7TmpG4g5b2TPVuaBEv3ZWc5weL+6dpSEWUgOTpH4u2DX9U4fbW5qfJ
BKEfwZriG6UwJqxyxaq0Az1cGTVijDPxes5U/twLNQxlO2Hgne+NBlPUUpQ5
GUD3Q/+hSqMzRhONrH79doMg/ats5sHm2MJjXRGUrEhQNnL1i+PUg+wGm5rf
9CaElq1aBof3/3Kivqm7csQM+F0vof/+DriZefWww+tyZE0UfTdpFovdL5fM
ZMTnUftV5f6tlnHo9JiNiCdrRN+GrfDczivoX+mzlSjdiWNX1M9vnqwENGWf
H/uVDhUqpucNLV3Aq6Tl3D3LNFD/M3rI1TsKdOz/tPcP5IOeAYmJa1sYHr59
V8dAJgXjDPK96na8YOXrYA/NeDo0MURVX/+bAxRHAqN1KKcJLodLAoz/SwTn
wPvc0W7S8EVcUobksxnmeVh1Hdp/HickqtrUFeLA8Rg/6dHDRRARRL4aoemL
Zy21VoxNXVFq252P57MVetF+JWY4ZKA9RZJv1UAGUIR/Md8flQ4MdUFv/A21
8T/5l797aqXRo+n15ZUxX5ANv6NJ7xIHY6zxC0x6IaBb/Tbu6Wkf+Dkh4Ber
pAVsYQtzuSe18O1psoOMKbpo0yD1+8w/z2fzXMilgXiMMp8Yp8+VhM7pk6ZH
BV3hwk25iZv74jF2H+ch1uBo7PWW6OiP9YRb758e59YOhWk5aYnIoxYY/XPP
T0/eG4mPOhyc7uUAWyDt3ZPLYXD7K83tUv4E1JGf2vf+vgfeN4yb3JuJhQUd
O+/onGg4/fwM+UvSSOgT/ty06+kF3pxTpEnp0RjG2kCxf18KvmelEbh6LgZZ
SGI+bLYbwSmVlyaMlnlwbUGkx2nTC0oL/JzK/mgBlfrPUbZnIZDxwfRaA2kK
XOKyD9b5l4cxrdf6Cw1zgK8qjO23WDh+65/YHag0xd7ixwc1BLwgMVm2hp4Q
hBdJ76kKdOcgr2i4wqJ6Fso/u3DkRVYJ6GU0xbDYpqO0Ztfv4DOumN30p+zU
+TQweye58OpiPvZEkpIT2SpwxGDCdHpfKewOVL8t4k+D+wNUZ3LvpMPDDqpb
X9hSQLz1nPntv3kgkfPrvshQJRja3XLMCS8DPkcP+ouGKVBIOUrs3fGAiWfZ
pNd/J+PBM51pjWvZaCNJKl3BYQu2EYJvyQRycOzTkHhsWiYG6b3WngzKwVwB
icWGJXXMtWXpfHAkHLlsqF5dHk8Anl4j/2O79uhypLfOkDEG3oQIPd9fmwsr
6TMvr1NVomWn2KRipjHeW3LWiigpRvN4OvMD/BrI300vatqQiA55JzdZm3zh
h5/ZZKhYMPrJGUinkNvBSVsPqmqDWuz6NiVeRBaFcqxvz7AXeWCSRHK4LcEG
zW8+WDnIuQ9Zi++FOtBlYMXh+/f0nv2//yTLLj38ngY3j4Z7pA34wzGxnpR8
0zjIPyEKmVrNuDV+fTNvugq/TYwRPSdoid43qB5Je52Hef37XBt/BYleTRlM
lzMj4X0YeLR9uIjf+Ly1pJ+5w42KcqvudHs0JIoP+I1lwo2UBeexuCg4Oz1s
uZCSBc9TtX90/+u3D7tXxATehQDP5hXDCy12+NosbjHghiyekgh5ptaWjjMX
CBe5r1igUnPJm92Dich+zdkr+scVGLUev5gpXIon+sJMXYr/8U0Do0NASwPQ
lzVFjjjcx+6j1Cf0+TsQxvgjfhi0wCWqu6XG5D1Exqs25Zf8WpBzrvmce5Y/
RuVUi5lvxGGHC7/SAFsBOIaUeIvr5EGr/6dmr6Jm2EevYc4tfA/fVU6Pxh2p
htSbg5xpT9oxVruu4DhXJX5idYzFTFPwFL9Ev6Nagk/Hf3aLm1eiqfn3VVZi
BF4Lyg5WXAqCbsHCGnPBQNw5xzUoGRYGaQ7lHgUD6bB88naWyE0b9DH3ad1r
zsCfjEWzD9dqgSglfFoxphmFMjkehcVFQAJH0FBgeSS+6lyYzNLxApzpXp36
VIi3pDNiTJPrsCFGf8Ip9wYW+MZf+KlghAw2bQmfThZBhQ5LyyBHOCiJnzMP
3MnHh75jW3fS1cD+macgeWoz8Fqdop0YtAYJU8lP/dwl2JrFLBe3bIZevv+Z
OJQn4DHpiWSqvlL0fxWczFIdg0oiwQHMl6rxcWUCbYCSJlyz+zllTO8NouE0
6Y/Ck1Fvop++/ZgarviquKr8412lnKVmL9kYVO9crv9mlY0mlvvv0g74oz5T
ON8gwQl3Lf6QlJ/41y98h2YJB/1R7sZKCYmnO9BPpjzc0IlHjU/j54Qu2yCl
UyfxVic91t4uWVUzDwPbGynb9iwBuKC8ePLzXB4uuh7gN31YAQ72ZOtSOmVo
65Dd5XcnBwQaJ6P7NEvA6UaiTMTjNPhA+25sbc8OL0dkSB5yS4f6kpeMkeRW
yJNzkT1YlhrGP2urH55vRI4OhprcqSyQPe8RfNjLCnzW3i+5RoTju7jYedeh
jH/7Sv41Z1YDDT+m+AeLWsL7/BPv6Pn/vdfw8Jn6vlBgSBZ9HrashGa8RTSn
KZMx880F7vASczzh8W3hyt983JBklS8hcYS8W5dDzY6bgPjB7tToX2F4STeF
V0s4Cm68Dp7Yd9IWBur3r8dfC0X5FpIz31PdgYN75Tu7vyYURY5PZNmZQ8rD
T0PRBolAiBRRMh/MgkhZeynn2jCs1D6mkaUWg483TNZOViXhSKN+wfkFMwwm
9znTtSYMK3WFpVfWNJG9+wL3rLQOJi8+jk6hkIT3q4elB5fd4YXCracXDobA
QABL21vyYExTSuuRaVYhaEXUnqr7KgYTW0KbDmdMCSwR1789K5CF7RKtGy6e
4qDxajlmgycNjpyY7S+ICMYMoWZKZnoztI87rW/J4wWMOiffr0jnYtOb/yZ6
a8KQqfBBwlWDajhL9TP42v5KHH2fSbP1tQQmRCfVtWWdwVWh8nXmUS/Qoj/7
D9fN8bfe18n7Z8NhrSWtnVPeE4aCM7dSNcPhNcHcdDY6ANjJdehY2LXAsmeU
5IynIVR83xI2XEjGJMXdjm3xLkL0GtQ84Y1HllJvdxRkAtK8D9/5m2/CKdK/
4lUvBaH/4WFxkQ4vIBkSdrihp4tPKGLVOWy18W3HwFG2dUO84z1zb3zv/9g5
z4cQvLeNU0k0pa+GRGloSGho6FbRTks77b333nvvvffeQ6V0aykpJNFQGsim
pSF5/B/P7/15dc65r+v6vLjuDBCz6/92+p8PHP729EL6TXWY32/aM+lQQM93
72D5TRa6ZLNsGVm5YRhpPeEEaQpu6FGcUp/MhStDMh/etsWimrx2JLHtMI75
en318u+Cb3ovn1H+bMGIfYY5epJmWDgktN3NFwCke7FjBTnmWGv859rP0FKw
2fQS+v2PZ/R+8EV2vm9A/Vtj7Yyl9XjiOF2X6KALKL2WPs93PRiNf/PzFTTW
wMEF29+OF9uwZqJgfPVlGHwpmqDuHMxEyqH3EcMlOZghMaL/9Xw6nJ9hTJJx
zIT5l1wtft66SJxwnOh9VApEh23bZ6oDSN0moj5wCEa1TvU3rnH3QWT620gk
Vw9cHUn04GONAfXGs5NSmy1gBYqPz8k3wrtX1/KEV7IgiVFIiI+hBslWXpUL
ZpfgnR+5jop0eVB97cZw4W4mRpPUYhO9I5xUfklcLJELXtHbtl+vxuImxXyB
sXkt2mkmNZ2EKKB0LB+aiXIBeqOIV19XjCAmXuZ1v4Q7eA2lR55eToWY9wE7
n0WM8ERFNlvCRVMI+E+JiNxOCX5YFH5YZ7cHqf4cPdPKJOAv6Px1fSkLZ2Ya
/9ro52L+YR9qpa/CeLvhrcWObDnOZW2wypVlYZ7jhXdLd6zQtf/Nr5P5Vhhc
fPfp8LN6JHzqOrDKXwLsd+o155kjYZvky4sV5jJkLVDJcRksx9ron8SGX8LR
QOP9N+6EJKhJZg3eyw4GrkfRhu7aqf+4XZtG3+sUkH3u09e4chKLC7PCqluM
4KdWrVkLXQie9TOXD1QPxA0lj522ACnsCggMbb/tgfa8vApnLkbA/SY5PLD1
hBk2OhvJKQ9gXXl9rzLEFETaWMoqC0PQyltDTd0sHH0Xfxm9FpeCjyTWo8w2
GXDrcvOtOwnReIXtrkfAcDQ++JTBEk2XiYKvfg5ocjUC54Tu6b9nejA23xTH
qkrgVeSQuUCCL2x3Sj97qmaMty70dZB1aPeak9z/b+v7DXjxLixsJduu99Rf
1QWrDWXgER30mFVVgvL/CmVouIOBInqBaeimFWbOPL+mRRoGSQ47MVb5dtCh
dSG75ZMP0NpqJ5LSJcN1usfpJ//x4oWdD2Sh0skw8F2HtFk8E9ylR7fvh1rh
oVl/TlYJUzwolXj3jaIOvhtUdXIbxCHhVTpBDr80fP8gMY7bqhQnaBqLj6gU
wYvjH89yk6iiDWyJdyxYwm9h/5hhgTBYHSzg5PWY67V80MQK1tloS/WFf72D
DxK6maqeF7vhX+vVNCK2Grx7fOR1YkcShpnyFjBLl+Kd7Quhz58FwQnvBGWq
tSK4d8DixM4aiouCp8cohIuw/cqrVgHiRrBNaDkg9EvCkAXOgtBqI/BnGpZw
qVSE2RYN7G2rgyc3v3T28tQCrR810X92FeAfwNT9nCEGvwZ18R9bc4fnd2so
bLOTMevqetXO43TY+3f7RbRlQGgra+pU2Y5Jn2+0ibGVIM/WzazRjTJ81C7g
FSUvgNm+g6nrZ7uAVzgwkdU1Fvfzuvo9eLTAjfCRxxKFBz7gIRdxD8lGEWme
Gus7MUBesfJwPdcZpHjjRJ7JxGBs8U/v0VhL3HJy81G1T4YYI80xDZ8s8PhP
r7zToQBIp/b7JltSwZGStzSqoAk/65+2PheZCbXHpejoT1qAYCGxkNSXZiRp
JkzdMC9AVj9mWhWSEmR0WAvxPlwFy4VyILuViSe0fp2tjkiEjF5ao3CiRiwM
nE5rVoiCLXab9drzqWDO8NS/5WMuaH88NmHxnx28v0/34fezJKyPf0RYdK0U
VYbdmkOOpkGh6hKn50Y6nKxXUP2dWQjebaKXhfjrgbKGyb25rhIHigxJyl+V
Y9kTM4J0r24wMy1Mm+hsgkctIv3ex+shdqTPfY7bB8ycduUZ5pvgQpOGhtlE
MmiZCndJU3ogy+C7wy58+SibTcBQ+6wdRA1m5h9wlSCDJxm98tEW0FJf/ttP
VIb8UnkeTZMIRe0kWho0rchCQrjBUFyPJ6lWDevvPYQNfS0DhcBGFN2UzaI/
2on6pHO19RzleFoubYcqgBuYeEpzHnoYgxrJQ20aiwpkPWngx+eTDLEaTFEy
pIno8ueIGZd7KrBJq52z89HAHe454TmRHHgSNeh5EJSMRFFGdiaDCnDynDyR
SUUqTmUWKRpLuCJD2DxV4t9YPMS6NFAmkgjticVyTq3+SGpTNLj/yRL0DHw3
7XriQGTXSbon8y4GTrh4Xpr2RymmZObatzfRucVkao0nG85mONLPqVpiq8hb
lgh7T7iyNFvCa2PTe//Sru1Yyi1wKxC+crHOr/f3IJHGSz1lCCKoVS635oS/
FCeo3/taQ9rMd5prHpJ41SouReL9JcCXl9sr6jWRtvXXM8lQFzjKb2km22kH
gWmUq+WMgmj4+OR9jUv28PhxV3VNZghol1OL5KokozlXG3fLqjEOKv8ZtZSI
AoKMCvVlyTtY+FzDlGwgCsk7G+SkHwWiQ0loOdWyGTALbLaM58ShOM1OAn7x
g6e6VoTX+J3Qf8F3smJtuZdt4YNXYYwVagee6c7Xu47AXlwU8NcA1cp2B5oN
8/EhhZ+IbH8Q/lpiiqabLcbZC7+PdyamgS5fT8kCax5YzdHkeNbEwsGWZA01
SRrUx7RMcfWmIpHwDE1meCwEbuhLO70Ng0tO1/YPOO7+44reyrTUfFCzOje1
rN+EKgr/tf29HQBTHvduqHzIwCQDEtL+Q9Fw2id61nrPFaiSD6kk0MRhZRuV
yrnzeSC1K3D2M2so9HiwpRysB8J2HZXW8z9FSKV9ZH5NOAWpbQa4v/P5oi1l
4YCAVQLe0o1ovUOWg3mBx/9QkeeD0bBQgvspJzh/dEZzY68dw1+r7ZhV16H5
Pm1tkUQXOMsfFa1KScMKN8P2Dp8anJ/0esesmoNvn37sPeXQAOeMFNJINGqx
6O+7uijqZrCaF2RuTqtDNstST9+IWGznKLZ05swCQzJ+YtmmTghmF0m7ZVMI
mUNU/3E3NGDQm8kyg+xq2FGOcL69Xwqh3wmXskbqwUQq6vjjiwGoep1+pfRP
CHLWnfehKyqF+XxHL+UXFUCmSR4W/qsMrXsZjGZsWpCJY5n6u2ocSAeZRXad
DIJUgysUqSmNQF/i1tLv2QpcbXU++k5RuNBeG3FdJBKo5DUpdM8GgaNnjv/Z
J0Ww72Tx4wFpNhxKp76hpu+LdU61MZrdLuBaFFl+iN4MLmTab80FmeBXERY1
CYFC0FAr8thpcUPtH2aktg4P8JK1+0ZJfxmMjjj3SMgX4A1ekYrrRoX4/TU1
id14BHidGuTlPCoFvkbqZwgvtCOPeATX+et5SBxCkdHR2YR3Tu7H3myqw7d0
EeWF5JHI9p6RRVYrEmNFUjxFzjpBi8WSnmClLTRNlIT5hkSgbn53t2lKAdI9
OVwnuGSNqq9bYIupGS72JgqkdFWikMrylRZiOYiVHPiSUp+C3yrDipIC85Fi
SaFhctETeW1qnuWxlcF3zYOLJfp++MucRND2XTBcsG5i5aeLAfH90CA3WgGk
YLTOZtLzxt8FBAILd+yBmjX18mevMjjpd/REwQlvDPc+dve7hCjGdv60PFLk
J77297f6KTdpUE5LK7wzkCheLnTNzrNBEX733vFaLEoH1U2bXi0Ga3AZGeJ0
SxZCrn6jJ2w8HKDaNxCdUi+BwVu/skIlLSF+wJMvMzUHKkvudt05YwzPb4mZ
1bXa4l27N+ovBCThZ+0+SbOTJTTQGJ9/tK+OEdUZskvcKcC7e/XjQG0SarrM
ElNsBUK3qfQnYbJQUEnyXWFOL8ZXD3tEcv8EoqvaRKOXSQZ6DMW+STodimme
y5vS5VviRG+OChzEW+PSDjmP36gKVJVxdg5v3cGAih6zvlvOOOfitNN+2Bv9
0v2CHra74wlSmS49Mi900JfKJnTzxZGU/jbLSiO4dSb/iOyZSGwf1TD/Y2CM
A9czMk06zVCN9GXktGs+MK98ShDoiwKzE/KJ9FHFqN50al6TKh3UGh3dwl+k
Q3WDKqFRXRbmEAz/nN7MQRWd3x7z6sXA+md6Pl8+Fs3FjuR1+hWhL2NxHpKH
w6/tbtpC6kjg/XCPNj2iACRkL3LM300A3ZmZ1lCtODz+5TBbZUEevJPM7ktM
SoFnj/b2LY+k4LXMsgmj2wVIRVDITrVdg28WBfzy2r1AdbQs4g1HDrxRIi8i
22sCymdCVqX8uagxFNfivCOFn1fpNbWT84CYrmjN/XcT5E0+Yn8vFgVSR9Ik
B5ViQWy1Z/Xy01w8IlqwaS1TgX+P7HL8XHOFxMHPXB/O2GARtSLlG34OMJOm
SKaiCMLI5TVCUi5t/Do6ydVREYvFTdHK0r1VuLBU43yXtBAdV+6aO3pXgIV0
Ml0Yex7OeiR88q3NgKRRxrhU4Qp88G7wWZ23P7jTphW1y/oAy+QP7QnHLPAc
by0OCcuG/p8KfSEaMdjIUdSxdzEYWZaJbgezRkGQw3CkmaUvfJjrZRZ6pIJi
ZupXW7fTYKvi9TeOiWB4GnX3qGgSF1yf+Kblfj4Fzg5PpC/eDkfiBeFiGk85
FMsmO7RSXgxmEQwVF6tz0TvW4PBKjCCe7Ivv4dG2h/47ltTj+m4wzak8wWqb
DaHhH8X2oqIgxv+AICsjGThpv+Laoj3c30jo9ruYAb129swumI9ZetyU+z9i
MD9IdJjE0hNCVmmCE46FgGnWgcGdjkrsIFjPaPTxQR/tAvnKxkx8xcdypb0t
Alo+C56tKEzAFamQC1u0/uDxmNVrYVQTurhXhq9/KYMfUZYirxzLYKS64iSX
SyB0Ven/R87SAUtL1Nz3GLuBYIVP5MveM/R8JkVwjjQV2GVmn5ToVMId2d+5
Z7rbYc4zHc4Sd8NAYv2W7GQpRIS4V3j1pUFqWAuJch5/L2Oh92LKhiqIjCdl
dj+W7X2sw5V5lVMC/ObtNop2zgO336+jVEYBEM5/otXTWhDL1rjOPF8TQyPZ
qw7BvpZwtL3zWDeTCdZXnNDav6SOv/geJ3Hp2GPH9bnu83880PeLzkLBZROk
fMMQ3HT8DvbTaIzUTNlgVnTv5mBTAFxqEyQ5rOAJy0mOD75F2sHtgUpiq8c+
/953id5kRRBpTtqimYwJZplfD4gfkgH6WzKBuvWm+EzWMuOTSm+vOauGolys
J6RKqBHc4zuH/l17Z/6OaQJr4PfAtF4DmOmfJgmOUAUWs2M+/ssmoKjpP7+e
pf5vnmeYr+i7QvDOshHHa23Q9BnP61GwRZ+43xW9jFKgOef6TXRGHitqQ0z2
h71QN6upI9ncGG+8fEuaPSiILD59su6jVvicTYR2h9QAfWRWPy3+4w6/4vcF
h01M0MAXjxNM2+JEU+9HT0od2GyoeESpbgm6zTrHxwhkQXXs3W/1MFbs5cwW
NPCUBdKNoGgqY13Y9DSc3TzjC9Huaya8NkZoIPdpzpjIDVRFX/Nc+haAySyu
5Gs6RtBX8+Hcj7QwoC65YFOo7ovzLAZay5ftYX7EzsOAJhz/jHxL6aFLBOXD
RfcqJXzg3Lron/3VADxgZ/UpZQ1Gk6CjBpe/ZuJ3/+ibG/ez8LU5lR3hQjru
OvwhCm8KhFmo/+9mixlqlTpVcE0Uwa2LpNZF2zn4aT/0yPaPMsilCH+mnVOP
Oa1TnW4kNqjnZmXopFmEWjW8X9M178G7/QOy4Jr7ENSkL/9gpxS1K+ZVR0+2
QMDQEhsjFCNuXg9blcpGMfb4iJEbETBA6/JEgL0E/b1SOdzDWtAm5vqM9NEO
TNwO0xz8kotFAqqyGer5WHF1q2iIvgumtAtWBxybkZBMiXFvrwRd2EW7mHUL
IeGIzeJh8n9/pl7Em/N1IX4emC/3PZQOP9M4nu+65uPIJ8JFHq8mvCByL7t0
PRy/ebpnnHrUCpHrDn5HJ6vhWoWj7bJlJp5hf6okHx4BN06vdvIdq0Sf5BGi
z1f+cZEqyx1R4nLIUJ/W/Dcy8JHxxt0XQ+n4sVy/7vrfGjhv8tb9IDwVQ7ZY
XigU5YP1YK/Z57Ek7CY5JNjIGwvlyebfLtNz4tqo0HCCdS0aKR3K2j5TjKZM
KZo1CQ0wzpKn4Y6RWOPLxjNp4gWcbf2r47FGSFT7aE/Hyw3Ugh6aZp4zA7ay
QgV6GgcU6qml+n3cHbRek01NJClhRRlpG2VpMlAanczdHvHFBZp1+jB5czB8
XrpAr66LWl9eT9eccIAiDYMXwQ+1e29zNxZ3JPsBtbMu0+ITm171WIpWypR/
Ordc+Mwn1ANUGMYNtPJ6wCeawDR2tAhNmJX8wccFi2Umzr5OaQBe+pjK0xgP
dRZtKmuV/3z7kGNg8c1OTCV9/lviei2+0tESnz3dBlq6I4ddujKBvfD4Ze78
ZnxWVzhl5dyNBU0mbKyrjfDo9F6qgichGPOOaanUlkGxUU5D0Z9S8L80SJ7U
2oJCTt8frhtW4r4N/fjzBF+484vlC43yQO/uNz++gU8P4IR10cfpFSN8f12C
vZA2Bxh9JddcA9rBLEH8hJJYHX7XraAb3q5F7J3fiimshpuG4dR10TUYz7HH
wHxsDDzvM0pW5HTCYZsuCsrlUVj42tZ7jeMernz02yd/2gLcdsm3jg3HQU7e
cSoo6AFFd2/2vOttoGZ7jvSwVgkeG/3T/tqgC0hrWQUeCdXj2bJvPKQhAcDz
mbl6rSIB77kdiFxbrcJL17I7RCkRD1bTNuXdw7F62/JIz9syYJLmep7Anozh
gtHhCVRtKBHW00nT4Qh/d5xmFnPrYVdtQ1FrrQPUwmwtG6PLseEwg7u7ahha
uY7cq5wtBmKDiAMTizowYb0QqfOoGnrjBM5pVLnAfzrir2QoMsCC6cdzZ34/
WDR+d5KxvhJzSnWVrq4mwbc7Ut6Mb/2xXvXKl63KSHARf2aVp5QMX/gu1XwM
9gSTEPOR4Uw3mEsmLOo8kY+j0q+judSyYYtWaL+hMRsGGs6eU6RPAnF7PZ6x
x7EgGCFuMU2ai6aSRgt2MxVw7MyxtaUbkTC3nS0tnlmCNXcNvY/eT4JlTFzm
fZ6BZS9nw7jlgtHtXKO6EG08utwaOsts4goZhvaNd8+UQNLrLuITiqb4TviF
xBXOZEhTmGig346Dz6QRTJXpMfCSzDbga7Qdng0vnyD+p2MHam7MX7JTAU6d
nm+2K8OqPH8+p/Io9B0addz5UgCs/k3UQyHpGAv7Bqe1e3BTKq/k7IADMlD8
mHvpWgdvJn+9lhnlxoPolkHe8+XYYcRcMrrhjmFpospE0uVgdGH/0CPPEqAK
j/yePF+J+iSZby6lpaHCxs6dNP0CCDJd1F367Az5Gr9I9VclQJLNWaHSNxLs
CeVWun9ZoqDp2P3sqUiwIH5mGsgRDQdXXrdnOJgCsdDbXxEL4VDsFdIYHVoH
17cXm3NK2uAw568bMW7FSEnqOnqOsgKTOfZabXjbMbqx7mFryxEc3A8fs3sf
i/1pp3OThLzx+LjYm741UyTie3KomicF3pucPkGvZA4OM0lb848aYXuPiLz/
RTv+b//v//b//m//7//f/b9v6otOvrko1+vN3dNNSxQGFxeomcce6PcaXqx6
KHOeBWpFr6dsxhGjB8X0wnUub/DNG8jbCHcG6tPpieo/GRDbRlXuuakBS7Ct
+7MlNSSMXUv8LcmHX1suaeTxOWDP90quU/k3YE5JTqKIzA1dfik6MCioo2qT
ctKL1RAwpCtz9HuiB4ocWi9NYqxhe2hPJfCmFlzW1+JPCXMCOf/uEDofNbhi
I11Lc98M34m9Xz1/yAGG75fzdsq4osgXgbyzseO9w+NXnt+4qoYlFFN+uxmX
YeRwOu2YrQkofz5+6CepAwy+mQ1u8fTCo4InAvUq0+FGOyhNXEmBFAvurJa6
AvCXucRT9MgTyHinCEffmeCsYdcbBu4QeEqrHy52ng8EI8nXLq8lYV5lvR7N
E3fkf3W+V0cnGHmkXw2VvA7CDQ0C57bbmWCkwsjGNWoJtdXbCcqT3mCe71Pv
zmgEkzF3No37XSCHi07qcnkKfmuUZHyoHASHIm/l3pfRgfXY74ySLvFwQGmp
cvlkKnRb/N2YpUuCybkKoXtu6jh9vF7WhjYYLGfJnE/6p8Bm1lAJ+6ABDHW6
kLywDsbBOq/vIm9jkcVh0+xFdzxGhHm0SRoZAfcppY5uHSNMEp8tvMieCL94
6j6+LHLHLzuBfw7xpmJRhOUJFzoR6HiV310t5wSU34hI7Ykz8UIy9bOm1/qQ
qSVYLrAbjBPhbOSqR+sgpJEJhDW94UPxy+9REgkwHV80aBwejZyrWnaKH8Ix
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
                   "], "Processor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "FinalDimension" -> 128, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"|>, "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", 
                "Log" -> <|
                 "TrainingTime" -> 0.0401088, "MaxTrainingMemory" -> 3158584, 
                  "DataMemory" -> 19056, "FunctionMemory" -> 758840, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 11, 29, 17, 59, 3.8697837`8.340261671959663}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
             "Version" -> {14.1, 0}, "ID" -> 3733779944680020595, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 8544993552421202197|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"BENAR" -> 1, "HOAX" -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 6919228972511305067, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 2359065663380275966|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "BENAR" -> 0.5076923076923077, "HOAX" -> 0.49230769230769234`|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{31, 36, 51, 62, 114, 85, 82, 97, 114, 8, 75}],
           "NumericalThresholds" -> {-0.000017684764316072688`, 
           0.060381270945072174`, 0.0003687958524096757, 
           0.0032594818621873856`, -0.004683398641645908, 
           0.011495616286993027`, -0.0013152851024642587`, \
-7.01399329727792*^-8, 
           0.004435698967427015, -0.0032895696349442005`, \
-0.0024777455255389214`}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, -5}, {-1, 4}, {5, -4}, {-2, -3}, {
            7, 10}, {-6, 8}, {-7, 9}, {-8, -9}, {-10, 11}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 7, 88, 127, 22, 104, 87, 121, 13, 62}], 
          "NumericalThresholds" -> {-0.0020018734503537416`, \
-0.005774909630417824, -0.03058404102921486, -0.018052658066153526`, \
-0.024004263803362846`, -0.03843369707465172, 0.011784008704125881`, 
           0.010144568048417568`, -1.7390769713188092`*^-8, \
-0.016059761866927147`}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 
            4}, {-2, -3}, {-4, -5}, {-6, 7}, {8, -11}, {9, -10}, {-7, 
            10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{75, 38, 100, 120, 61, 89, 45, 3, 32, 30, 27, 
            108}], "NumericalThresholds" -> {-0.07815894484519958, \
-0.00936838984489441, -0.0581340417265892, -0.03102581575512886, \
-0.037318941205739975`, 0.00007162422843975946, 0.001107489108107984, 
           2.1390957893885343`*^-9, -0.0034147456753998995`, 
           1.4244940338414835`*^-8, -0.0016548038693144917`, \
-0.0006632410222664475}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {-3, 4}, {-4, 5}, {6, 
            7}, {-5, -6}, {8, 12}, {9, 11}, {-7, 
            10}, {-8, -9}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{46, 116, 27, 38, 63, 84, 92, 92, 91, 93}], 
          "NumericalThresholds" -> {0.04301540181040764, -0.06136426702141762,
            0.002079420955851674, -0.03739825263619423, \
-0.0032539796084165573`, -0.004218877758830786, -0.04604562371969223, \
-0.007756562437862158, 1.7750276981587376`*^-7, -0.005568349733948708}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {-1, 3}, {4, -9}, {5, 6}, {-2, -3}, {
            7, 8}, {-4, -5}, {-6, 9}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{80, 39, 111, 29, 111, 64, 128, 52, 30, 63, 
            93}], "NumericalThresholds" -> {
           0.007582482881844044, -0.03350701183080673, 0.014826186001300812`, 
           0.007510558236390352, -0.0003495979472063482, \
-0.021775061264634132`, -0.0037593762390315533`, 
           0.042472951114177704`, -0.0004636380763258785, \
-0.019998589530587196`, -0.00041455295286141336`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {-1, 3}, {4, -7}, {5, 
            6}, {-2, -3}, {-4, 7}, {-5, -6}, {9, -12}, {10, 
            11}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{54, 108, 16, 82, 49, 73, 86, 97, 81}], 
          "NumericalThresholds" -> {
           0.029866505414247513`, -0.034499477595090866`, 
           0.014861867763102055`, -7.046840437396895*^-6, 
           0.017416981980204582`, -0.006205502897500992, \
-0.004507339093834162, 0.01985122822225094, 0.0159213375300169}, "Children" -> 
          RawArray["Integer16",{{2, -10}, {-1, 3}, {4, -9}, {5, 8}, {
            6, -5}, {-2, 7}, {-3, -4}, {9, -8}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{83, 52, 2, 42, 100, 33, 19, 29, 60, 73}], 
          "NumericalThresholds" -> {0.001999545143917203, 0.03405401110649109,
            0.0032831390853971243`, 
           1.1064292948503862`*^-7, -0.01826181821525097, 
           0.013735233806073666`, -0.014383401721715927`, \
-0.024538083001971245`, 0.025595463812351227`, 0.023949207738041878`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, -6}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {8, 9}, {-7, -8}, {10, -11}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{25, 67, 98, 106, 119, 8, 112, 101, 9}], 
          "NumericalThresholds" -> {-9.984962161979638*^-6, \
-0.10203199088573456`, -0.06543641537427902, 
           0.0029129546601325274`, -0.0009775263024494052, \
-0.0150870056822896, -0.01326929684728384, 0.00304277241230011, 
           0.060485973954200745`}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, 3}, {-3, 4}, {5, 9}, {-4, 
            6}, {-5, 7}, {-6, 8}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{8, 5, 93, 46, 111, 116, 91, 105, 98, 46}], 
          "NumericalThresholds" -> {-0.008639128878712654, 
           0.003724713809788227, 0.017826830968260765`, 0.048063989728689194`,
            0.014826186001300812`, -0.022589242085814476`, \
-6.679538728349144*^-6, 
           1.2911351632283186`*^-7, -0.02081521414220333, \
-0.01628771796822548}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 10}, {5, -9}, {6, 
            9}, {-3, 7}, {-4, 8}, {-5, -6}, {-7, -8}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{14, 49, 58, 128, 69, 49, 112, 18, 8, 12, 34, 
            87}], "NumericalThresholds" -> {
           0.042777642607688904`, -0.07811298221349716, -0.2424561232328415, 
           0.008986958302557468, -0.005740996450185776, 0.006769360508769751, 
           0.0014010315062478185`, -7.217696662564776*^-8, \
-0.002152338158339262, -0.0319867767393589, -0.003163393819704652, \
-0.0026376317255198956`}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 4}, {-1, -2}, {5, -10}, {6, 
            7}, {-3, -4}, {8, 10}, {9, -7}, {-5, -6}, {-8, -9}, {
            12, -13}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{58, 16, 99, 69, 88, 57, 33, 53, 58, 70}], 
          "NumericalThresholds" -> {-0.00818021222949028, \
-0.014665142633020878`, 
           0.007266837637871504, -0.023818498477339745`, \
-0.12903879582881927`, -0.019077716395258904`, 
           0.06378413736820221, -0.010801391676068306`, \
-0.006037367042154074, -0.004060870036482811}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {4, -4}, {-2, -3}, {-5, 
            6}, {-6, 7}, {8, -11}, {-7, 9}, {10, -10}, {-8, -9}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{47, 107, 32, 113, 112, 110, 125, 40, 34, 81, 
            6}], "NumericalThresholds" -> {0.010257745161652565`, 
           0.006256041582673788, 
           0.03739026561379433, -1.1038541458674445`*^-7, \
-1.558310174232247*^-7, 0.004817729815840721, -0.02868609130382538, 
           0.07067430019378662, 0.03710443153977394, 0.016597582027316093`, 
           0.011959461495280266`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 6}, {4, -4}, {
            5, -3}, {-1, -2}, {-5, -6}, {-7, 8}, {9, -12}, {10, -11}, {
            11, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 99, 46, 78, 111, 110, 31, 70, 52}], 
          "NumericalThresholds" -> {0.015218036249279976`, 
           0.03826180845499039, 
           0.048063989728689194`, -0.021651577204465866`, \
-0.0017834509490057826`, -0.02401864528656006, 0.10090242326259613`, 
           0.028961366042494774`, 0.036680303514003754`}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {
            4, -3}, {-1, -2}, {-4, -5}, {-6, 7}, {8, -10}, {
            9, -9}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 121, 87, 86, 1, 29, 32, 121}], 
          "NumericalThresholds" -> {0.00003137165185762569, 
           0.010144568048417568`, 0.002383622108027339, -0.04674503579735756, 
           1.1110837805361484`*^-9, -0.035219527781009674`, 
           0.03330155089497566, 0.06409668177366257}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 8}, {4, 6}, {-2, 
            5}, {-3, -4}, {-5, 7}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 2, 1, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{85, 90, 73, 97, 44, 42, 57, 114, 75, 26}], 
          "NumericalThresholds" -> {-0.02161272242665291, 0.03840149566531181,
            0.023949207738041878`, -0.032859206199645996`, 
           0.029583096504211426`, 0.012296774424612522`, 
           0.057736657559871674`, -0.00032489883597008884`, 
           0.015593699179589748`, -0.014320575632154942`}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {
            6, -11}, {7, 10}, {8, -8}, {9, -7}, {-5, -6}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{68, 66, 45, 28, 34, 23, 128, 76, 43, 112, 30, 
            18}], "NumericalThresholds" -> {
           0.007910612970590591, -0.03904752433300018, 0.018287377431988716`, 
           0.0003154490841552615, -2.5794470275286585`*^-6, 
           0.015231267549097538`, -0.00033631763653829694`, \
-0.033571816980838776`, 0.014133710414171219`, 0.0014010315062478185`, 
           0.016145074740052223`, 0.011182760819792747`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {-1, 3}, {4, 8}, {5, 6}, {-2, -3}, {
            7, -6}, {-4, -5}, {-7, -8}, {10, -13}, {11, 
            12}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{103, 12, 97, 65, 54, 20, 57, 70, 21}], 
          "NumericalThresholds" -> {
           0.01123095490038395, -0.0004629228205885738, -0.05652903392910957, \
-0.017805879935622215`, -0.07843928039073944, 1.0580571974116992`*^-8, 
           0.011662867851555347`, 
           0.016970256343483925`, -0.006569322198629379}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {-4, 
            6}, {-5, 7}, {-6, -7}, {9, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 106, 29, 43, 41, 73, 105, 125, 87, 75}], 
          "NumericalThresholds" -> {-0.003334063570946455, 
           0.013292132876813412`, -0.006692816037684679, \
-0.003772944677621126, 0.02686389721930027, -0.09216999262571335, 
           7.92398395788041*^-8, -0.00008555818203603849, \
-0.048087041825056076`, 0.02587524615228176}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {6, 
            10}, {-5, 7}, {8, 9}, {-6, -7}, {-8, -9}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{128, 76, 89, 102, 110, 40, 87, 26, 37, 50, 
            85}], "NumericalThresholds" -> {
           0.004365647677332163, -5.294294624036411*^-6, 0.04602941498160362, 
           0.045583076775074005`, -0.008033663034439087, -0.00734140258282423,
            0.011784008704125881`, 0.0020621404983103275`, 
           2.5585347174228446`*^-8, -0.0021041908767074347`, \
-0.0832207128405571}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 7}, {4, -5}, {5, -4}, {-1, 
            6}, {-2, -3}, {8, -9}, {9, -8}, {-6, -7}, {-10, 11}, {-11, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{87, 66, 35, 74, 95, 4, 51, 67, 21, 36, 82}], 
          "NumericalThresholds" -> {
           0.002383622108027339, -0.01701139472424984, \
-0.022371556609869003`, -0.006282709073275328, -0.03878863528370857, 
           0.00014801144425291568`, -0.020229969173669815`, 
           0.00272921659052372, -0.029985379427671432`, 0.04233214259147644, 
           0.022207841277122498`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 5}, {-1, 4}, {-2, -3}, {-4, 
            6}, {-5, -6}, {8, 10}, {9, -9}, {-7, -8}, {11, -12}, {-10, -11}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{93, 93, 112, 114, 38, 26, 59, 45, 13, 8}], 
          "NumericalThresholds" -> {
           0.024703767150640488`, -0.0361749604344368, 0.0030861254781484604`,
            0.011394492350518703`, -0.0070439791306853294`, \
-0.003020837903022766, -0.06611654907464981, 0.009770751930773258, 
           0.04283516854047775, -0.009048102423548698}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 4}, {-1, -2}, {5, -9}, {6, 9}, {
            7, 8}, {-3, -4}, {-5, -6}, {-7, -8}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{114, 16, 65, 7, 106, 18, 84, 122, 95, 109, 
            108}], "NumericalThresholds" -> {0.011394492350518703`, 
           0.02412801794707775, 0.04779398813843727, 
           0.0004408973327372223, -0.0033389409072697163`, 
           0.014131873846054077`, -0.02919669821858406, \
-0.0020603789016604424`, -0.06862907856702805, 
           0.012270809151232243`, -0.00011651680688373744`}, "Children" -> 
          RawArray["Integer16",{{2, -12}, {3, -11}, {4, 11}, {5, 10}, {6, 
            8}, {7, -3}, {-1, -2}, {-4, 9}, {-5, -6}, {-7, -8}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{102, 42, 113, 3, 29, 3, 21, 105, 87, 14, 86, 
            54, 70}], 
          "NumericalThresholds" -> {-0.029870152473449707`, 
           0.011358669027686119`, -0.05163257569074631, 
           1.1246552134025478`*^-8, -0.020296473056077957`, \
-2.9823457481370497`*^-8, -0.050699397921562195`, -0.016286345198750496`, 
           0.011164110153913498`, 
           0.0007617733790539205, -0.019117267802357674`, \
-0.0028363820165395737`, -0.006928853690624237}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {-3, 4}, {5, 11}, {6, 
            7}, {-4, -5}, {-6, 8}, {-7, 9}, {10, -10}, {-8, -9}, {-11, 
            12}, {-12, 13}, {-13, -14}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 
            2}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{108, 112, 76, 12, 56, 103, 52, 37, 118}], 
          "NumericalThresholds" -> {
           0.006347808986902237, -0.010318993590772152`, -0.03585520014166832,
            8.138137275182089*^-9, 
           0.002019234700128436, -0.0006096684373915195, \
-0.04478583484888077, -0.0709398165345192, 0.02303483709692955}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {-1, 3}, {-2, 4}, {5, -6}, {-3, 
            6}, {-4, -5}, {-7, 8}, {-8, 9}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 2, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{54, 36, 124, 107, 124, 117, 50, 8, 79, 40, 
            38}], "NumericalThresholds" -> {0.029977945610880852`, 
           0.0019351255614310503`, -0.0013205166906118393`, 
           0.023366032168269157`, 
           4.173720924427471*^-8, -0.006439300253987312, 
           0.01788359507918358, -0.00006874581595184281, \
-0.013521392829716206`, -0.009809029288589954, -0.0675891637802124}, 
          "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 7}, {-1, 4}, {5, -5}, {-2, 
            6}, {-3, -4}, {8, -10}, {9, 10}, {-6, -7}, {-8, -9}, {-11, -12}}],
           "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{80, 8, 53, 32, 43, 56, 32, 57, 13, 86}], 
          "NumericalThresholds" -> {0.005640243645757437, 
           0.00023798810434527695`, -0.00002184647564718034, \
-0.015077352523803711`, 0.0028319451957941055`, -0.02239781990647316, 
           0.029434116557240486`, -0.087750643491745, 
           0.006299551110714674, -0.008363552391529083}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 7}, {4, 5}, {-1, -2}, {
            6, -5}, {-3, -4}, {-6, -7}, {-8, 9}, {-9, 10}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{46, 66, 47, 95, 71, 29, 128, 111, 84}], 
          "NumericalThresholds" -> {
           0.048063989728689194`, -0.060519129037857056`, 
           0.0861227959394455, -0.04300309345126152, -0.009510478936135769, \
-0.003934759646654129, 0.010589053854346275`, 0.017160363495349884`, 
           0.0352075919508934}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {-1, 3}, {4, -8}, {-2, 5}, {6, 
            7}, {-3, -4}, {8, -7}, {-5, -6}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 2, 2, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{73, 26, 96, 112, 108, 105, 26, 37, 43, 42, 4, 
            40}], "NumericalThresholds" -> {-0.03706372156739235, \
-0.00787652749568224, -0.02945990301668644, -0.036270223557949066`, \
-0.01780242659151554, -0.0014534812653437257`, -0.078790083527565, \
-0.0014838961651548743`, 0.0015240504872053862`, -0.00001574472480569966, 
           0.0020395200699567795`, 0.027924593538045883`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {-4, 5}, {-5, 6}, {
            7, 9}, {-6, 8}, {-7, -8}, {10, 11}, {-9, -10}, {-11, 
            12}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{126, 87, 36, 79, 94, 85, 62, 15, 107}], 
          "NumericalThresholds" -> {0.0029820341151207685`, 
           0.002383622108027339, -0.008605382405221462, 0.03556453809142113, 
           0.0001386049116263166, -0.027717020362615585`, \
-0.02731814980506897, -0.0016545902471989393`, 0.042598385363817215`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 7}, {4, 5}, {-1, -2}, {
            6, -5}, {-3, -4}, {-6, -7}, {-8, 9}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 1, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{67, 92, 35, 63, 87, 98, 82, 54, 120, 29, 63}],
           "NumericalThresholds" -> {
           0.0406397320330143, -0.046164002269506454`, -0.02124427631497383, 
           0.041849635541439056`, 0.011277470737695694`, -0.02081521414220333,
            0.0048249163664877415`, 
           0.006390147842466831, -0.048227567225694656`, -0.05169140174984932,
            0.028325175866484642`}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 4}, {-1, -2}, {5, -9}, {6, 9}, {
            7, 8}, {-3, -4}, {-5, -6}, {-7, -8}, {-10, 11}, {-11, -12}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{60, 127, 91, 20, 43, 118, 66, 17, 118}], 
          "NumericalThresholds" -> {0.027715692296624184`, 
           0.0049837990663945675`, -0.015022709034383297`, 
           0.0035827194806188345`, -2.6122330609723576`*^-7, \
-0.0022036379668861628`, 0.0017713495763018727`, -0.0401219017803669, 
           0.004394077695906162}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {-6, -7}, {-8, 9}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{93, 68, 23, 37, 73, 119, 89, 58, 116}], 
          "NumericalThresholds" -> {0.024703767150640488`, 
           0.009352775290608406, 1.561175011488558*^-8, 
           2.5585347174228446`*^-8, -0.04279313609004021, \
-0.009517494589090347, 0.007900881581008434, -0.00818021222949028, 
           0.0022853754926472902`}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {4, 
            5}, {-1, -2}, {-3, -4}, {-5, 7}, {8, -8}, {-6, -7}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{90, 77, 49, 23, 21, 103, 116, 32, 73}], 
          "NumericalThresholds" -> {-0.029887545853853226`, \
-0.010245878249406815`, 0.05133776366710663, -0.017641304060816765`, 
           0.06876616925001144, 
           0.0039938464760780334`, -0.018509605899453163`, 
           0.036579519510269165`, 2.00813925488319*^-8}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -3}, {5, 7}, {
            6, -6}, {-4, -5}, {-7, 8}, {9, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 1, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{52, 76, 88, 128, 60, 52, 127, 105, 86, 19}], 
          "NumericalThresholds" -> {
           0.006212825886905193, -0.05245598778128624, -0.061220087110996246`,
            3.4307259255683675`*^-8, -2.507689259800827*^-6, \
-0.03220383822917938, 0.000777471112087369, -0.0035644578747451305`, 
           0.008488704450428486, 0.019885599613189697`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {-1, 3}, {-2, 4}, {5, -6}, {
            6, -5}, {-3, -4}, {8, 10}, {9, -9}, {-7, -8}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{54, 101, 69, 88, 6, 109, 88, 119, 117, 75}], 
          "NumericalThresholds" -> {0.029977945610880852`, 
           0.002086402615532279, -0.05596223846077919, -0.05012889578938484, 
           7.824741410367153*^-10, 0.011550875380635262`, 
           0.023664699867367744`, 0.0037506651133298874`, 
           0.009916549548506737, 0.0030723887030035257`}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 6}, {-1, 4}, {-2, 5}, {-3, -4}, {
            7, -9}, {8, -8}, {9, -7}, {-5, -6}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{41, 38, 46, 79, 76, 87, 120, 27, 18, 106}], 
          "NumericalThresholds" -> {
           0.02112448215484619, -0.047436412423849106`, -0.04091515764594078, 
           0.001202352810651064, -0.03312239795923233, -0.005855511408299208, \
-0.003334063570946455, -0.0025914593134075403`, 
           0.041158296167850494`, -0.011950071901082993`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 4}, {-1, -2}, {5, 
            6}, {-3, -4}, {-5, 7}, {-6, -7}, {-8, 9}, {10, -11}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 83, 41, 59, 117, 42, 40, 37, 78, 105, 17,
             24}], "NumericalThresholds" -> {-0.0020018734503537416`, 
           0.039156634360551834`, 0.007708254270255566, 
           0.004184149205684662, -0.003926508594304323, 0.02179812453687191, 
           0.028286579996347427`, 2.5585347174228446`*^-8, 
           0.016003815457224846`, 7.92398395788041*^-8, 
           0.03691583499312401, -0.0018436383688822389`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, -6}, {4, 6}, {
            5, -3}, {-1, -2}, {-4, -5}, {8, 12}, {9, 11}, {
            10, -9}, {-7, -8}, {-10, -11}, {-12, -13}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 
            1}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{90, 5, 21, 76, 114, 91, 37, 94, 37}], 
          "NumericalThresholds" -> {0.028689531609416008`, 
           0.006036565639078617, 0.035212524235248566`, 0.006222681608051062, 
           0.01209897082298994, 0.030042361468076706`, -0.03572478145360947, 
           0.011738209053874016`, -0.06454602628946304}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 8}, {4, 7}, {5, 
            6}, {-1, -2}, {-3, -4}, {-5, -6}, {-7, -8}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 1, 2, 1, 2, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{54, 125, 115, 114, 8, 107, 43, 94, 17, 127, 
            122}], "NumericalThresholds" -> {
           0.024991290643811226`, -0.00008090446499409154, \
-0.005810445640236139, 
           0.0011899133678525686`, -0.00006874581595184281, \
-0.010099074803292751`, -0.07220438867807388, 
           0.0001386049116263166, -0.011273843236267567`, \
-0.0005621869931928813, -0.0012586208758875728`}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 7}, {-1, 4}, {5, 
            6}, {-2, -3}, {-4, -5}, {-6, 8}, {9, 
            10}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{19, 85, 102, 85, 126, 99, 30, 101, 81, 1}], 
          "NumericalThresholds" -> {-0.0824294239282608, 0.0525570884346962, 
           0.007648577447980642, 
           0.011495616286993027`, -0.010359921492636204`, \
-0.0033076289109885693`, -0.03559310734272003, -0.031581975519657135`, 
           0.03203351050615311, -8.878952018065434*^-10}, "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -11}, {4, 9}, {5, -7}, {-2, 6}, {
            7, 8}, {-3, -4}, {-5, -6}, {10, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{89, 50, 98, 79, 76, 63, 128, 1, 87, 6}], 
          "NumericalThresholds" -> {-0.0004891838179901242, \
-0.050514187663793564`, -0.06543641537427902, 
           0.032805174589157104`, -0.018977245315909386`, \
-0.0032539796084165573`, 
           0.0041920896619558334`, -5.827329285779115*^-9, \
-0.047822192311286926`, 8.890939540151521*^-9}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {5, -5}, {-3, -4}, {
            7, 9}, {8, -8}, {-6, -7}, {-9, 10}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{29, 20, 116, 76, 63, 72, 71, 20, 111, 63}], 
          "NumericalThresholds" -> {-0.040963348001241684`, \
-0.028826411813497543`, -0.00673762708902359, 
           0.04869839549064636, -0.005441279616206884, \
-0.032084789127111435`, -3.928359504357104*^-8, 
           0.0030799813102930784`, -6.068936642122935*^-8, \
-0.0032539796084165573`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 7}, {5, -6}, {-3, 
            6}, {-4, -5}, {8, 10}, {9, -9}, {-7, -8}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{42, 120, 93, 109, 94, 121, 114, 81, 86, 91}], 
          "NumericalThresholds" -> {
           2.0246571352799947`*^-7, -0.10812827944755554`, 
           0.00247501814737916, 
           2.9752996510978846`*^-8, -0.004802502691745758, \
-0.004917944315820932, -0.0025028004311025143`, 0.0159213375300169, 
           0.01091359555721283, -0.027121029794216156`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {-1, 3}, {4, 6}, {
            5, -4}, {-2, -3}, {-5, 7}, {-6, -7}, {9, 
            10}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{94, 50, 16, 110, 73, 38, 9, 79, 45, 41}], 
          "NumericalThresholds" -> {-0.0374714732170105, \
-0.047233812510967255`, -0.011712294071912766`, -0.0004840708861593157, \
-0.006205502897500992, 0.10084841400384903`, 
           4.045165979960075*^-9, -0.007746587041765451, 
           0.0036214811261743307`, -0.0294308140873909}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {5, -5}, {-3, -4}, {
            7, -11}, {8, -10}, {9, 10}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{5, 104, 1, 12, 81, 33, 67, 64, 58}], 
          "NumericalThresholds" -> {
           0.003724713809788227, -0.00987633503973484, 
           2.4350441663045785`*^-9, 0.009676304645836353, 
           7.792035461307023*^-8, -0.010141252540051937`, \
-0.03867818042635918, -0.0825866162776947, -0.05148060619831085}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 5}, {4, -3}, {-1, -2}, {-4, 
            6}, {-5, -6}, {8, 9}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 2, 2, 2, 2, 2, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{42, 118, 88, 47, 66, 16, 50, 122}], 
          "NumericalThresholds" -> {-0.00001574472480569966, \
-0.09709455817937851, 0.026841197162866592`, 
           0.06220812723040581, -0.055836789309978485`, \
-0.032190997153520584`, 0.028583213686943054`, 0.00498999934643507}, 
          "Children" -> 
          RawArray["Integer16",{{2, 7}, {-1, 3}, {4, -6}, {5, -5}, {-2, 
            6}, {-3, -4}, {8, -9}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 1, 1, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{100, 27, 78, 97, 109, 72, 87, 1, 82, 46}], 
          "NumericalThresholds" -> {0.01870604418218136, 
           0.002676153089851141, -0.01143715251237154, \
-0.028996767476201057`, -0.007089066784828901, -0.0026219829451292753`, 
           0.026607677340507507`, 1.6378828959773273`*^-8, 
           0.011879599653184414`, 0.006406258791685104}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, -9}, {4, 5}, {-1, -2}, {6, 
            7}, {-3, -4}, {8, -8}, {-5, 9}, {-6, -7}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{39, 4, 64, 36, 11, 114, 73, 17, 115, 57}], 
          "NumericalThresholds" -> {-0.023035278543829918`, 
           0.007016741205006838, 0.005181698128581047, 
           0.007188459392637014, -1.6858257367857732`*^-6, 
           0.0026644570752978325`, 0.0004191522893961519, 
           0.012127714231610298`, -0.01214724499732256, 0.03213959559798241}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 10}, {4, 9}, {5, 8}, {-2, 6}, {
            7, -5}, {-3, -4}, {-6, -7}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{88, 110, 89, 73, 110, 107, 50, 1, 112, 77}], 
          "NumericalThresholds" -> {
           0.030070500448346138`, -0.00383737008087337, 
           0.003473804332315922, -0.0025148936547338963`, \
-0.01237888727337122, -0.0066965301521122456`, -0.020678211003541946`, \
-1.2768945012453514`*^-8, -1.558310174232247*^-7, 0.012723281048238277`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, 8}, {-5, -6}, {-7, 9}, {-8, -9}, {-10, -11}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{103, 108, 42, 39, 96, 59, 39, 126, 37, 126}], 
          "NumericalThresholds" -> {0.011469202116131783`, 
           0.03619004786014557, 0.02390238270163536, 0.02609912119805813, 
           0.039183661341667175`, -2.531858456222835*^-7, \
-0.00029031283338554204`, 
           0.00036063615698367357`, -0.04075879231095314, \
-0.0028285395819693804`}, "Children" -> 
          RawArray["Integer16",{{2, 10}, {3, 9}, {4, 8}, {5, -5}, {
            6, -4}, {-1, 7}, {-2, -3}, {-6, -7}, {-8, -9}, {-10, -11}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0|>]}, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, "Key" -> 
         "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], 
      "OOBConfusionMatrix" -> {{0.5714285748345511, 0.4285714251654488}, {
       0.4285714251654488, 0.5714285748345511}}, "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 0.8631817282827822|>], "Method" -> 
      "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "FeatureFraction" -> <|
         "Value" -> Rational[1, 8] 2^Rational[-1, 2], "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
        "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "Implementation" -> <|"Value" -> "DAAL", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Configurations" -> 
      Dataset[<|<|
          "Value" -> "RandomForest", 
           "Options" -> <|
            "FeatureFraction" -> <|"Value" -> Automatic|>, 
             "LeafSize" -> <|"Value" -> Automatic|>, 
             "TreeNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "Implementation" -> <|"Value" -> Automatic|>|>, "NaiveImputer" -> 
           Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5], 
           TypeSystem`UnknownType, TypeSystem`UnknownType}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
      Dataset[<|"Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "ModelUtility" -> Missing[]|>, 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`UnknownType}], <||>], "InputDimension" -> 128, 
      "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
    "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "bakteri bukan covid19 diperkuat hipoksia italia kementerian \
kesehatan melainkan mnyebabkan peradangan radiasi virus"}, "ID" -> 
           302169982824646901|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.9341159, 
      "MaxTrainingMemory" -> 3347528, "DataMemory" -> 23472, "FunctionMemory" -> 
      995360, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 11, 29, 17, 59, 4.3610921`8.392170236695657}, 
        "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9409612309186726`*^9, 3.940979117388483*^9, 
  3.940987258651024*^9, 3.941866744405737*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"03085f8a-6232-5e4e-951a-dab22d54aa9d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Text\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["128", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 128, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 128, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 977354774366526235|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5964736801689017400|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"" -> 1|>}, "MissingCode" -> Indeterminate, 
                    "Version" -> {14.1, 0}, "ID" -> 8928567103510828875, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {1}|>|>, "Boundaries" -> {{-0.5, 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 5412181252758401233, 
                    "Output" -> <|
                    "f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{1.}}, 
                  "Precisions" -> {12.711896857730567`}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.030376057328109846`}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 8327193644222201350|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 1, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.03037605732810983}, 
                    "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    1141341796882961439|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Mean" -> {0.03037605732810983}, 
                   "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                   "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   1141341796882961439|>], "InputDimension" -> 0, 
                "OutputDimension" -> 1, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4243662280806592300|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.0934729, "MaxTrainingMemory" -> 190416, 
                  "DataMemory" -> 7072, "FunctionMemory" -> 42112, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 11, 29, 17, 59, 4.51189`8.406933481242993}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-0.7608402945300776, -0.7608402945300776, \
-0.5102510733456789, -0.29285782483194944`, -0.28567613009884685`, \
-0.21599017280023688`, -0.16411757677520503`, -0.005973503207894077, 
                    0.04373386745093821, 0.05142288029632165, 
                    0.05324683311748989}, 
                   "LeftBoundary" -> -0.5102510733456789, "LeftScale" -> 
                   0.12529461059219937`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[0.2087302994725139, 0.08511048341462331], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 4270897793735380344|>], 
           MachineLearning`MLProcessor[
           "ToLowerCase", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 3288521766005748305, 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "RemoveDiacritics", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 4915787944086918060, 
             "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "TextToNominalSequence", <|
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", "(", 
                ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", "{", "}", 
                "|", "\\", ">", "/", "~", "`", "#", "^"}, {
               ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", ":P",
                 ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
               "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
             "Version" -> {14.1, 0}, "ID" -> 8661128169745179370, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
             "Index" -> MachineLearning`SortedHashAssociation[<|
               "KeyHashes" -> CompressedData["
1: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

                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 2954878381358838009, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 8544993552421202197|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"BENAR" -> 1, "HOAX" -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 6919228972511305067, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 2359065663380275966|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "BENAR" -> 0.5076923076923077, "HOAX" -> 0.49230769230769234`|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetGraph[<|
        "Type" -> "Graph", "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
              NeuralNetworks`LengthVar[1907867702]}, 
             NeuralNetworks`IndexIntegerT[1, 112]]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Embedding", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
duxOAT2pATfWZIKDYsHVi73yKLbREP8D8uF30g==
                "]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "ClassCount" -> 112, "$Dimensions" -> {
                 NeuralNetworks`LengthVar[1907867702]}, "$OutputDimension" -> 
               50|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                  NeuralNetworks`LengthVar[1907867702]}, 
                 NeuralNetworks`IndexIntegerT[1, 112]]|>, 
             "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                  NeuralNetworks`LengthVar[1907867702], 50}, 
                 NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "LongShortTermMemory", 
             "Arrays" -> <|"InputGateInputWeights" -> CompressedData["
1:eJwVyXk41okaxvGQJSRMSDWVmiJkqzTl9zySTo2yRFlakSja9JaaZMpF0jgZ
yhIqWRpR4mVG4f09D0ZSKaZRIdGUFhSqUW+0nNP88fle133dRht3egQpjhgx
Yrfa13j473OQSPz3r1T5dwT6b5tts+3fc9RXNl/1RgzANx57KNnkP3zieAku
DVHhGOuVgv6VOlrn6sr7lUVK1mmBB8NOaP1BmdV/bRMj3/6MNy0MeKH9BOwN
fy0qVWhyS60mr3+mY1feqsJjvAtp98hT7NFxkSW6k/l5Rg7NzHHEWd0q+KO+
FvZ+TkN3rTOgv8tXEB2c4Ej+H+zapk5RDbsoYaKcPklu0fktrTRlXKds3HRb
6PQTaeHRYjSfs49K+9biuwtJ4qbsqXhuoT1kbXekmveLMWP9HcHGZiPsSNAH
0/rlmGgs4LM/q4XC73/jjivfYXfycwov8SSFN4GgMMWAZ0cWC/Mlg6TON+j0
mlLqW0XwJdaR3k3cga8qgKHmB1EN8qiyrh6ee92GwHQdTo2up7/OeZL8f2dY
LXcO/vTUGzXvr+bsVR+E1lBrTn1zHEsWiBCac5jXeaaB0zUFnhEsoPMEqTDp
tBtIj6M4f003bMnLEWfntttNrd2FvvMn8m9FsTQ27xikuhbKEoM82MJPk8Pw
GPy+toyyR47mtsBkruiRU+6Go2Jamwv8ahwJ8uaLpH9hLgT4/S7MLa0WHzXE
i6puVgJ+M5qlqlFg4GoGr89fpJEai3G1cxF+/pCGOTyehjMXck/KFHyjUc93
3a2gsi8WHEkLLT9tl2VUmGDZ0HeUZjKLWxLGokXNeUhpXEHrHR3Y7cUe2pOa
aVf3SyaFxcayTmmY3YufM6hs+TRoajSjBUNquNU6hmZGRPATSRx+TrQVO539
eaXNPDA9EMFBagp0w18K2qpNwP0TcUHAYa4r6xVo+nV6rV9BWV2ecEbxBE+e
rsxW4bvtDqodFm61/hcCG7VxlLc2t1yOhmCTRXR4jAyctQPQsisdlQb3oczS
BBWea7Dr+bmcbT8s3guJEBOcfoTKDRf5ino72c5PAvu+UZzlupO25rtT9m07
NCvIohexr8Vl6pfwpWMiDtj6UfU/8TBcZgPZ/yTSJMNQnlTFIG2XYEJHN3kZ
XaIDSZ8gYPMQbB53mm9nLUXFYyv4jt4q8FS0wrjGy+Rd/x5Ulp+E/vQ3AkZN
p+KQExyhEkQhSyJwbPZiHHBLoRYVRTTOX4G1tyP5WmgTfOpvhocq1eLWg87g
+DIKX9514Z2h7hx1L1UMVjvKGVsLZAUsp0QvIHMNU2iPjMEjPVJYW1PO0VN/
gtG5j+jK8XX4Jl2JaqZ9C8dqdpHF3gyaFxZJe92NOTpsO/dGenKdoim/Vb0F
6a1VlJefSKmPvDhEN21Bl9wHBKdYfpVx2c6+4L3YUpQpPtw/jSe8nE1xd1W5
yecjBQ+Xgfy5Pp5tDGG9mgLy8AG8vWgD1j4wh560PnpmWkBweg0PyTLg3q7V
NCC35r3j8vGkWSbnJYThXwZR5NN8AYLCl8Huxo14U9JKxo7l4D3DTLiUVE/K
E6QiNemywS+mbFMeQxKXJvI7vEW4UfWZdNNPU+0fhfj35nVcanIVSHUbDsk7
4M+O/aLu8h38uOGEMGwmQPGRLJyll0Lh/p+FS37ubNw4F5NeO7L19RLeZFUN
0qLpuKlbh2Nzx7D0UAw/LfRCQ58AsWzxZKFQuRZ0dgdToSRo/vDHEcwztuPo
9vGkVaCKVcElUFvdQ1Vxm2D10CtRfjJevByygDoT4mUN9/Ox8atPoXWwp5rE
er1T9P3NkdyjkQ5dX0rg28pNtNcpk0Y0BNNoYTxPiCsRVR02Yk7PfZlLfhxW
eeuRwg/5sEylkM5FB2JHczF7SaKorssRlfrjRUsjPRyVtxTvv1uGxX3tcCHZ
Fk7Jlgh2B+6JH5VscdXWaD6opYlSpRQ4M2wBD4sMOfrB36CrVlD58U4yZ11e
Qu79xqIvDYqzOoF3WBty76JolG/xgeuRM/mJ11MSls2A/gptxgp9fHCtSbZ2
wIadXSfz4/BEHOxzELXbH1OWxlGaYiNg8t0gOLdOEYcTA3nokAL3LFSlWXO+
QHydA7n2jMGZKYb0dmAV3+xtA+vO5fSxt4rKpZGiZ/FZSI87xHVNRpB07iq0
+G6kh+sHoRWKYc9ISywnU16UY0ndGlpYaTEAq6OsMKDABF1U0lldMQpP2S+h
XINU2dkiF/T9IsLKp/qse7eQzEuPwzzls2C+5REYzZCR3eAlqrzaAQ2SUngi
306j1jSQXrc5exv6coX/MLTZvKNGige3oDZx7cMawv4uUD05jSs93bm52ZT+
D20ykhQ=
                "], "InputGateStateWeights" -> CompressedData["
1:eJwBcgGN/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CQAAAAkAAAB2DNa96/W+vVT4kz7/9qK+0oGovh067z7zAdS+y6VGP6AdgL7q
lom+/4kBvitmJD5rKTM/alv/PIMGzLvRZAs++TQWvkuT0T3GLVC/kVAnPCcm
HT81+Yk+MTsRP922+byLkzA//25JvhSgszvpcCg/tbSZvvAe+L2iEmk9jH0i
Pvg6Wz4UxGw8WUdJvmOOXD7W5ao+/EWgPmDGkb6KsQW+eHYkvoHFI72FyGu+
GlfDPh4R8TyBLJ49lMq5voh/Lr6XqEu+oJPPvU7feT3A/Jm7FASbPqmmQr/r
uxc/b1KRPqb3Qr4oBBm+zlgIv1xMcj5eQsi+auo7vt7cgr5LwlO++lIfPgNH
3r4Xv9G96N7zPpvEnr7kv2Q9gskmPmnOHr47r0S91ZK2vcgg+r7LxA0+YVcU
v7fRIj245bM+wqnEvqadVDv7ma3X
                "], "InputGateBiases" -> 
               RawArray[
                 "Real32",{-0.0009858179837465286, -0.0009178026230074465, \
-0.0009810106130316854, 0.0009456452098675072, 0.0009512339602224529, 
                 0.0009400537237524986, 0.0008457869989797473, 
                 0.0008923015557229519, 0.0009310884634032845}], 
               "OutputGateInputWeights" -> CompressedData["
1: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
NvsWwsb/hIj/ACLPdns=
                "], "OutputGateStateWeights" -> CompressedData["
1:eJwBcgGN/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CQAAAAkAAAAbPi4/jh6EvuEeEj2YAhG+HFh9vmi1jL4V6O+9QAOoPsBylL4K
I0g/qMupPXyYNT5R/O++e/IRvb6Xdz7J7fg7vXK4PDOLtz7+l06+pVskvhMm
Dr+n9SA9oQ8/Pm9+aT0dmw8//ORRvx5jgb35lS+9Yl2LPtjE9j6nsWK9Em0h
PqLo+z4scGU+sFh2vs9JUb44bvm+ybtfvi6eND2sHx++3pYDP57Dw76NuAS+
dmyTPSO1ET4ikTa+IzydvjY18b7DynE+Ra2ZPjUOyz5NRHG9nTMuPsxMKj+d
0dY9fyk+vZvipr3UOY2+Y3OJvRINED7cDlK+qzWGPHn31L6vlPy8/SmqPiEL
LL2Y/zs6glGLPtIlPj982d++GuESv/GOMD4N0n8+UJVGPjFs7D2ZX/g+8TMe
PhYbbL53N0y+vhAdv1ZRrr2/zqFS
                "], "OutputGateBiases" -> 
               RawArray[
                 "Real32",{-0.0009897461859509349, -0.0009278542129322886, \
-0.0009793135104700923, 0.000956379808485508, 0.0009617984760552645, 
                 0.0009568266686983407, 0.0008159608114510775, 
                 0.0009359951945953071, 0.000819376902654767}], 
               "ForgetGateInputWeights" -> CompressedData["
1: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
uCTFOU9Hwv8HMAZr7A==
                "], "ForgetGateStateWeights" -> CompressedData["
1:eJwBcgGN/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CQAAAAkAAAAOGpg+idd9Pm3H4T5wZRi+474AvZapkT40ZpO+f1vKvvnVSb4+
K50+CYqou8b7lb0X23a+mQ3fPp5EDT+vFMI+JUAXPvyuBz+hk5I+0rQQvKfN
Yz66BwG8S4JyPrlJ2T7a3V0966hQvlrI8T2fkys+AoJHvmX17L4C24o+9DU6
vY0FKr4FtLO+OibMPlISJj3+ZjM9uGl9Pm8Xb77UMAY/zB1nPcQzyj76rY89
hCs4vWok/76TEhk+Y2tnPNT9OL6mn4K+IkmmPsq9Jb4qNIE9fKAsvQl+Jz7b
0ok+dmh/PfrSkj7Bsg6+nFhxPnPTHT+Koy+8EN3+vjK8iL75308+jPMvv1du
nb7j1QO/R7LuPe000r1GzLE+lL7CO19A7j6lko4+3DvrPNP7gL7EntU+qXC3
vVzOCj56Juc+P1RMvh2Ok75erafC
                "], "ForgetGateBiases" -> 
               RawArray["Real32",{0.9990072846412659, 0.9990197420120239, 
                 0.9990137219429016, 0.9992154240608215, 1.0003466606140137`, 
                 1.0009765625, 0.9990415573120117, 0.9990578889846802, 
                 1.000771164894104}], 
               "MemoryGateInputWeights" -> CompressedData["
1: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
EHYLucF/AvCQeRk=
                "], "MemoryGateStateWeights" -> CompressedData["
1:eJwBcgGN/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CQAAAAkAAABAMQQ9J8VgPWU6sb5QtbY9k3MsPg2rAL0a3GC+H1g2vtWcfLtK
Lq29JmtlPcURWL+hERk+TaJoPsNjnr4/xVm/ibOkvmv2oD1WZq+9vV+tvgbs
nT7cpuq9IH6WvfEFKT7w7qu+hJyrO7yZXz31uWA9aaN1PJWwXz0CzRM+SumS
vb188b31YRo+gguOvVITsD4reJq+23LUvcrfnD3vTF2+R6fbvoZkCj+IU9q+
W/CjPZHmHz4iWiQ/6ZvTPB85HD7CNmu+ov9hPT8F1r4xYR0+NlTbPjhsGj7c
9Wm/DHwYPlUn0z0njFO+i2RdPj4RZr79KGm8Q25av6JJvT5jB8O90oRoviYy
sz3/VFq+dk1TvnFJTD4W4mK+Fwjzvi7lFr90fdo+lj4Bvjb2zb4ajta+4sqO
PkfM2T6v9qE+0oxrPkYs0z6SQaQZ
                "], "MemoryGateBiases" -> 
               RawArray[
                 "Real32",{-0.0009978202870115638, -0.0009861612925305963, 
                 0.0009939477313309908, 
                 0.0009966730140149593, -0.0009962670737877488, \
-0.0009979235474020243, -0.0009414494852535427, -0.0009967124788090587, \
-0.0009927854407578707}]|>, 
             "Parameters" -> <|
              "OutputSize" -> 9, "Dropout" -> 
               NeuralNetworks`ValidatedParameter[0.2689516937894716], 
               "$InputSize" -> 50, "$SequenceLength" -> 
               NeuralNetworks`LengthVar[1907867702], "$CellStateConnectedQ" -> 
               False|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                  NeuralNetworks`LengthVar[1907867702], 50}, 
                 NeuralNetworks`RealT]|>, 
             "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                  NeuralNetworks`LengthVar[1907867702], 9}, 
                 NeuralNetworks`RealT]|>, 
             "States" -> <|
              "State" -> NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT], 
               "CellState" -> 
               NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "SequenceLast", "Arrays" -> <||>, 
             "Parameters" -> <||>, 
             "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                  NeuralNetworks`LengthVar[1907867702], 9}, 
                 NeuralNetworks`RealT]|>, 
             "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|
              "Weights" -> 
               RawArray[
                 "Real32",{{-0.29851990938186646`, -0.17198233306407928`, \
-0.39789944887161255`, -0.07424458116292953, -0.24799072742462158`, \
-0.7044107913970947, -0.021470289677381516`, -0.030344495549798012`, \
-0.4114503860473633}, {0.0413515567779541, 
                 0.2216387689113617, -0.49269604682922363`, \
-0.11790741235017776`, 0.2456531971693039, 0.5611268281936646, 
                 0.01761310175061226, 
                 0.13684703409671783`, -0.12931989133358002`}}], "Biases" -> 
               RawArray["Real32",{
                 0.0009969003731384873, -0.0009969002567231655}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {2}, "$OutputSize" -> 2, "$InputSize" -> 
               9, "$InputDimensions" -> {9}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]|>, 
             "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
         "InteriorStates" -> <|{2, "State"} -> 
           NeuralNetworks`NetPath["Nodes", "2", "States", "State"], {
            2, "CellState"} -> 
           NeuralNetworks`NetPath["Nodes", "2", "States", "CellState"]|>|>, <|
        "Version" -> "14.1.2", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> 0.01}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 0.5148386, "MeanInputsPerSecond" -> 
        145.67672276321161`|>, "InputType" -> "NominalSequence", 
      "EmptySequenceDistribution" -> {0.5882352941176471, 0.4117647058823529},
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>,
          "Output" -> <|"f1" -> <|"Type" -> "Expression", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "NoninvertibleIntegerEncodeNominalSequence", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
             "Index" -> MachineLearning`SortedHashAssociation[<|
               "KeyHashes" -> CompressedData["
1:eJwNzj0oBGAAANCPImWQTK7ETdR1uk0X3cB0t6HUGfyVM6gzCYMo6RY/qcug
25VsDCacLsmA6RIDg2wGZRD5ecPbX3RqbihfE0LIU0+EKJ3EiJMkxQBpMgwy
QpZRJsixyDIrrFNgg01K7HNKmQp3VHngkSdeeOOTL+oE22ingzgJeuglQ5Zx
ppllngWWWGOLIseccE6ZCpdccc0Nt1S555lX3vngmx9++aOhNoRGmmimhVYi
dBGjmwRJ+kjRT5phxpgkxwyrFNhmh132KHHAIUecccE/yOg4mA==
                 "], "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file163SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], 
                   MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 7373776158002688576, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "ToExpression", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
             "FromMLDataset" -> 
             MachineLearning`MLProcessor[
              "FromMLDataset", <|
               "DatasetFormat" -> Automatic, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                "Output" -> <|"f1" -> <|"Type" -> "NominalSequence"|>|>, 
                "InversePreprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"NominalSequence"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Version" -> {14.1, 0}, "ID" -> 
             1636547265949986204, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Expression", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "ExpressionFunction", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Expression", "Weight" -> 1|>|>,
              "Function" -> (# + 1& ), "InverseFunction" -> (-1 + #& ), 
             "Listable" -> True, "ListableInverse" -> False, 
             "Version" -> {14.1, 0}, "ID" -> 3094041527147980760, 
             "Output" -> <|
              "f1" -> <|"Type" -> "Expression", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Expression", "Weight" -> 1|>, "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
         "Impossible", "StructurePreserving" -> False, "Missing" -> 
         "Imputed"|>], "FeatureNumber" -> 1, "Calibrator" -> None, 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "Recurrent", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 2169, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> Ramp, "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.2689516937894716, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> 0.01}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 5, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|"Value" -> None, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.2635881`6.872470793116756, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.7064791967071041, 0.014975494119418026`], "Accuracy" -> 
         Around[0.5042544971534114, 0.06620039018674324], "EvaluationTime" -> 
         0.0006468649066196397, "TestSize" -> 113, "ModelMemory" -> 98768, 
         "ModelUtility" -> -0.34993787486221883`, "Round" -> 1, "Iteration" -> 
         1, "Time" -> {
          0.2995857`6.928066073019701, 2.7295825`7.887641218627528}, 
         "TrainingSize" -> 15, "TrainingTime" -> 2.51188643150958, 
         "TrainingMemory" -> 11279184, "ExperimentCount" -> 1, 
         "MeanCrossEntropyHistory" -> {
           Around[0.7064791967071041, 0.010589273443459751`]}, 
         "AccuracyHistory" -> {
           Around[0.5042544971534114, 0.04681074481824152]}, 
         "IterationHistory" -> {1}, 
         "TimeHistory" -> {{
           0.2995857`6.928066073019701, 2.7295825`7.887641218627528}}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "Recurrent", "NetworkDepth" -> 1, 
           "NumberOfParameters" -> 2169, "ActivationFunction" -> Ramp, 
           "L2Regularization" -> 0.01, "Dropout" -> 0.2689516937894716, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> 0.01}, 
           MaxTrainingRounds -> 5, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Assoc[
         TypeSystem`Atom[String], TypeSystem`AnyType, 18], <||>], 
      "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 2169|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "Dropout" -> <|"Value" -> 0.2689516937894716|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
             MaxTrainingRounds -> <|"Value" -> 5|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7064791967071041, 0.014975494119418026`], "Accuracy" -> 
              Around[0.5042544971534114, 0.06620039018674324], 
              "EvaluationTime" -> 0.0006468649066196397, "TestSize" -> 113, 
              "ModelMemory" -> 98768, "ModelUtility" -> -0.34993787486221883`,
               "Round" -> 1, "Iteration" -> 1, 
              "Time" -> {
               0.2995857`6.928066073019701, 2.7295825`7.887641218627528}, 
              "TrainingSize" -> 15, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 11279184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7064791967071041, 0.010589273443459751`]}, 
              "AccuracyHistory" -> {
                Around[0.5042544971534114, 0.04681074481824152]}, 
              "IterationHistory" -> {1}, 
              "TimeHistory" -> {{
                0.2995857`6.928066073019701, 
                 2.7295825`7.887641218627528}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6995827886922986, 0.02107755033745691], "Accuracy" -> 
              Around[0.5000021917568047, 0.1373361204098306], 
              "EvaluationTime" -> 0.007674085826803382, "TestSize" -> 26, 
              "ModelMemory" -> 196448, "ModelUtility" -> -0.5464623230323171, 
              "Round" -> 2, "Iteration" -> 4, 
              "Time" -> {
               4.3322445`8.088257952530595, 4.9132962`8.142917940034208}, 
              "TrainingSize" -> 102, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 547600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6995827886922986, 0.014904078774416582`]}, 
              "AccuracyHistory" -> {
                Around[0.5000021917568047, 0.09711130204364342]}, 
              "IterationHistory" -> {4}, 
              "TimeHistory" -> {{
                4.3322445`8.088257952530595, 4.9132962`8.142917940034208}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.007674085826803382, "MeanCrossEntropy" -> 
             Around[0.6995827886922986, 0.02107755033745691], "ModelMemory" -> 
             196448, "TrainingMemory" -> 547600, "TrainingTime" -> 
             3.011471900439459|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 2169|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "Dropout" -> <|"Value" -> 0.005941981978542121|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
             MaxTrainingRounds -> <|"Value" -> 25|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           2|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 1447|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "Dropout" -> <|"Value" -> 0.018037872498891383`|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.1}|>, 
             MaxTrainingRounds -> <|"Value" -> 25|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7119265810602761, 0.021108224553409865`], "Accuracy" -> 
              Around[0.49574755105035406`, 0.0662003997574455], 
              "EvaluationTime" -> 0.0011072465868592549`, "TestSize" -> 113, 
              "ModelMemory" -> 94672, "ModelUtility" -> -0.3698965727764161, 
              "Round" -> 1, "Iteration" -> 2, 
              "Time" -> {
               2.8729701`7.909876099657576, 3.2406048`7.96217106444044}, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 279744, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7119265810602761, 0.014925768720524498`]}, 
              "AccuracyHistory" -> {
                Around[0.49574755105035406`, 0.04681075158574999]}, 
              "IterationHistory" -> {2}, 
              "TimeHistory" -> {{
                2.8729701`7.909876099657576, 3.2406048`7.96217106444044}}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.696540718090406, 0.019234210683491675`], "Accuracy" -> 
              Around[0.4259281176827307, 0.13582073115101342`], 
              "EvaluationTime" -> 0.0019276432062587394`, "TestSize" -> 26, 
              "ModelMemory" -> 192224, 
              "ModelUtility" -> -0.40312928552154226`, "Round" -> 2, 
              "Iteration" -> 3, 
              "Time" -> {
               3.2426044`7.962438961170828, 4.1562488`8.070246530752849}, 
              "TrainingSize" -> 102, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 726792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.696540718090406, 0.0136006408050677]}, 
              "AccuracyHistory" -> {
                Around[0.4259281176827307, 0.09603976002259655]}, 
              "IterationHistory" -> {3}, 
              "TimeHistory" -> {{
                3.2426044`7.962438961170828, 4.1562488`8.070246530752849}}|>},
            "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0019276432062587394`, "MeanCrossEntropy" -> 
             Around[0.696540718090406, 0.019234210683491675`], "ModelMemory" -> 
             192224, "TrainingMemory" -> 726792, "TrainingTime" -> 
             1.2479927024128015`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 645|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "Dropout" -> <|"Value" -> 0.2668544151279081|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
             MaxTrainingRounds -> <|"Value" -> 125|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           4|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 1447|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "Dropout" -> <|"Value" -> 0.13011934325765206`|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.1}|>, 
             MaxTrainingRounds -> <|"Value" -> 125|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           5|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 1447|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "Dropout" -> <|"Value" -> 0.03648956620724708|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
             MaxTrainingRounds -> <|"Value" -> 25|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           6|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 3249|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "Dropout" -> <|"Value" -> 0.27877484891486093`|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
             MaxTrainingRounds -> <|"Value" -> 25|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           7|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2701|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "Dropout" -> <|"Value" -> 0.13078462551106756`|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
             MaxTrainingRounds -> <|"Value" -> 25|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           8|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 3249|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.1|>, 
             "Dropout" -> <|"Value" -> 0.193648620208496|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.1}|>, 
             MaxTrainingRounds -> <|"Value" -> 125|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.698572675827512, 0.023802213192304616`], "Accuracy" -> 
              Around[0.5000021917568047, 0.1373361204098306], 
              "EvaluationTime" -> 0.0019276432062587394`, "TestSize" -> 26, 
              "ModelMemory" -> 199520, "ModelUtility" -> -0.4073269278921199, 
              "Round" -> 2, "Iteration" -> 5, 
              "Time" -> {
               5.0965759`8.15882348975825, 8.2654998`8.368814113208554}, 
              "TrainingSize" -> 102, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 547656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.698572675827512, 0.016830706355526494`]}, 
              "AccuracyHistory" -> {
                Around[0.5000021917568047, 0.09711130204364342]}, 
              "IterationHistory" -> {5}, 
              "TimeHistory" -> {{
                5.0965759`8.15882348975825, 8.2654998`8.368814113208554}}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0019276432062587394`, "MeanCrossEntropy" -> 
             Around[0.698572675827512, 0.023802213192304616`], "ModelMemory" -> 
             199520, "TrainingMemory" -> 547656, "TrainingTime" -> 
             7.13062609645811|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "Recurrent"|>, 
             "NetworkDepth" -> <|"Value" -> 1|>, 
             "NumberOfParameters" -> <|"Value" -> 1447|>, 
             "ActivationFunction" -> <|"Value" -> Ramp|>, 
             "L2Regularization" -> <|"Value" -> 0.01|>, 
             "Dropout" -> <|"Value" -> 0.2186131566803221|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
             MaxTrainingRounds -> <|"Value" -> 25|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
              "TrainingSize", "TrainingTime", "TrainingMemory", 
              "ExperimentCount", "MeanCrossEntropyHistory", "AccuracyHistory",
               "IterationHistory", "TimeHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`AnyType, TypeSystem`AnyType}], TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], 
      "TrainingSizes" -> {15, 102}, "MaxTrainingSize" -> 128, 
      "PreprocessorEvaluationTime" -> 4.12578125*^-6, "PreprocessorMemory" -> 
      82096, "InputDimension" -> Rational[76, 5], "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6930288326958663, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 15, "TimeBudgets" -> 3.3523762411459357`, 
          "ElapsedTimes" -> 2.9390193, "ExperimentCounts" -> 2|>, <|
         "TrainingSizes" -> 102, "TimeBudgets" -> 4.789108915922765, 
          "ElapsedTimes" -> 5.2348824, "ExperimentCounts" -> 3|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "bakteri bukan covid19 diperkuat hipoksia italia kementerian \
kesehatan melainkan mnyebabkan peradangan radiasi virus"}, "ID" -> 
           302169982824646901|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 8.5028207, 
      "MaxTrainingMemory" -> 12762784, "DataMemory" -> 23472, 
      "FunctionMemory" -> 334360, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 11, 29, 17, 59, 12.8939651`8.86296144680461}, 
        "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9409612309186726`*^9, 3.940979117388483*^9, 
  3.940987258651024*^9, 3.9418667529853497`*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"db2fad58-215a-8045-b1a9-1709a5ba4f51"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Text\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"BENAR\"", "\"HOAX\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["128", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1048928, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", ClassifierFunction, 1048928, 
            7281945590428546646849115489680303321478370380824764638288, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 7281945590428546646849115489680303321478370380824764638288,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9409612309186726`*^9, 3.940979117388483*^9, 
  3.940987258651024*^9, 3.9418667545384693`*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"1397068a-3c4b-1f48-8e53-19079330def3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"evalSVM", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classifierSVM", ",", " ", "testSet"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"evalRF", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classifierRF", ",", " ", "testSet"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"evalNN", " ", "=", " ", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"classifierNN", ",", " ", "testSet"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"evalGB", " ", "=", " ", 
    RowBox[{"ClassifierMeasurements", "[", 
     RowBox[{"classifierGB", ",", " ", "testSet"}], "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{"TableForm", "[", 
  RowBox[{"{", "\n", "  ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<Suport Vector Machine\>\"", ",", " ", "\"\<Random Forest\>\"", ",", 
      " ", "\"\<Neural Network\>\"", ",", "\"\<Gradient Boosting\>\""}], 
     "}"}], ",", "\n", "  ", 
    RowBox[{"{", 
     RowBox[{
     "evalSVM", ",", " ", "evalRF", ",", " ", "evalNN", ",", " ", "evalGB"}], 
     "}"}]}], "\n", "}"}], "]"}]}], "Code",
 CellChangeTimes->{{3.9409791276495533`*^9, 3.9409792483899384`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"39460c25-de19-8f4a-8755-1c08dbe47690"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Suport Vector Machine\"\>", "\<\"Random Forest\"\>", "\<\"Neural \
Network\"\>", "\<\"Gradient Boosting\"\>"},
    {
     TagBox[
      StyleBox[
       FrameBox[GridBox[{
          {
           ItemBox[
            FrameBox[
             StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
              StripOnInput->False,
              FontSize->12],
             FrameMargins->{{10, 5}, {-4, 2}},
             FrameStyle->None,
             StripOnInput->False],
            Alignment->{Left, Bottom},
            Background->RGBColor[0.96, 0.96, 0.96],
            Frame->{{False, False}, {True, False}},
            FrameStyle->Opacity[0.1],
            ItemSize->{Automatic, 1},
            StripOnInput->False]},
          {
           ItemBox[
            TagBox[
             FrameBox[
              TagBox[GridBox[{
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  
                  InterpretationBox[Cell[
                   "SupportVectorMachine",ExpressionUUID->
                    "177c0a41-356f-d947-9bec-b853c4c2b1c4"],
                   TextCell["SupportVectorMachine"]]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], "32"},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"47.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[46.875`3., 8.9627083590303477934`3.]], ")"}], 
                    "\"%\"", "percent", "\"Percent\""},
                   "QuantityPostfix"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"53.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[53.125`3., 8.9627083590303477934`3.]], ")"}], 
                    "\"%\"", "percent", "\"Percent\""},
                   "QuantityPostfix"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"0.4995260426623410743`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0006561471258397511`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4982137484106615721`3.", "\", \"", 
                    "0.5008383369140205765`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                   Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.4982137484106615721`3., ", ", 0.5008383369140205765`3., 
                    "]"}], "Tooltip"]& ]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"0.694095544790494734`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0013135389972028788`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.6914684667960889763`3.", "\", \"", 
                    "0.6967226227849004916`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                   Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.6914684667960889763`3., ", ", 0.6967226227849004916`3., 
                    "]"}], "Tooltip"]& ]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{"6.56`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                   "Quantity"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{"636.`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                    FractionBox["\"Examples\"", "\"Seconds\""]},
                   "Quantity"]},
                 {
                  ItemBox[
                   
                   GraphicsBox[
                    RasterBox[{{{1., 0.42, 0.}, {1., 1., 1.}}, {{
                    0.8705195089609821, 0.5486225809901321, 
                    0.006446471371763139}, {1., 1., 1.}}}, {{0, 0}, {2, 2}}, {
                    0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" examples of \"", "\"BENAR\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.46875`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6382978723404256`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " examples of ", "BENAR", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.46875}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.6382978723404256}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["17", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" examples of \"", "\"HOAX\"", 
                    "\" misclassified as \"", "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.53125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "1.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{17, " examples of ", "HOAX", " misclassified as ", 
                    "BENAR"}], 
                    Row[{"Column fraction = ", 0.53125}], 
                    Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"BENAR\"", 
                    "\" misclassified as \"", "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "BENAR", " misclassified as ", 
                    "HOAX"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"HOAX\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", "HOAX", " correctly classified"}], 
                    Row[{"Precision = ", 0.}], 
                    Row[{"Recall = ", 0.}], 
                    Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "BENAR"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{17, " example", "s", " of class ", "HOAX"}], 
                    Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "32", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.46875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{32, " example", "s", " classified as ", "BENAR"}], 
                    Row[{"Precision = ", 0.46875}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example\"", "\"\"", "\" classified as \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example", "", " classified as ", "HOAX"}], 
                    Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"BENAR\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"HOAX\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["15", TraditionalForm]}, {0.5, 
                    FormBox["17", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["32", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"BENAR\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"HOAX\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                   Alignment->Center,
                   StripOnInput->False], "\[SpanFromLeft]"}
                },
                AutoDelete->False,
                ColumnsEqual->False,
                
                GridBoxAlignment->{
                 "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                
                GridBoxItemSize->{
                 "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
               "Grid"],
              FrameMargins->{{10, 10}, {10, 5}},
              FrameStyle->None,
              StripOnInput->False],
             Deploy,
             DefaultBaseStyle->"Deploy"],
            Alignment->Center,
            
            BaseStyle->{
             FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
              NumberMarks -> False, Deployed -> False},
            StripOnInput->False]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
         GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], 
             Offset[0.8], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Background->GrayLevel[1],
        FrameMargins->{{0, 0}, {0, 0}},
        FrameStyle->GrayLevel[0.85],
        RoundingRadius->5,
        StripOnInput->False],
       StripOnInput->False,
       LineBreakWithin->False],
      Deploy,
      DefaultBaseStyle->"Deploy"], 
     TagBox[
      StyleBox[
       FrameBox[GridBox[{
          {
           ItemBox[
            FrameBox[
             StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
              StripOnInput->False,
              FontSize->12],
             FrameMargins->{{10, 5}, {-4, 2}},
             FrameStyle->None,
             StripOnInput->False],
            Alignment->{Left, Bottom},
            Background->RGBColor[0.96, 0.96, 0.96],
            Frame->{{False, False}, {True, False}},
            FrameStyle->Opacity[0.1],
            ItemSize->{Automatic, 1},
            StripOnInput->False]},
          {
           ItemBox[
            TagBox[
             FrameBox[
              TagBox[GridBox[{
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  
                  InterpretationBox[Cell[
                   "RandomForest",ExpressionUUID->
                    "7e9248a8-1fe1-4145-aae5-99d4f38405ee"],
                   TextCell["RandomForest"]]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], "32"},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"66.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[65.625`3., 8.530513305661315826`3.]], ")"}], 
                    "\"%\"", "percent", "\"Percent\""},
                   "QuantityPostfix"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"53.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[53.125`3., 8.9627083590303477934`3.]], ")"}], 
                    "\"%\"", "percent", "\"Percent\""},
                   "QuantityPostfix"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"0.5035749743074250384`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0020170794294589456`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4995408154485071472`3.", "\", \"", 
                    "0.5076091331663429296`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                   Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.4995408154485071472`3., ", ", 0.5076091331663429296`3., 
                    "]"}], "Tooltip"]& ]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"0.6860226716380048995`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0040055088887978041`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.6780116538604092913`3.", "\", \"", 
                    "0.6940336894156005076`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                   Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.6780116538604092913`3., ", ", 0.6940336894156005076`3., 
                    "]"}], "Tooltip"]& ]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{"9.69`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                   "Quantity"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{"1.53`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                    "examples per millisecond", 
                    FractionBox["\"Examples\"", "\"Milliseconds\""]},
                   "Quantity"]},
                 {
                  ItemBox[
                   
                   GraphicsBox[
                    RasterBox[{{{0.8831332355429421, 0.6589328685956561, 
                    0.20381477907798723`}, {1., 0.42, 0.}}, {{
                    0.9285334952057369, 0.49099298301403393`, 
                    0.0035581173155835497`}, {0.9102402189708758, 
                    0.7774751041282346, 0.43693559849308305`}}}, {{0, 0}, {2, 
                    2}}, {0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" examples of \"", "\"BENAR\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.625`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6451612903225806`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{10, " examples of ", "BENAR", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.625}], 
                    Row[{"Recall = ", 0.6666666666666666}], 
                    Row[{"FScore = ", 0.6451612903225806}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"HOAX\"", 
                    "\" misclassified as \"", "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.375`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.35294117647058826`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "HOAX", " misclassified as ", 
                    "BENAR"}], 
                    Row[{"Column fraction = ", 0.375}], 
                    Row[{"Row fraction = ", 0.35294117647058826`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "\"BENAR\"", 
                    "\" misclassified as \"", "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.3125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.3333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{5, " examples of ", "BENAR", " misclassified as ", 
                    "HOAX"}], 
                    Row[{"Column fraction = ", 0.3125}], 
                    Row[{"Row fraction = ", 0.3333333333333333}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"HOAX\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6875`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6470588235294118`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "HOAX", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.6875}], 
                    Row[{"Recall = ", 0.6470588235294118}], 
                    Row[{"FScore = ", 0.6666666666666667}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "BENAR"}], 
                    Row[{"Recall = ", 0.6666666666666666}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6470588235294118`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{17, " example", "s", " of class ", "HOAX"}], 
                    Row[{"Recall = ", 0.6470588235294118}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " classified as ", "BENAR"}], 
                    Row[{"Precision = ", 0.625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " classified as ", "HOAX"}], 
                    Row[{"Precision = ", 0.6875}]}], "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"BENAR\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"HOAX\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["15", TraditionalForm]}, {0.5, 
                    FormBox["17", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"BENAR\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"HOAX\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                   Alignment->Center,
                   StripOnInput->False], "\[SpanFromLeft]"}
                },
                AutoDelete->False,
                ColumnsEqual->False,
                
                GridBoxAlignment->{
                 "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                
                GridBoxItemSize->{
                 "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
               "Grid"],
              FrameMargins->{{10, 10}, {10, 5}},
              FrameStyle->None,
              StripOnInput->False],
             Deploy,
             DefaultBaseStyle->"Deploy"],
            Alignment->Center,
            
            BaseStyle->{
             FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
              NumberMarks -> False, Deployed -> False},
            StripOnInput->False]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
         GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], 
             Offset[0.8], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Background->GrayLevel[1],
        FrameMargins->{{0, 0}, {0, 0}},
        FrameStyle->GrayLevel[0.85],
        RoundingRadius->5,
        StripOnInput->False],
       StripOnInput->False,
       LineBreakWithin->False],
      Deploy,
      DefaultBaseStyle->"Deploy"], 
     InterpretationBox[
      TagBox[
       StyleBox[
        FrameBox[GridBox[{
           {
            ItemBox[
             FrameBox[
              StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
               StripOnInput->False,
               FontSize->12],
              FrameMargins->{{10, 5}, {-4, 2}},
              FrameStyle->None,
              StripOnInput->False],
             Alignment->{Left, Bottom},
             Background->RGBColor[0.96, 0.96, 0.96],
             Frame->{{False, False}, {True, False}},
             FrameStyle->Opacity[0.1],
             ItemSize->{Automatic, 1},
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              FrameBox[
               TagBox[GridBox[{
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   
                   InterpretationBox[Cell[
                    "NeuralNetwork",ExpressionUUID->
                    "5deda043-0458-2f45-8bd1-2b7968cf29c7"],
                    TextCell["NeuralNetwork"]]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], "32"},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"56.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[56.25`3., 8.9098305620904767466`3.]], ")"}], 
                    "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"53.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[53.125`3., 8.9627083590303477934`3.]], ")"}], 
                    "\"%\"", "percent", "\"Percent\""},
                    "QuantityPostfix"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.5053353337315202864`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0085345728192761372`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.488266188092968012`3.", "\", \"", 
                    "0.5224044793700726164`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.488266188092968012`3., ", ", 0.5224044793700726164`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TagBox[
                    TooltipBox[
                    TemplateBox[{"0.6825330428841547281`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0168881267029378224`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.6487567894782790834`3.", "\", \"", 
                    "0.7163092962900303728`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                    Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.6487567894782790834`3., ", ", 0.7163092962900303728`3., 
                    "]"}], "Tooltip"]& ]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"7.3`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                    "Quantity"]},
                  {
                   TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                    "RowDefault"], 
                   TemplateBox[{"847.`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                    FractionBox["\"Examples\"", "\"Seconds\""]},
                    "Quantity"]},
                  {
                   ItemBox[
                    
                    GraphicsBox[
                    RasterBox[{{{1., 1., 1.}, {1., 0.42, 0.}}, {{
                    0.9314101608286434, 0.8592610194947838, 
                    0.641310580758323}, {0.8931272137455725, 
                    0.5261646700236011, 0.005320897005264813}}}, {{0, 0}, {2, 
                    2}}, {0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"BENAR\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.125`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "BENAR", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.06666666666666667}], 
                    Row[{"FScore = ", 0.125}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"HOAX\"", 
                    "\" misclassified as \"", "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "HOAX", " misclassified as ", 
                    "BENAR"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["14", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" examples of \"", "\"BENAR\"", 
                    "\" misclassified as \"", "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.45161290322580644`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.9333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " examples of ", "BENAR", " misclassified as ", 
                    "HOAX"}], 
                    Row[{"Column fraction = ", 0.45161290322580644`}], 
                    Row[{"Row fraction = ", 0.9333333333333333}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["17", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" examples of \"", "\"HOAX\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5483870967741935`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.7083333333333334`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{17, " examples of ", "HOAX", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.5483870967741935}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.7083333333333334}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "BENAR"}], 
                    Row[{"Recall = ", 0.06666666666666667}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{17, " example", "s", " of class ", "HOAX"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example\"", "\"\"", "\" classified as \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{1, " example", "", " classified as ", "BENAR"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "31", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5483870967741935`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{31, " example", "s", " classified as ", "HOAX"}], 
                    Row[{"Precision = ", 0.5483870967741935}]}], 
                    "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"BENAR\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"HOAX\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["15", TraditionalForm]}, {0.5, 
                    FormBox["17", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["1", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["31", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"BENAR\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"HOAX\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                    Alignment->Center,
                    StripOnInput->False], "\[SpanFromLeft]"}
                 },
                 AutoDelete->False,
                 ColumnsEqual->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                 GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
                "Grid"],
               FrameMargins->{{10, 10}, {10, 5}},
               FrameStyle->None,
               StripOnInput->False],
              Deploy,
              DefaultBaseStyle->"Deploy"],
             Alignment->Center,
             
             BaseStyle->{
              FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI",
                NumberMarks -> False, Deployed -> False},
             StripOnInput->False]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], 
              Offset[0.8], {
               Offset[0.4]}, 
              Offset[0.2]}}],
         Background->GrayLevel[1],
         FrameMargins->{{0, 0}, {0, 0}},
         FrameStyle->GrayLevel[0.85],
         RoundingRadius->5,
         StripOnInput->False],
        StripOnInput->False,
        LineBreakWithin->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      ClassifierMeasurementsObject[<|
       "Model" -> ClassifierFunction[<|
          "ExampleNumber" -> 128, "ClassNumber" -> 2, 
           "Input" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
                "Output" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Text"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "SynthesizeMissingValues", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Distribution" -> 
                    LearnedDistribution[<|
                    "ExampleNumber" -> 128, "Preprocessor" -> 
                    MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|"f1" -> <|"Type" -> "Text"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> True, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "FeatureChangeType", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 977354774366526235|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5964736801689017400|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"" -> 1|>}, "MissingCode" -> Indeterminate, 
                    "Version" -> {14.1, 0}, "ID" -> 8928567103510828875, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {1}|>|>, "Boundaries" -> {{-0.5, 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 5412181252758401233, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 
                    1|>|>|>]}, "Invertibility" -> "Approximate", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                    Automatic, 
                    "Model" -> <|
                    "RotationMatrix" -> {{1.}}, 
                    "Precisions" -> {12.711896857730567`}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.030376057328109846`}, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 8327193644222201350|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 1, "Options" -> <||>|>|>|>, 
                    "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|"f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.03037605732810983}, 
                    "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, 
                    "Output" -> <|"f1" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 1|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    1141341796882961439|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {0.03037605732810983}, 
                    "StandardDeviation" -> {0.28047542823975236`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Type" -> "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    1141341796882961439|>], "InputDimension" -> 0, 
                    "OutputDimension" -> 1, 
                    "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {""}, 
                    "ID" -> 4243662280806592300|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.0934729, "MaxTrainingMemory" -> 
                    190416, "DataMemory" -> 7072, "FunctionMemory" -> 42112, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 11, 29, 17, 59, 4.51189`8.406933481242993}, 
                    "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                    MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-0.7608402945300776, -0.7608402945300776, \
-0.5102510733456789, -0.29285782483194944`, -0.28567613009884685`, \
-0.21599017280023688`, -0.16411757677520503`, -0.005973503207894077, 
                    0.04373386745093821, 0.05142288029632165, 
                    0.05324683311748989}, 
                    "LeftBoundary" -> -0.5102510733456789, "LeftScale" -> 
                    0.12529461059219937`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                    Around[0.2087302994725139, 0.08511048341462331], 
                    "EntropySampleSize" -> 10|>], 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "EvaluationStrategy" -> "ModeFinding", 
                    "Version" -> {14.1, 0}, "ID" -> 4270897793735380344|>], 
                  MachineLearning`MLProcessor[
                  "ToLowerCase", <|
                   "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3288521766005748305, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "RemoveDiacritics", <|
                   "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4915787944086918060, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "TextToNominalSequence", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Text", "Weight" -> 1|>|>, 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "|", "\\", ">", "/", "~", "`", "#", "^"}, {
                    ":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", ":-p", 
                    ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", "</3"}, {
                    "=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {14.1, 0}, "ID" -> 8661128169745179370, 
                    "Output" -> <|
                    "f1" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "NoninvertibleIntegerEncodeNominalSequence", <|
                   "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJxNnFkONbdxRoUgG8iwAS8gAJszlyDAT15CHgLkKQ/OErOwnFPN6mvJkn8U
+3aTNX41UH/5z//523/93z/98cff//mPP/7463///X///Hf+8B/n2fvpo886
dxtztFpyoZ9Z9tjr6b3v52k7F9rapdVnPXueNmrruVAhrfY0XvesVfrMhaeW
WWZdpxzeNc65C6VB4cFnlloetjBygd+PcUo5o442W/sWSpm9seOznzL2HHdh
n7POGqfyf2d5lpoLuxa+ciabaKX0/i1UT9bm2o0HRiv3HHsveDJmH89mS0/f
MxekndWab+Gh9uQCG+z1aW2VvTjI+Baep5fJdlqDb32sdRfYZT/ucrddOMqz
c6HzEV51ahtj1dnyF3P0/vCV0UbhV7A5F3rbfa7KSoNVfX+/KHuu2eE8onw2
Z7wL4/TCbhqb2Mjxd/JRPXTjQwWe+95c4Ey1tlLrftjSaCcXCsxe0tcZQ7bc
hY4aFGhT4aEO38d7OfvA87XH6ijAON/CGOx3oEW8EsnOb6Hy7nqQCVoxEfJd
aLNW2AiD20EpYFwuoIATDtY155m1fWyHbaXzScS44RdqnwsFeZaBCFGRczjQ
tyCfOAnPzwYfku11147hDM7YYPKeKXM0ozV06GmFPfnKXIh91jH48C6TF+YC
b92tzgPHMAZUJRfgz1yo/DP4d6lPLjzbd1Q0eKwGv9b5FgqCW+o8istBUq+e
NSqbOdoOKxh6Lkw0Gp1VoTEd5JILKCjWPOSY0vxO/rTnPEU175OVM1NLsFbU
ecNwnpizr7uAno0Os/lHZ4NilFzA2NjT4dS4FNj75AJy49vbw2MH/XwLfHBh
+prhg0r3lgu1cmiU9OmPnmasXCjoSUF/eNdibeTHOe7Bi3W+zwkR2foW8F6K
ZGJ0w518C7iMiRhZxFZ6nnxhndga75g4EpT+7FxAGNjy6Ws9fuH5vtFQoDXZ
7ObjKN23qwdOox0PQoRZe+er4AliCIYV+HhO7gpL4hxYJZ5q79q+Bbe/+bam
XnAGT80FjPBgH/hvRL5+28VY0ZKyYGBXGdMh41kfqJguP8Kf/XaFB8PxYyWr
sBEEcL4FzKzxL46J2eD3fwuz4OMwXNh1dvm+8WDEFXurp+II9idaVLCicoMY
gWOoM50lvhJlbAM2YiL87smPIxqEugpiYnuFo9yFhjfk83jqrVh+8uCjfAeh
6KxcPt8CW8FdjggrnvYuYM4YCBpFUMJOMPdc6DCKuDLxGvh/9pgLONSu3NkC
DHk+JqL58HSugfX2vn5mgH9bxg7cesXSee+3wKHwAhycKFw+G0RGU/+C/eAy
sMYMRYTmplURiDdui4iRbCf4IXK8ToGzBJIM9AiUIIVA1hPO9fM+LBgysemB
4hI4nzy5Mb48WBucIZTMdBkIAqagbBs94UC7J9v1aqAO1HzqmnCL7wJGB4PQ
eYy0sQmcdi50Ih3el8CKSrqFXMCBijSeilg4YWm58Ag+sIxnGFlbngOWAzs4
JYaBCPhZfty4iQNDE7A21DLdKwBlhXXjktBJ4lH9FjQc9Rp9wc3N71VY36PL
YlOAg5OaiC5xJsCT5wMZjG+7uPW2UGp8jSikpqee6hosNODCHbxongMulO7B
8R0jnFMuFKAJ0YhAGxad2GcaYHE8VXxCyPgQGQuIkIiCnIjHHCdfhS+p+iqc
ShNszO9Vo7BjuD9EeYSRngtVFq5VgR4wbKcyvAvgDEPoWRUP9C2grvgmORWG
8r0K69+6qWeBQ9DQVIaxCWVFJEjEx4f2ZAny4UeoKWfHi9bEJRjHERV0g2bF
JZ4UFEanZzpYSX3gW6ooj6qDU3tGf3Gx5VsQb2ptNbT3Gd+CEdmIKqIgrCYT
wRtIAisGQYWa5nbZIfs0FMCAgFnfQiBKkAfLo+3n+7hRruDIlPk6rX2vwks8
KzQVz+tjdwFXr+NGqsTGyWHygMYynCEKyetwr4lLWCiYZH1UF1S6Zm7AbngY
BInmEaPxKvlxTqWc8KHbQHxqShAO4eyr8OZRWAnVTArUf3jSzSfqx12iRvMH
uAT/Gu234N9TbyGM6+VbQPPbZFvqA5aeYduNh0XhiXFxCCd39WCBhBp0h60S
UT9egdsMT7wPEIQ4P/sw+akipoNH40yfReGCoeBGQfPPY4T9FgQrHE5RET5+
C+jzkbEkSmhKSajGAngC9Y34orPMc4AGJSNAnQwyz3MUeDrAQoc3caL6KYNR
H3NtImvDV3pRDN5Tlwo6QRj78wxDT0U0wgAwZqwz4fk4KpDGoTVqUSUXiMBE
erjOOnabQJiFZ5BHCNhhAUZyz4H8h/ES6AA6mGadd2Hp3XDd8IWttc8+VPAw
gqVXaOzx9wuTOrYMqgXb198vIvFD21qoS087H2JjXAZeoApdV7KdBcKMZqYf
hW07WaK7AONjtHhZAsb5Fp6qa4e726BdMnih/prOMLU2KM2MtUO9dP8eU0yf
YSJSJ4IGx+SoU7SaC5UojgdTVNOU7HsVUZhghM/Y8mCkDQ7x/QwPR9wbRr5v
oTzAbKI6IoSXGXGGuHWAehBjEVymfaAVSAFAy1lUe7zJXWiCDFQEUWGKWG/u
CtcOaMf2sFdcf0kYJUw0bGBwCFnfsb8F2Eqox78QYkz1cgFnD7swdKAcPm6l
wiE7ogkyD3SORFIej4m7tiHgnIg+t1siaJPxb5Ov8sUos1fVFG8lpO07Iyd8
wJjxfkcenB8ukYUIiTwbZ7rM4nK7RQw/zRoAg6CiZHs/IndwGgGkWubIGMUC
wd9qCQJ41Ppvgd3yYeIceBUVyoyla2YrTBTWqPY9F6y4+AaVhOXne1UHPm78
tTkkTnaeb6GYzpjqoAnPh0t4CVHzEV5hCwgzNRFvt3aIoZj34fZrLhiXUHjE
ASKDM+VbwB/iSsycjxn9t0Dk5yVNXcF+9u/jpBeNwEnegGmbkX4LSBVWRBLH
1xPWAs1QWNzcY24+yleTIWrDCTwIrxNj7QR3MNAtmaGDF1DhxNQsAHH2efeA
COv3KkCm5R22oFbP74Cr40WMAzNCwedF+zKlN9/FCpcbHN8CcDoyQUsRWENq
CVEJ/spW4o4O7dvuYzUIpYUnUwSbMjdo6BaJBgRU1TEXhNOWeIDB/HGk4bDw
VjMq6aL5eXofYQnGjTKzb8z9ZMTpAFrjJbKATfA/fbvpG/s1ZSfPAKYmmBCJ
mpvDGlwyapm+HU7ox3i2ramdJrjrRAyCCgGYnOIRVOWrYK6RHFXgd7iMhJwd
eYMlWojeQJjAyzRXpIBYYDBx+FOf5tH0V4hwhSy/BXNU4UlXVUoiADOeYimH
b0WumChciWP+YnHTHVxZfhwMZaqvzxULoye5oIaIxgTCerTvF4/HwgGZMaiv
+1uQ42gPBg/TPy/KN5HCNIUBDKCv33ZZiPKCGtetf+1vgY8SN4y3lhUSi3Zd
H55p6JbR9fId0IesZ/I8nMbUvl+I7jU0JG7RIjG1sFvXjXZYUTGSvAskK/of
4BC567FmO3JBeA6GIG4WuH8y1rZI4sD+b6oDUH2+Bfyk8YEjgkp6wnPrqjuc
q9CkkHz3XCjiNhkvkEIe+1sA3zeraWQ6INV0ADCQFIcEVaHC4S9MEHSBh2SJ
BKfwDolF2w60YOBid1pofkMAiLkKZQCS5bcrcZulFGL5o42k62sWcECb8ORY
+l7rHxYi1pm5IMEnwwQLaNTwzIiK7aUyAFWMDTP0DixT0jNgBVoNFg1OZ+H3
DQCOAm2iUOteWUjhrE+4KiOupcisl1iwAK0QbmrwcGQtQ6h5TKzYHakSbiV3
hZkv84lHB2R1JpWhy9QIHcfa8PjYjh3goSN2WISo38d5GJ1B3tV8gw3mN9QG
HGLBMlZg3NREEI5sIm+xBjdXWi3REUN6LPkDDkxa8uTQeyS0RA9wUc9swvqN
dmsXokUHIrdbdfYWfKvQfHxFWSMQHqMLW2DKL57zsWNBvVjbXta38xxhzny/
urMhLvwWQNQej42rpJ9ePTrxanYlZoGeWvKIcjHzx+Il2clnUYSfDlxfhkbM
+UmIw4L1azhowkk28bEEP2QrwWK/uLIldCYojqipW7w7YofkLn562cWwgI0b
WvNbYP8j8myr2NhRilZkPkVFliet4+Z2FSqxjP8ZqYjtl1fVar09BuwNG4A1
JxemDl/jYx10lxkLC+ixYRXZ4QRr9j8q+qfSoXVDYF3qZUk1B8fNhJWE8eQ3
dKAYXrdgaJUhoTOOcpjSRk+oWPta3wLbHQJRzHOrK7kAaC84xHosLIkSvgUC
IFotvAMqtcyjsC9rNLtYm7fqlpqIjplqEgjBOtVWz5MLRSRlPmw8xW2M3wJ5
P+ANT7C1ud9CMcMjmrVtoaznyeV2FEwMrbJ4fgv82RrrjBbFShhViT8aDMEt
AuLKHku1SGICXsySNen8eDezOdGosqz3YR9+z7FBDuwKoG92fxeMwWBKELBV
iWdnOQENQDYqgWUidP17VdO14GA4hU2ckoBFB4mTMb3EeBFA+xbAg7xrleWH
7ZTlAoeGjyajQ55kYCEhF60NVQfYBARMZahWtjVCiad9rq/qdfFe+jD7c/tT
H8RmXQZT0+tjbJdXpAR2cbuFNrtuO2UeSS4cHta6DK7r+0V/O3ZRHgG7phkQ
bRACiZEhxypkbheugvns4vCNbdvvclc4aThBXBzFYkR+w5zV/rGZzzQe7Fyw
0mwnzrqLhdGTC68YtmUD/ly/c0QjDJlOv0L4zrTvCVWzO8FZWD+ZGzzDbMG6
HEbymL3OXFgWj/gsG8NUvnCHB7Yvh5/j8+hk/barP1j+Zd6D80q8a96mCpIj
duxNR/9bqLYkDzJZosz8RTeJUA39a6HeySvEcXThAoEAvXlAYBj2AaokxbJl
lS7DfOhRDTilWeYa34LQVHx4TETG1wWwr2xQ1ko4HU/kL5pxVge9La6ZhuSC
UmXHZkbY75PBS3s078Jlgmim+CQXkEc0d1HCEcHzLmCOltPUVCRJvMtfPKbL
REc8rrJdH6+QhJXPZXXNInpmd4AFFAjfQ8oAxusfQpat9rQIN/om3Pu30Kwc
86pigB7s+89/c8GOUiRZJNyEWhTy0s2VxOY2vrEOkqWXbmdVhCOgkDnlpb8V
YJuVNkuiW/LSUTFs3FzXBADrvXSVhl3aypiaQL/0EWlI01vZcupJZycmWnbT
BJdAzUu3fGDVWG6Z7r50RGjm0AXf7iv3P8QoLlrwWeZpl85HrZsE0JpmkC9d
27UZYDtdfrR7XvyIEAQPbzoAJJ9Jt9u5u+U9sUpJerNUtW0265pVl6Szxc7L
TayQwHrpLWSEoJ/ID/jn0q3LWJEzB9TG7v6BADyOEjl7Igvv+/VvyIQUB29n
Yf7KhQ0PG4MGABtv9b5HZWDbpJA2pYsdwpdeog0hItHLnpQj+QM+xnKCVVuH
Ef78V+laH0HcvuiwkdZf8ggVCyEjYhDqn/8CeUV7XPSPTthfDarqLbQ404oL
R41XoMklCoz4Gjvd+KggqyCmHaIjq4nvB7E5u4cAa8uawvUg85nVoxLBy6pd
kSBjH0oa7xg9+3JfQkYBugD8RC3LgY8gBxTiDFZabUOMSyaFAk/bP149rOsl
W95HFMf+WZ/f0zYMeqAM+x5INMjDzs2O/q2arVoH2ZYLfkggo5LWd4NI1ZyK
o+LV+Up5WbUUYLcJaynaZm2S95vFE6NBEPvdIBnDDqdtIcJ+4H0aYSEnEa7l
UQzwJVsmj0SmBJJsL2O3QudIDgPYh1nv09v5A8uI50R7u7z8Bv6KWaPwE4Wq
92l8F9kEvtNsdzuHcMmkUM7xbMFeJJVBtj++tSJNxU7VS7aH4LgCXie40i6Z
xFjJsJVjRnbJO+YabGUr0XHNwYZqNTQooHDA+9JnjQ6mlXI76dfdQUdgJmUW
XFXeeumb+EvugFZZ8NnP617sGUYk3loLGUVJuu0PIOeL5ohg/dKjGiZ8RFJa
Qbn0aGrbBlkmcWjPS4+RHSvGYUNWKF96t7bwKBDHnRDsfb+TaMOYYt6AeMZJ
ugkE4M2GAjj1utnHHjF6ZIaogtk1eOnEMavwqoFzbHtcOuqi03qOObM9oKQb
VVazVtEMRZf/Ag6909soI+m9+7cPa7EbGIVobfteui3maVuLPMz+zd2PvwYu
TNxMNf+9bvMxodCTBNce+8SXbqPVQaJuHeX59rktmGCCXRdjNLv7YWMmhsUA
71jADVu+0xYzchEl4dHv8/YghKuPvbHmpNql2yR4IgA5EzFyP2hTi7zE5BRB
XnnVEvMa7nBbyRfEvnRNAUABvTtJVM+lLzWlx+SSofGGP+jONdkIGY7zob4v
3SKRkQbz6NY/631/NDpjFNI6bM+wVVUUw5v+ycGJVpOO5jrzZYsURHj5Xx2/
IiBayXGoYuT+YXR3bnFZ8Ncp3f0IpHvMWHb8q5770k0sY57SqEAqeN8DyINj
NexgCVCeSz9RC7YHaMnJmYGgN8fWyFnfxo/Z4KXr4ixnF22L7c9Ld57r2C3T
alDqe97IK+RdkwiAuPyBhWTMeJp43NmcpPfA8XjZaVvk3PN2gR5SDI+KsNfl
G05qBwjUopwByvcci446YCeG+PSrb/JdirmbrcL0Dzpa25Fmn8fAkXqC8lmQ
Cc9jD6re8xpLTU+ct4iu9uWzSN9Jtuedpu2pJ3hbJ1VsEVoVHhd+aFsjyp/L
ar992Euf6KR4q0RqQiRKurn5jEHM47Tu5fMKsI5VsCdnTPbdp0Z6hqWi1aIB
8dHFZLgOhzzNRi/fNhDVbqzObLH71MNtLTbUwb4lNnz3eRxVPE4MtVmteF8+
w2IjHArB0jK+XboIzp7Di1NQ6EuPxrFRGpDh7MI9l4Xj6DeZHjpPNZIelVM1
Wp0HTVy6PZsTr8Zmh1XSl74swzpFhY/WIbz6rCo9j62sVmPi9O6/OTpgBlP3
G6xHu3QsMXoYTkVOcc1Lty4zY/4M2Zt93/dHKqmz0jyibnPp6BX679iIFZRy
9d+Kn5OCNmm7enrjjqELxdyOAug+27VrsyGSf9i6xP2OELz06naaMxPb7km5
ehvzV2XGtIjtn3L9UrNmPnR7TiI5lpbPb3vtADlHPbuN/5cOANDTsn1bEY5J
Xfq0f+LsEV8lua6Xn7LcDDWScEVXk45X2yJsS1RfWsQD0ZEgnIBozB7vedW/
RxiDfIkM7OzSl5gesoV5oFHN9whfLbFbVBZCXj6P6CY79uBwi13XS28OADiV
tJs/uvG9ue0esJgsyvrfc+m6Z1ChYzsigJQvfqMMp1AsabUPb5CDo2U2paJt
70DRS59OYtou1h0Tlefdj6HCIU98iUzDfb10IVjkw/zLjtG1UwOWodx56Ghe
3HTPwt2KkCTO6uPTn22fL3ruBllrmC/dYqpNbnEFxvE9b/0YwyYNdrzXOtel
sx2g4RDowLyZenWsrFubtV0CU1N/jHDOTE6ReYvhr0s3VDhUa4HeGHnpFgqH
udoym08/2YSxRf23MzEC9L50u9HVcQVbahzs5acgHZ0S2sbQj5j/pfduLjBN
AkV21/+/w29jxjQsLGFDl+7Msc1ah2acDWxJh81Wv6MMHgPkQX+QxXJEgiiw
HMIsSa/OGz0Kbjn2dt/v1HWz7GUv3HZfvsdZGcSt9J2Du/7Heqa9yyib2I68
uLGrNb5YJI4U943v1pdADiayzZE3pypeepQaQ6Xf3vX9LgFjWChyjLWItC6d
71nAR4Q93O5Nk+36OoQYA13O+F49tFVi4QQnLEpAce9+kLn9OT28nmJfnGCP
d3t1ASlYBZj5Xe2wO18mUHFoP58HzEV1PrI0s61Lb45DLSdGixO7NemILjZi
iXI6vHPpOOGpvYULFXe/9BgPFPB6PcR+2Lh09Bu3tmwWW62+dv0ODCEOpw3s
+yZ/vMERVwwc13BaIt9vNl7FAaY3ds4v/UXNInfcExg133N6yBjENJ03ufYI
fYoZY57dNOPakax0+MhmllkMvv7SA9U6fhbc6Ldcg7gxLZUf6VjMv3YHaimm
KTsysG3ik/Qxo7ERaZxJZNL1QHATGAtUKC2fl7lvM8uppJN6uATHcL3axnd3
9z1b5h97szHFN27csfq6rL84pu2IwvXP3VKAu8CZWRUZN/+yz2WFA6xgEmOV
+dJbTDia+DZ15fpbrLFEGdEidot+VdJhoveQYlTI4fegE3A56xH54jbsQY5L
J/v1To9xT4dy/YC3K0AJ1XGuFU88l96jwd/0cQ7RXP1Ra+FNOFsTbLTl0mfg
Ce+oWGM51x9aXvdGyOPwX/SP+6VbMbZzO03gV7v40BtA1j+OP+tRDnnppuKq
iOWoJ7KQl67reWIwKWok4+K34dCMd7EUmWOM+X6cia0OY6b11if5Y6wBsWCo
iLFZiEg6qTYBEJDJiWPI9qVb27FiYdVkYnr5/uif4bacLKoOJSQdCTo7bk+1
O31/6ZtP6WuH3J6ZD+r5PS2ZtIGb816+TSdkMb3i6LbZyd0P6uxYWzUr1lPk
PjFC7TpGrxwRuHF2aOdLOe13HOn6DbYp3nOgpmozI/dppvaYtR6vOiClu0/e
oa/sNtWcarg4asSUozmkodx2SU+6/QcnI73JxYt20q3COCx+HFc7169a8EXr
7dmhRcX7TJceLUbxYYsrbBfnj+PVm2pzfJ4YuL1y1Lk4KAp4tvn63Lgwo1lv
WT4U3iB26ebo8NGhMlXjxlPHab18WCxJTXtvr/7HwLFj6Y+Ki8QubiSxXnoA
+1DmI+XifOgnJpjEM9PMbV06wVcTmlYiujXJS7eWZoi3tULOeeOstelX7w1Y
vOjWr5zRmeOt5jxeNLv+M97tPZrpnR2C+rULp3SP3KmOW6rs97tWc8Uf03Tf
z9xzYRLOLUxRUbRI8nmgao0reaNZTkv+GIlPjC7oPZ999SESSg5k+AS0WGS5
dF8PTJp+VvOuSTdMy/7u3cbEgZz1HZ9Sg0r0jC7dMCJa9UZaASbc/ZAu1ICr
tnL9ZyfdDsEIj+u4z/UDxmLR0DATKg4V9aR7naw6ORvT19efcNiotDxRp9rm
tkkHa8wnbueI8vP9xIqwIEtvFrUvDole5HECXBlaZu5JH/I67j2N/Q/P79iJ
jcpl+nX1fzqQh7yc0Qp/c+Oa5UcHF/S6BPrq5caXrqxhhGl3TFYn3a59XHey
YWAvK+gOtR1TC7ukMTeadIfc1/uwpb8bB+Om7rHfVRxddzzr0o+Dn97769EQ
vPov3Zq+dazoNF87Wm891NEvh0xitPalmxC+wPl4q6zl885Kx7Dk1gGdG++W
s5VGQhthUSnO9xwh7rTOMAJR/uimQriN5i2e9D/qTmC0GCOxSHCfj6uHHArQ
6P0azOPSCdHOalvbIl7bOQg6qvAYNb2U5VjHrX+umMnZIqAYbsh6l/Tj0IZZ
fPHW30cPsDS8yoxr8fbIpXtldb2wt9bEpdZaLMXEDR3scd18VicWJWVvueE0
9o07XiQB958Yn8TZpv/3iq69Nkts3aif8hVozLj0bMEBX5DPD69hWucUB40f
3RFkXZk3ymTepdtfbnGD2psTxuxLt6mFF2CjMadw469NrSfmn1ZcBZi/54W7
ZGfeap7RXg66MXfFOIYV55n1wyU8J2zGyLa5TOq/KJMve4nc6ZB546mzfDZY
bAdXUWDu34zDypmPe5Pr5kdLZfBrzk15If7u0yzIOy/ezrRBVK6ebK9EOoJo
hdu2+/7R3Wg3EyWazhvXHDYI4Gjr3Am26593QBUnTpCnKnP9sODH2xJeoGjO
Ld36bbRWVPwKsq/Q60cfNs3RBK9ZOLp+6d79dUBKB4iTevK73gnyJpqADa91
9dOoFa3XGAxrtq4v3bGvuD1QbP2Ma3e7RQLp/JSpjPMYl27f1QkhKw3Y6fUP
27lwb4wu2wnWRe9+mo0dNciSXNwteunW/OYjcolqfvZltvNrTiHswAPWEF+6
IwZ+wbu/Do4mP4XU1hZRHefRvn0Swu2MO3Jqw6zfPkXQvfQX9cYwmUsnWTC8
W/2x83Tb5dJjENebdYek8frzrYaV6MMu+3Lplzafc77AhuSOGZ3L5xFlwsAh
Kuq8/jDGp2Sa4wl2U2+ehSgsAZjUOBHthOyl9/iPHjjgGfls7n85xcaX41bE
Y9Z26dYvLIPDWDQ68bBo2hqHA6s655J66C+dYjBI+V+JuHhmOxN/orJkGRfN
SDoWNoR7YltnNZLO3kQWMWjlnZeWdHvAplvO13j/4KXHzVTBzon/hsC4cR+6
sxfWYSMIpn92GMImWfEuhL61X/keTXR5D6KrQVlfgh7g09ZjsWNx+yA+ohtA
3bwX5p29pEeAj1kPL6ZduziiA3tcDqTrY2996TxRzUG3MFJLTfP5f7tgAFs=

                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], "MissingCode" -> 0, 
                    "Version" -> {14.1, 0}, "ID" -> 2954878381358838009, 
                    "Output" -> <|
                    "f1" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>]}, 
                "Invertibility" -> "Impossible", "StructurePreserving" -> 
                True, "Missing" -> "Imputed"|>]|>, 
           "Output" -> <|
            "Preprocessor" -> 
             MachineLearning`MLProcessor[
              "ToMLDataset", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Preprocessor" -> 
                MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                    "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                    Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                "Perfect", "StructurePreserving" -> False, "Missing" -> 
                "Allowed"|>], "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 8544993552421202197|>], 
                  MachineLearning`MLProcessor[
                  "IntegerEncodeNominalVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                    "Index" -> {<|"BENAR" -> 1, "HOAX" -> 2|>}, "MissingCode" -> 
                    0, "Version" -> {14.1, 0}, "ID" -> 6919228972511305067, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FromVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|
                    "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 2359065663380275966|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
                    "Key" -> "f1", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>]}, "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
             "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
             "Marginal" -> <|
              "BENAR" -> 0.5076923076923077, "HOAX" -> 
               0.49230769230769234`|>|>, "LabelSplitter" -> 
           MachineLearning`MLProcessor[
            "FeatureLabelSplit", <|
             "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
              "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
           "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic,
            "Prior" -> Automatic, "Utility" -> 
           SparseArray[
            Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
           "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
           Automatic, "BatchProcessing" -> Automatic, 
           "Model" -> <|
            "Method" -> "NeuralNetwork", "Network" -> 
             NetGraph[<|
               "Type" -> "Graph", 
                "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1907867702]}, 
                    NeuralNetworks`IndexIntegerT[1, 112]]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                "Nodes" -> <|
                 "1" -> <|
                   "Type" -> "Embedding", 
                    "Arrays" -> <|"Weights" -> CompressedData["
1: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
duxOAT2pATfWZIKDYsHVi73yKLbREP8D8uF30g==
                    "]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {50}, "ClassCount" -> 112, 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1907867702]}, "$OutputDimension" -> 
                    50|>, "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1907867702]}, 
                    NeuralNetworks`IndexIntegerT[1, 112]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1907867702], 50}, 
                    NeuralNetworks`RealT]|>|>, 
                  "2" -> <|
                   "Type" -> "LongShortTermMemory", 
                    "Arrays" -> <|"InputGateInputWeights" -> CompressedData["
1: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
D20ykhQ=
                    "], "InputGateStateWeights" -> CompressedData["
1:eJwBcgGN/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CQAAAAkAAAB2DNa96/W+vVT4kz7/9qK+0oGovh067z7zAdS+y6VGP6AdgL7q
lom+/4kBvitmJD5rKTM/alv/PIMGzLvRZAs++TQWvkuT0T3GLVC/kVAnPCcm
HT81+Yk+MTsRP922+byLkzA//25JvhSgszvpcCg/tbSZvvAe+L2iEmk9jH0i
Pvg6Wz4UxGw8WUdJvmOOXD7W5ao+/EWgPmDGkb6KsQW+eHYkvoHFI72FyGu+
GlfDPh4R8TyBLJ49lMq5voh/Lr6XqEu+oJPPvU7feT3A/Jm7FASbPqmmQr/r
uxc/b1KRPqb3Qr4oBBm+zlgIv1xMcj5eQsi+auo7vt7cgr5LwlO++lIfPgNH
3r4Xv9G96N7zPpvEnr7kv2Q9gskmPmnOHr47r0S91ZK2vcgg+r7LxA0+YVcU
v7fRIj245bM+wqnEvqadVDv7ma3X
                    "], "InputGateBiases" -> 
                    RawArray[
                    "Real32",{-0.0009858179837465286, -0.0009178026230074465, \
-0.0009810106130316854, 0.0009456452098675072, 0.0009512339602224529, 
                    0.0009400537237524986, 0.0008457869989797473, 
                    0.0008923015557229519, 0.0009310884634032845}], 
                    "OutputGateInputWeights" -> CompressedData["
1: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
NvsWwsb/hIj/ACLPdns=
                    "], "OutputGateStateWeights" -> CompressedData["
1:eJwBcgGN/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CQAAAAkAAAAbPi4/jh6EvuEeEj2YAhG+HFh9vmi1jL4V6O+9QAOoPsBylL4K
I0g/qMupPXyYNT5R/O++e/IRvb6Xdz7J7fg7vXK4PDOLtz7+l06+pVskvhMm
Dr+n9SA9oQ8/Pm9+aT0dmw8//ORRvx5jgb35lS+9Yl2LPtjE9j6nsWK9Em0h
PqLo+z4scGU+sFh2vs9JUb44bvm+ybtfvi6eND2sHx++3pYDP57Dw76NuAS+
dmyTPSO1ET4ikTa+IzydvjY18b7DynE+Ra2ZPjUOyz5NRHG9nTMuPsxMKj+d
0dY9fyk+vZvipr3UOY2+Y3OJvRINED7cDlK+qzWGPHn31L6vlPy8/SmqPiEL
LL2Y/zs6glGLPtIlPj982d++GuESv/GOMD4N0n8+UJVGPjFs7D2ZX/g+8TMe
PhYbbL53N0y+vhAdv1ZRrr2/zqFS
                    "], "OutputGateBiases" -> 
                    RawArray[
                    "Real32",{-0.0009897461859509349, -0.0009278542129322886, \
-0.0009793135104700923, 0.000956379808485508, 0.0009617984760552645, 
                    0.0009568266686983407, 0.0008159608114510775, 
                    0.0009359951945953071, 0.000819376902654767}], 
                    "ForgetGateInputWeights" -> CompressedData["
1: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
uCTFOU9Hwv8HMAZr7A==
                    "], "ForgetGateStateWeights" -> CompressedData["
1:eJwBcgGN/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CQAAAAkAAAAOGpg+idd9Pm3H4T5wZRi+474AvZapkT40ZpO+f1vKvvnVSb4+
K50+CYqou8b7lb0X23a+mQ3fPp5EDT+vFMI+JUAXPvyuBz+hk5I+0rQQvKfN
Yz66BwG8S4JyPrlJ2T7a3V0966hQvlrI8T2fkys+AoJHvmX17L4C24o+9DU6
vY0FKr4FtLO+OibMPlISJj3+ZjM9uGl9Pm8Xb77UMAY/zB1nPcQzyj76rY89
hCs4vWok/76TEhk+Y2tnPNT9OL6mn4K+IkmmPsq9Jb4qNIE9fKAsvQl+Jz7b
0ok+dmh/PfrSkj7Bsg6+nFhxPnPTHT+Koy+8EN3+vjK8iL75308+jPMvv1du
nb7j1QO/R7LuPe000r1GzLE+lL7CO19A7j6lko4+3DvrPNP7gL7EntU+qXC3
vVzOCj56Juc+P1RMvh2Ok75erafC
                    "], "ForgetGateBiases" -> 
                    RawArray["Real32",{0.9990072846412659, 0.9990197420120239,
                     0.9990137219429016, 0.9992154240608215, 
                    1.0003466606140137`, 1.0009765625, 0.9990415573120117, 
                    0.9990578889846802, 1.000771164894104}], 
                    "MemoryGateInputWeights" -> CompressedData["
1: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
EHYLucF/AvCQeRk=
                    "], "MemoryGateStateWeights" -> CompressedData["
1:eJwBcgGN/iFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
CQAAAAkAAABAMQQ9J8VgPWU6sb5QtbY9k3MsPg2rAL0a3GC+H1g2vtWcfLtK
Lq29JmtlPcURWL+hERk+TaJoPsNjnr4/xVm/ibOkvmv2oD1WZq+9vV+tvgbs
nT7cpuq9IH6WvfEFKT7w7qu+hJyrO7yZXz31uWA9aaN1PJWwXz0CzRM+SumS
vb188b31YRo+gguOvVITsD4reJq+23LUvcrfnD3vTF2+R6fbvoZkCj+IU9q+
W/CjPZHmHz4iWiQ/6ZvTPB85HD7CNmu+ov9hPT8F1r4xYR0+NlTbPjhsGj7c
9Wm/DHwYPlUn0z0njFO+i2RdPj4RZr79KGm8Q25av6JJvT5jB8O90oRoviYy
sz3/VFq+dk1TvnFJTD4W4mK+Fwjzvi7lFr90fdo+lj4Bvjb2zb4ajta+4sqO
PkfM2T6v9qE+0oxrPkYs0z6SQaQZ
                    "], "MemoryGateBiases" -> 
                    RawArray[
                    "Real32",{-0.0009978202870115638, -0.0009861612925305963, 
                    0.0009939477313309908, 
                    0.0009966730140149593, -0.0009962670737877488, \
-0.0009979235474020243, -0.0009414494852535427, -0.0009967124788090587, \
-0.0009927854407578707}]|>, 
                    "Parameters" -> <|
                    "OutputSize" -> 9, "Dropout" -> 
                    NeuralNetworks`ValidatedParameter[0.2689516937894716], 
                    "$InputSize" -> 50, "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1907867702], 
                    "$CellStateConnectedQ" -> False|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1907867702], 50}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1907867702], 9}, 
                    NeuralNetworks`RealT]|>, 
                    "States" -> <|
                    "State" -> 
                    NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT], 
                    "CellState" -> 
                    NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]|>|>, 
                  "3" -> <|
                   "Type" -> "SequenceLast", "Arrays" -> <||>, 
                    "Parameters" -> <||>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1907867702], 9}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]|>|>, 
                  "4" -> <|
                   "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    RawArray[
                    "Real32",{{-0.29851990938186646`, -0.17198233306407928`, \
-0.39789944887161255`, -0.07424458116292953, -0.24799072742462158`, \
-0.7044107913970947, -0.021470289677381516`, -0.030344495549798012`, \
-0.4114503860473633}, {0.0413515567779541, 
                    0.2216387689113617, -0.49269604682922363`, \
-0.11790741235017776`, 0.2456531971693039, 0.5611268281936646, 
                    0.01761310175061226, 
                    0.13684703409671783`, -0.12931989133358002`}}], "Biases" -> 
                    RawArray["Real32",{
                    0.0009969003731384873, -0.0009969002567231655}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 9, "$InputDimensions" -> {9}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                "Edges" -> {
                 NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Inputs", "Input"], 
                  NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Outputs", "Output"] -> 
                  NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
                "InteriorStates" -> <|{2, "State"} -> 
                  NeuralNetworks`NetPath["Nodes", "2", "States", "State"], {
                   2, "CellState"} -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "2", "States", "CellState"]|>|>, <|
               "Version" -> "14.1.2", "Unstable" -> False|>], 
             "Training" -> <|
              "Optimizer" -> {"ADAM", "L2Regularization" -> 0.01}, 
               TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
               "TotalTrainingTime" -> 0.5148386, "MeanInputsPerSecond" -> 
               145.67672276321161`|>, "InputType" -> "NominalSequence", 
             "EmptySequenceDistribution" -> {0.5882352941176471, 
              0.4117647058823529}, "Processor" -> 
             MachineLearning`MLProcessor[
              "Sequence", <|
               "Input" -> <|
                 "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Expression", "Weight" -> 1|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "NoninvertibleIntegerEncodeNominalSequence", <|
                   "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Index" -> 
                    MachineLearning`SortedHashAssociation[<|
                    "KeyHashes" -> CompressedData["
1:eJwNzj0oBGAAANCPImWQTK7ETdR1uk0X3cB0t6HUGfyVM6gzCYMo6RY/qcug
25VsDCacLsmA6RIDg2wGZRD5ecPbX3RqbihfE0LIU0+EKJ3EiJMkxQBpMgwy
QpZRJsixyDIrrFNgg01K7HNKmQp3VHngkSdeeOOTL+oE22ingzgJeuglQ5Zx
ppllngWWWGOLIseccE6ZCpdccc0Nt1S555lX3vngmx9++aOhNoRGmmimhVYi
dBGjmwRJ+kjRT5phxpgkxwyrFNhmh132KHHAIUecccE/yOg4mA==
                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    ToString[#, InputForm] <> "Cn.i9)P$", "Murmur3-64"]]& , 
                    MachineLearning`file163SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {14.1, 0}|>], "MissingCode" -> 0, 
                    "Version" -> {14.1, 0}, "ID" -> 7373776158002688576, 
                    "Output" -> <|
                    "f1" -> <|
                    "Type" -> "NominalSequence", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "ToExpression", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "FromMLDataset" -> 
                    MachineLearning`MLProcessor[
                    "FromMLDataset", <|
                    "DatasetFormat" -> Automatic, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "NominalSequence", "Weight" -> 1|>|>, 
                    "Output" -> <|"f1" -> <|"Type" -> "NominalSequence"|>|>, 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor[
                    "WrapMLDataset", <|
                    "FeatureTypes" -> {"NominalSequence"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1, "StructurePreserving" -> 
                    False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"|>], "Version" -> {14.1, 0}, "ID" -> 
                    1636547265949986204, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Expression", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "ExpressionFunction", <|
                   "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Expression", "Weight" -> 1|>|>, 
                    "Function" -> (# + 1& ), "InverseFunction" -> (-1 + #& ), 
                    "Listable" -> True, "ListableInverse" -> False, 
                    "Version" -> {14.1, 0}, "ID" -> 3094041527147980760, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Expression", "Weight" -> 1|>|>|>], 
                  MachineLearning`MLProcessor[
                  "FirstValues", <|
                   "Info" -> <|"Type" -> "Expression", "Weight" -> 1|>, "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
                "Impossible", "StructurePreserving" -> False, "Missing" -> 
                "Imputed"|>], "FeatureNumber" -> 1, "Calibrator" -> None, 
             "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
             "Options" -> <|
              "NetworkType" -> <|"Value" -> "Recurrent", "Options" -> <||>|>, 
               "NetworkDepth" -> <|"Value" -> 1, "Options" -> <||>|>, 
               "NumberOfParameters" -> <|"Value" -> 2169, "Options" -> <||>|>,
                "ActivationFunction" -> <|
                "Value" -> Ramp, "Options" -> <||>|>, 
               "L2Regularization" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
               "Dropout" -> <|
                "Value" -> 0.2689516937894716, "Options" -> <||>|>, 
               "NetInitializationMethod" -> <|
                "Value" -> Automatic, "Options" -> <||>|>, 
               "OptimizationMethod" -> <|
                "Value" -> {"ADAM", "L2Regularization" -> 0.01}, 
                 "Options" -> <||>|>, 
               MaxTrainingRounds -> <|"Value" -> 5, "Options" -> <||>|>, 
               ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
               "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
               TrainingProgressReporting -> <|
                "Value" -> None, "Options" -> <||>|>, 
               "NetTrainOptions" -> <|
                "Value" -> {
                  LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
                 "Options" -> <||>|>, 
               "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
               "ValidationSetRatio" -> <|
                "Value" -> None, "Options" -> <||>|>|>|>, 
           "TrainingInformation" -> <|
            "Reporting" -> None, "TrainingFunction" -> Classify, 
             "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
             "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
             0.2635881`6.872470793116756, "LossName" -> "MeanCrossEntropy", 
             "BestModelInformation" -> 
             Dataset[<|
               "MeanCrossEntropy" -> 
                Around[0.7064791967071041, 0.014975494119418026`], "Accuracy" -> 
                Around[0.5042544971534114, 0.06620039018674324], 
                "EvaluationTime" -> 0.0006468649066196397, "TestSize" -> 113, 
                "ModelMemory" -> 98768, 
                "ModelUtility" -> -0.34993787486221883`, "Round" -> 1, 
                "Iteration" -> 1, 
                "Time" -> {
                 0.2995857`6.928066073019701, 2.7295825`7.887641218627528}, 
                "TrainingSize" -> 15, "TrainingTime" -> 2.51188643150958, 
                "TrainingMemory" -> 11279184, "ExperimentCount" -> 1, 
                "MeanCrossEntropyHistory" -> {
                  Around[0.7064791967071041, 0.010589273443459751`]}, 
                "AccuracyHistory" -> {
                  Around[0.5042544971534114, 0.04681074481824152]}, 
                "IterationHistory" -> {1}, 
                "TimeHistory" -> {{
                  0.2995857`6.928066073019701, 2.7295825`7.887641218627528}}, 
                "Configuration" -> {
                 "NeuralNetwork", "NetworkType" -> "Recurrent", 
                  "NetworkDepth" -> 1, "NumberOfParameters" -> 2169, 
                  "ActivationFunction" -> Ramp, "L2Regularization" -> 0.01, 
                  "Dropout" -> 0.2689516937894716, "NetInitializationMethod" -> 
                  Automatic, 
                  "OptimizationMethod" -> {
                   "ADAM", "L2Regularization" -> 0.01}, MaxTrainingRounds -> 
                  5, ValidationSet -> Automatic, "EarlyStopping" -> False, 
                  TrainingProgressReporting -> None, "NetTrainOptions" -> 
                  Automatic, "LossFunction" -> Automatic}|>, 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], TypeSystem`AnyType, 18], <||>], 
             "Configurations" -> 
             Dataset[<|<|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 2169|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.01|>, 
                    "Dropout" -> <|"Value" -> 0.2689516937894716|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
                    MaxTrainingRounds -> <|"Value" -> 5|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.7064791967071041, 0.014975494119418026`], 
                    "Accuracy" -> 
                    Around[0.5042544971534114, 0.06620039018674324], 
                    "EvaluationTime" -> 0.0006468649066196397, "TestSize" -> 
                    113, "ModelMemory" -> 98768, 
                    "ModelUtility" -> -0.34993787486221883`, "Round" -> 1, 
                    "Iteration" -> 1, 
                    "Time" -> {
                    0.2995857`6.928066073019701, 2.7295825`7.887641218627528},
                     "TrainingSize" -> 15, "TrainingTime" -> 2.51188643150958,
                     "TrainingMemory" -> 11279184, "ExperimentCount" -> 1, 
                    "MeanCrossEntropyHistory" -> {
                    Around[0.7064791967071041, 0.010589273443459751`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5042544971534114, 0.04681074481824152]}, 
                    "IterationHistory" -> {1}, 
                    "TimeHistory" -> {{
                    0.2995857`6.928066073019701, 
                    2.7295825`7.887641218627528}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.6995827886922986, 0.02107755033745691], 
                    "Accuracy" -> 
                    Around[0.5000021917568047, 0.1373361204098306], 
                    "EvaluationTime" -> 0.007674085826803382, "TestSize" -> 
                    26, "ModelMemory" -> 196448, 
                    "ModelUtility" -> -0.5464623230323171, "Round" -> 2, 
                    "Iteration" -> 4, 
                    "Time" -> {
                    4.3322445`8.088257952530595, 4.9132962`8.142917940034208},
                     "TrainingSize" -> 102, "TrainingTime" -> 
                    0.3981071705534972, "TrainingMemory" -> 547600, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.6995827886922986, 0.014904078774416582`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5000021917568047, 0.09711130204364342]}, 
                    "IterationHistory" -> {4}, 
                    "TimeHistory" -> {{
                    4.3322445`8.088257952530595, 
                    4.9132962`8.142917940034208}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.007674085826803382, 
                    "MeanCrossEntropy" -> 
                    Around[0.6995827886922986, 0.02107755033745691], 
                    "ModelMemory" -> 196448, "TrainingMemory" -> 547600, 
                    "TrainingTime" -> 3.011471900439459|>, "Index" -> 1|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 2169|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.01|>, 
                    "Dropout" -> <|"Value" -> 0.005941981978542121|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
                    MaxTrainingRounds -> <|"Value" -> 25|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 2|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 1447|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.1|>, 
                    "Dropout" -> <|"Value" -> 0.018037872498891383`|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.1}|>, 
                    MaxTrainingRounds -> <|"Value" -> 25|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.7119265810602761, 0.021108224553409865`], 
                    "Accuracy" -> 
                    Around[0.49574755105035406`, 0.0662003997574455], 
                    "EvaluationTime" -> 0.0011072465868592549`, "TestSize" -> 
                    113, "ModelMemory" -> 94672, 
                    "ModelUtility" -> -0.3698965727764161, "Round" -> 1, 
                    "Iteration" -> 2, 
                    "Time" -> {
                    2.8729701`7.909876099657576, 3.2406048`7.96217106444044}, 
                    "TrainingSize" -> 15, "TrainingTime" -> 
                    0.25118864315095796`, "TrainingMemory" -> 279744, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.7119265810602761, 0.014925768720524498`]}, 
                    "AccuracyHistory" -> {
                    Around[0.49574755105035406`, 0.04681075158574999]}, 
                    "IterationHistory" -> {2}, 
                    "TimeHistory" -> {{
                    2.8729701`7.909876099657576, 
                    3.2406048`7.96217106444044}}|>, <|
                    "MeanCrossEntropy" -> 
                    Around[0.696540718090406, 0.019234210683491675`], 
                    "Accuracy" -> 
                    Around[0.4259281176827307, 0.13582073115101342`], 
                    "EvaluationTime" -> 0.0019276432062587394`, "TestSize" -> 
                    26, "ModelMemory" -> 192224, 
                    "ModelUtility" -> -0.40312928552154226`, "Round" -> 2, 
                    "Iteration" -> 3, 
                    "Time" -> {
                    3.2426044`7.962438961170828, 4.1562488`8.070246530752849},
                     "TrainingSize" -> 102, "TrainingTime" -> 
                    0.7943282347242815, "TrainingMemory" -> 726792, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.696540718090406, 0.0136006408050677]}, 
                    "AccuracyHistory" -> {
                    Around[0.4259281176827307, 0.09603976002259655]}, 
                    "IterationHistory" -> {3}, 
                    "TimeHistory" -> {{
                    3.2426044`7.962438961170828, 
                    4.1562488`8.070246530752849}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.0019276432062587394`, 
                    "MeanCrossEntropy" -> 
                    Around[0.696540718090406, 0.019234210683491675`], 
                    "ModelMemory" -> 192224, "TrainingMemory" -> 726792, 
                    "TrainingTime" -> 1.2479927024128015`|>, "Index" -> 3|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 645|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.01|>, 
                    "Dropout" -> <|"Value" -> 0.2668544151279081|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
                    MaxTrainingRounds -> <|"Value" -> 125|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 4|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 1447|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.1|>, 
                    "Dropout" -> <|"Value" -> 0.13011934325765206`|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.1}|>, 
                    MaxTrainingRounds -> <|"Value" -> 125|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 5|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 1447|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.01|>, 
                    "Dropout" -> <|"Value" -> 0.03648956620724708|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
                    MaxTrainingRounds -> <|"Value" -> 25|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 6|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 3249|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.01|>, 
                    "Dropout" -> <|"Value" -> 0.27877484891486093`|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
                    MaxTrainingRounds -> <|"Value" -> 25|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 7|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 2|>, 
                    "NumberOfParameters" -> <|"Value" -> 2701|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.01|>, 
                    "Dropout" -> <|"Value" -> 0.13078462551106756`|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
                    MaxTrainingRounds -> <|"Value" -> 25|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 8|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 3249|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.1|>, 
                    "Dropout" -> <|"Value" -> 0.193648620208496|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.1}|>, 
                    MaxTrainingRounds -> <|"Value" -> 125|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {<|
                    "MeanCrossEntropy" -> 
                    Around[0.698572675827512, 0.023802213192304616`], 
                    "Accuracy" -> 
                    Around[0.5000021917568047, 0.1373361204098306], 
                    "EvaluationTime" -> 0.0019276432062587394`, "TestSize" -> 
                    26, "ModelMemory" -> 199520, 
                    "ModelUtility" -> -0.4073269278921199, "Round" -> 2, 
                    "Iteration" -> 5, 
                    "Time" -> {
                    5.0965759`8.15882348975825, 8.2654998`8.368814113208554}, 
                    "TrainingSize" -> 102, "TrainingTime" -> 
                    3.1622776601683795`, "TrainingMemory" -> 547656, 
                    "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                    Around[0.698572675827512, 0.016830706355526494`]}, 
                    "AccuracyHistory" -> {
                    Around[0.5000021917568047, 0.09711130204364342]}, 
                    "IterationHistory" -> {5}, 
                    "TimeHistory" -> {{
                    5.0965759`8.15882348975825, 
                    8.2654998`8.368814113208554}}|>}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 0.0019276432062587394`, 
                    "MeanCrossEntropy" -> 
                    Around[0.698572675827512, 0.023802213192304616`], 
                    "ModelMemory" -> 199520, "TrainingMemory" -> 547656, 
                    "TrainingTime" -> 7.13062609645811|>, "Index" -> 9|>, <|
                 "Value" -> "NeuralNetwork", 
                  "Options" -> <|
                   "NetworkType" -> <|"Value" -> "Recurrent"|>, 
                    "NetworkDepth" -> <|"Value" -> 1|>, 
                    "NumberOfParameters" -> <|"Value" -> 1447|>, 
                    "ActivationFunction" -> <|"Value" -> Ramp|>, 
                    "L2Regularization" -> <|"Value" -> 0.01|>, 
                    "Dropout" -> <|"Value" -> 0.2186131566803221|>, 
                    "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                    "OptimizationMethod" -> <|
                    "Value" -> {"ADAM", "L2Regularization" -> 0.01}|>, 
                    MaxTrainingRounds -> <|"Value" -> 25|>, 
                    ValidationSet -> <|"Value" -> Automatic|>, 
                    "EarlyStopping" -> <|"Value" -> False|>, 
                    TrainingProgressReporting -> <|"Value" -> None|>, 
                    "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                    "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
                 "Experiments" -> {}, 
                  "PredictedPerformances" -> <|
                   "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, 
                    "ModelMemory" -> 1, "TrainingMemory" -> 1, "TrainingTime" -> 
                    1|>, "Index" -> 10|>|>, 
               TypeSystem`Assoc[
                TypeSystem`Struct[{"Value", "Options"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["NeuralNetwork"]], 
                  TypeSystem`Assoc[TypeSystem`AnyType, 
                   TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
                
                TypeSystem`Struct[{
                 "Experiments", "PredictedPerformances", "Index"}, {
                  TypeSystem`Vector[
                   
                   TypeSystem`Struct[{
                    "MeanCrossEntropy", "Accuracy", "EvaluationTime", 
                    "TestSize", "ModelMemory", "ModelUtility", "Round", 
                    "Iteration", "Time", "TrainingSize", "TrainingTime", 
                    "TrainingMemory", "ExperimentCount", 
                    "MeanCrossEntropyHistory", "AccuracyHistory", 
                    "IterationHistory", "TimeHistory"}, {
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType, TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`AnyLength], 
                  
                  TypeSystem`Struct[{
                   "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                    "TrainingMemory", "TrainingTime"}, {
                    TypeSystem`Atom[Real], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Integer], 
                    TypeSystem`Atom[Real]}], 
                  TypeSystem`Atom[Integer]}], 10], <||>], 
             "TrainingSizes" -> {15, 102}, "MaxTrainingSize" -> 128, 
             "PreprocessorEvaluationTime" -> 4.12578125*^-6, 
             "PreprocessorMemory" -> 82096, "InputDimension" -> 
             Rational[76, 5], "OutputDimension" -> 1, 
             "BaselineLogProbability" -> -0.6930288326958663, 
             "VariableBudget" -> True, 
             "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
             False, "NaturalStop" -> True, "AbortStop" -> False, 
             "RoundPartitioning" -> 
             Dataset[{<|
                "TrainingSizes" -> 15, "TimeBudgets" -> 3.3523762411459357`, 
                 "ElapsedTimes" -> 2.9390193, "ExperimentCounts" -> 2|>, <|
                "TrainingSizes" -> 102, "TimeBudgets" -> 4.789108915922765, 
                 "ElapsedTimes" -> 5.2348824, "ExperimentCounts" -> 3|>}, 
               TypeSystem`Vector[
                
                TypeSystem`Struct[{
                 "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
                  "ExperimentCounts"}, {
                  TypeSystem`Atom[Integer], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Real], 
                  TypeSystem`Atom[Integer]}], 2], <||>]|>, "AnomalyDetector" -> 
           None, "Log" -> <|
            "Example" -> 
             MachineLearning`MLDataset[<|
               "f1" -> <|
                 "Type" -> "Text", "Weight" -> 1, 
                  "Values" -> {
                   "bakteri bukan covid19 diperkuat hipoksia italia \
kementerian kesehatan melainkan mnyebabkan peradangan radiasi virus"}, "ID" -> 
                  302169982824646901|>|>, <|
               "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                "LogDensityRatios" -> 0, "RawExample" -> False|>], 
             "TrainingTime" -> 8.5028207, "MaxTrainingMemory" -> 12762784, 
             "DataMemory" -> 23472, "FunctionMemory" -> 334360, 
             "LanguageVersion" -> {14.1, 0}, "Date" -> 
             DateObject[{2024, 11, 29, 17, 59, 12.8939651`8.86296144680461}, 
               "Instant", "Gregorian", 7.], "ProcessorCount" -> 6, 
             "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
             "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
        "TestSet" -> <|
         "Input" -> {
           "aplikasi kominfo lindungi luncurkan peduli", 
            "akun bupati indramayu mengatasnamakan whatsapp", 
            "cabe impor ribu ton", 
            "ajak artikel bangun brigjen covid hadapi mardjo mengatasnamakan \
optimisme purn subiandono tni warga", 
            "beirut lebanon ledakan rudal serangan versi video", 
            "118 cipularang kembali longsor pinggir tol", 
            "1000 arya bima diberi gds gelar lingkungan menyemprot meter \
radius razia sanksi siswa terjaring", 
            
            "bangkitkan hip keluarkan khawatir komunis maklumat mui paham ruu \
tolak", "jabar milenial vaksinasi", 
            "dini divaksin jangka mati siapsiap tahun waktu", 
            "disuntik duluan jokowi mau tak vaksin", 
            "100 covid19 gratis internet isi kuota pandemi tanpa ulang", 
            "bandung covid19 positif ratusan secapa siswa", 
            "238 alatnya corona mahal tak terungkap tes virus wni wuhan", 
            "200 kemendikbud kuota pulsa ribu subsidi", 
            "bandung corona ditutup kota pasar pedagang positif", 
            "2020 april area bandung cibiru cileunyi cimahi kamil lembang \
lockdown maret ridwan", 
            "bandung bantuan covid19 kota modal pandemi pelaku tengah terima \
umkm usaha", 
            "desa gegara guru jadi jalan kemarahan perangkat posting rusak \
sasaran sukabumi", "75gb internet kuota subsidi", 
            "5500000 bantuan bjb finansial sosial", 
            "diskominfo jabar kerja lowongan", 
            "cimahi covid19 disebutkan foto kabur pasien positif rumah sakit \
tersebar wanita", "100 bergambar jokowi pecahan redenominasi uang", 
            "bagikan farma juta ke50 kimia rupiah uang ultah", 
            "ade armando beragama dijalankan harus islam percaya syariat", 
            "corona daerah kemenkes penting siagakan virus waspada", 
            "babi bandung daging kabupaten pengungkapan penjualan", 
            "covid19 dosis guru lumpuh sukabumi usai vaksin", 
            "ditengah jokowi kerumunan masker memakai tanpa tiongkok video \
warga", "air dapat daun katarak rebusan sembuhkan siri", 
            "ajid ambruk bangunan demi foto jihyo selamatkan terobos"}, 
          "Output" -> {
           "BENAR", "HOAX", "BENAR", "HOAX", "HOAX", "BENAR", "HOAX", "BENAR",
             "BENAR", "HOAX", "HOAX", "HOAX", "BENAR", "BENAR", "HOAX", 
            "BENAR", "HOAX", "BENAR", "BENAR", "HOAX", "HOAX", "BENAR", 
            "HOAX", "HOAX", "HOAX", "BENAR", "BENAR", "BENAR", "BENAR", 
            "HOAX", "HOAX", "HOAX"}|>, 
        "Predictions" -> {
         "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", 
          "BENAR", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", 
          "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", 
          "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX", "HOAX"}, 
        "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmViYGBQAGIQfSrX9iijy4v9p3L/PtKxfLI/6NcO2f5NL4C0xalv
Nx7vP7py08qN/C+AtJFof/qT/UfYdwWebn8FonWVox7tT9acU8xu8ApEXz80
79F+3fOhnew6L0G04v/Cx/t920TF46VfgeiXUusf7Te53ZCZ+v8liI6NPvpo
f9MSs7OnuJ6B6LWPAp/tV5I78rFy70sQ3R7669H+A893OfwtfwmiBViNH+/X
1zRR52d7BaLzuQ882l8W8UKnB+h+IP1yk8WT/Xx/XpaoZ70E0fqZdo/3nz9x
bL9D0UsQzb/X/PH+Kt5LvRNjXoLo0oWej/fP4pwbECj0CkSv8tr2aH+i/fs1
5xVegWiP06se7b+j71Lyi+8ViFb5tOPR/kP/36V4W78A0b13HDDDq/rmuU4t
3+cg+ruA5NP9ugfqrLbJvgLR7+zXPtrPusGVf1r6CyB9VOmT5JP9e8uqna8D
/Quk/3IC/YvOt41csvMs30sgrdLe3PV4//2jUloXlr0A0rP8hB4/3n+nzHGi
DzB8gfRMTWD4vlnXrPTl7EsQzcP69tF+faW81tCmlyC6uk3r8X7/8DNuIPOB
9C+Q+QBSpCoz
         "], "CountMatrix" -> {{1, 14, 0}, {0, 17, 0}}, 
        "IndicesMatrix" -> {{{9}, {1, 3, 6, 8, 13, 14, 16, 18, 19, 22, 26, 27,
            28, 29}, {}}, {{}, {2, 4, 5, 7, 10, 11, 12, 15, 17, 20, 21, 23, 
           24, 25, 30, 31, 32}, {}}}, "ExtendedClasses" -> {"BENAR", "HOAX"}, 
        "Weights" -> SparseArray[Automatic, {32}, 1., {1, {{0, 0}, {}}, {}}], 
        "BatchEvaluationTime" -> 0.001185096875, "SingleEvaluationTime" -> 
        0.0073093, "Version" -> {14.1, 0}|>]], 
     TagBox[
      StyleBox[
       FrameBox[GridBox[{
          {
           ItemBox[
            FrameBox[
             StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
              StripOnInput->False,
              FontSize->12],
             FrameMargins->{{10, 5}, {-4, 2}},
             FrameStyle->None,
             StripOnInput->False],
            Alignment->{Left, Bottom},
            Background->RGBColor[0.96, 0.96, 0.96],
            Frame->{{False, False}, {True, False}},
            FrameStyle->Opacity[0.1],
            ItemSize->{Automatic, 1},
            StripOnInput->False]},
          {
           ItemBox[
            TagBox[
             FrameBox[
              TagBox[GridBox[{
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  
                  InterpretationBox[Cell[
                   "GradientBoostedTrees",ExpressionUUID->
                    "6d90ec0d-a54c-7145-a2bb-013a519ad97c"],
                   TextCell["GradientBoostedTrees"]]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], "32"},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"47.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[46.875`3., 8.9627083590303477934`3.]], ")"}], 
                    "\"%\"", "percent", "\"Percent\""},
                   "QuantityPostfix"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{
                    RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"53.", "9."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[53.125`3., 8.9627083590303477934`3.]], ")"}], 
                    "\"%\"", "percent", "\"Percent\""},
                   "QuantityPostfix"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"0.4994509380895683637`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0013990010307330658`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4966529360281022321`3.", "\", \"", 
                    "0.5022489401510344953`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                   Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.4966529360281022321`3., ", ", 0.5022489401510344953`3., 
                    "]"}], "Tooltip"]& ]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"0.6942459077605357409`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0028010743290520779`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                    
                    TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.6886437591024315852`3.", "\", \"", 
                    "0.6998480564186398967`3.", "\"]\""}, "RowDefault"],
                    TooltipStyle->{}],
                   Annotation[#, 
                    
                    Row[{"95% confidence interval: [", 
                    0.6886437591024315852`3., ", ", 0.6998480564186398967`3., 
                    "]"}], "Tooltip"]& ]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{"7.59`", 
                    
                    RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                    "milliseconds per example", 
                    FractionBox["\"Milliseconds\"", "\"Examples\""]},
                   "Quantity"]},
                 {
                  TemplateBox[{
                    TemplateBox[{5}, "Spacer1"], 
                    StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                   "RowDefault"], 
                  TemplateBox[{"1.82`", 
                    
                    RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                    "examples per millisecond", 
                    FractionBox["\"Examples\"", "\"Milliseconds\""]},
                   "Quantity"]},
                 {
                  ItemBox[
                   
                   GraphicsBox[
                    RasterBox[{{{1., 0.42, 0.}, {1., 1., 1.}}, {{
                    0.8705195089609821, 0.5486225809901321, 
                    0.006446471371763139}, {1., 1., 1.}}}, {{0, 0}, {2, 2}}, {
                    0, 1}],
                    Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" examples of \"", "\"BENAR\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.46875`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6382978723404256`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " examples of ", "BENAR", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.46875}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.6382978723404256}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["17", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" examples of \"", "\"HOAX\"", 
                    "\" misclassified as \"", "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.53125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "1.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{17, " examples of ", "HOAX", " misclassified as ", 
                    "BENAR"}], 
                    Row[{"Column fraction = ", 0.53125}], 
                    Row[{"Row fraction = ", 1.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"BENAR\"", 
                    "\" misclassified as \"", "\"HOAX\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "BENAR", " misclassified as ", 
                    "HOAX"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"HOAX\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example of ", "HOAX", " correctly classified"}], 
                    Row[{"Precision = ", 0.}], 
                    Row[{"Recall = ", 0.}], 
                    Row[{"FScore = ", 0.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "BENAR"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{17, " example", "s", " of class ", "HOAX"}], 
                    Row[{"Recall = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "32", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"BENAR\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.46875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{32, " example", "s", " classified as ", "BENAR"}], 
                    Row[{"Precision = ", 0.46875}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example\"", "\"\"", "\" classified as \"", 
                    "\"HOAX\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{0, " example", "", " classified as ", "HOAX"}], 
                    Row[{"Precision = ", 0.}]}], "Tooltip"]& ]},
                    Frame->True,
                    FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                    FrameTicks->{{{{1.5, 
                    FormBox[
                    RotationBox["\"BENAR\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"HOAX\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{1.5, 
                    FormBox["15", TraditionalForm]}, {0.5, 
                    FormBox["17", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["32", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["0", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"BENAR\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"HOAX\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                    FrameTicksStyle->13,
                    GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                    ImageSize->181.2,
                    
                    Method->{
                    "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02],
                     "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                    PlotRangePadding->None],
                   Alignment->Center,
                   StripOnInput->False], "\[SpanFromLeft]"}
                },
                AutoDelete->False,
                ColumnsEqual->False,
                
                GridBoxAlignment->{
                 "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
                GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
                
                GridBoxItemSize->{
                 "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], 
                    Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}],
               "Grid"],
              FrameMargins->{{10, 10}, {10, 5}},
              FrameStyle->None,
              StripOnInput->False],
             Deploy,
             DefaultBaseStyle->"Deploy"],
            Alignment->Center,
            
            BaseStyle->{
             FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
              NumberMarks -> False, Deployed -> False},
            StripOnInput->False]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
         GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], 
             Offset[0.8], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Background->GrayLevel[1],
        FrameMargins->{{0, 0}, {0, 0}},
        FrameStyle->GrayLevel[0.85],
        RoundingRadius->5,
        StripOnInput->False],
       StripOnInput->False,
       LineBreakWithin->False],
      Deploy,
      DefaultBaseStyle->"Deploy"]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.9409792339064407`*^9, 3.9409792497456074`*^9}, 
   3.940987266778799*^9, 3.9418667627371216`*^9},
 CellLabel->
  "Out[96]//TableForm=",ExpressionUUID->"1528d7aa-77cb-3346-a6af-\
57c7a5c8f376"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive Visualization", "Section",
 CellChangeTimes->{{3.940979271276596*^9, 3.9409792744512215`*^9}, {
  3.940979462199587*^9, 
  3.940979464161972*^9}},ExpressionUUID->"13dfcac2-f0a9-934b-a1fe-\
65eceae8cdce"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", "\n", "    ", 
    RowBox[{
     RowBox[{"selectedModel", " ", "=", " ", "\"\<SVM\>\""}], ",", "\n", 
     "    ", 
     RowBox[{"inputText", " ", "=", " ", "\"\<\>\""}], ",", "\n", "    ", 
     RowBox[{"result", " ", "=", " ", "\"\<\>\""}], ",", "\n", "    ", 
     RowBox[{"showMetrics", " ", "=", " ", "False"}]}], "\n", "  ", "}"}], 
   ",", "\n", "  ", "\n", "  ", 
   RowBox[{"Column", "[", 
    RowBox[{
     RowBox[{"{", "\n", "    ", 
      RowBox[{
       RowBox[{"Panel", "[", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
          "\"\<Indonesian Text Sentiment Classifier\>\"", ",", " ", "Bold", 
           ",", " ", "20", ",", " ", "Blue"}], "]"}], ",", " ", "\n", 
         "      ", 
         RowBox[{"Background", " ", "->", " ", "LightBlue"}]}], "]"}], ",", 
       "\n", "    ", "\n", "    ", 
       RowBox[{"Grid", "[", 
        RowBox[{"{", "\n", "      ", 
         RowBox[{"{", "\n", "        ", 
          RowBox[{
           RowBox[{"Column", "[", 
            RowBox[{"{", "\n", "          ", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"\"\<Select Model:\>\"", ",", " ", "Bold"}], "]"}], 
              ",", "\n", "          ", 
              RowBox[{"PopupMenu", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", "selectedModel", "]"}], ",", " ", 
                "\n", "            ", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<Markov\>\"", ",", " ", "\"\<SVM\>\"", ",", " ", 
                  "\"\<Random Forest\>\"", ",", " ", "\"\<Neural Network\>\"",
                   ",", " ", "\"\<Gradient Boosting\>\""}], "}"}], ",", "\n", 
                "            ", 
                RowBox[{"ImageSize", " ", "->", " ", "200"}]}], "]"}], ",", 
              "\n", "          ", "\n", "          ", 
              RowBox[{"Spacer", "[", "10", "]"}], ",", "\n", "          ", 
              "\n", "          ", 
              RowBox[{"(*", " ", 
               RowBox[{"Model", " ", "Metrics"}], " ", "*)"}], "\n", 
              "          ", 
              RowBox[{"Dynamic", "[", "\n", "            ", 
               RowBox[{"Panel", "[", "\n", "              ", 
                RowBox[{
                 RowBox[{"Grid", "[", 
                  RowBox[{"{", "\n", "                ", 
                   RowBox[{"{", 
                    RowBox[{
                    "\"\<Accuracy:\>\"", ",", " ", "\n", "                  ", 
                    RowBox[{
                    RowBox[{"NumberForm", "[", "\n", "                    ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "selectedModel", ",", "\n", "                      ", 
                    "\"\<Markov\>\"", ",", " ", 
                    RowBox[{"evalMarkov", "[", "\"\<Accuracy\>\"", "]"}], ",",
                     "\n", "                      ", "\"\<SVM\>\"", ",", " ", 
                    RowBox[{"evalSVM", "[", "\"\<Accuracy\>\"", "]"}], ",", 
                    "\n", "                      ", "\"\<Random Forest\>\"", 
                    ",", " ", 
                    RowBox[{"evalRF", "[", "\"\<Accuracy\>\"", "]"}], ",", 
                    "\n", "                      ", "\"\<Neural Network\>\"", 
                    ",", " ", 
                    RowBox[{"evalNN", "[", "\"\<Accuracy\>\"", "]"}], ",", 
                    "\n", "                      ", 
                    "\"\<Gradient Boosting\>\"", ",", " ", 
                    RowBox[{"evalGB", "[", "\"\<Accuracy\>\"", "]"}]}], "\n", 
                    "                    ", "]"}], " ", "*", " ", "100"}], 
                    ",", " ", "\n", "                    ", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", " ", "2"}], "}"}]}], "\n", 
                    "                  ", "]"}], "\"\<%\>\""}]}], "\n", 
                    "                ", "}"}], "\n", "              ", "}"}], 
                  "]"}], ",", "\n", "              ", 
                 RowBox[{"Background", " ", "->", " ", "LightYellow"}]}], 
                "\n", "            ", "]"}], "\n", "          ", "]"}], ",", 
              "\n", "          ", "\n", "          ", 
              RowBox[{"Spacer", "[", "20", "]"}], ",", "\n", "          ", 
              "\n", "\n", "          ", 
              RowBox[{"Style", "[", 
               RowBox[{
               "\"\<Enter Text for Classification:\>\"", ",", " ", "Bold"}], 
               "]"}], ",", "\n", "          ", 
              RowBox[{"InputField", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", "inputText", "]"}], ",", " ", 
                "String", ",", " ", "\n", "            ", 
                RowBox[{"ImageSize", " ", "->", " ", 
                 RowBox[{"{", 
                  RowBox[{"400", ",", " ", "100"}], "}"}]}], ",", " ", "\n", 
                "            ", 
                RowBox[{"Background", " ", "->", " ", "White"}], ",", "\n", 
                "            ", 
                RowBox[{"ContinuousAction", " ", "->", " ", "True"}]}], "\n", 
               "          ", "]"}], ",", "\n", "\n", "          ", 
              RowBox[{"Button", "[", 
               RowBox[{"\"\<Classify Text\>\"", ",", "\n", "            ", 
                RowBox[{"result", " ", "=", " ", 
                 RowBox[{"Switch", "[", 
                  RowBox[{
                  "selectedModel", ",", "\n", "              ", 
                   "\"\<Markov\>\"", ",", " ", 
                   RowBox[{"classifier", "[", "inputText", "]"}], ",", "\n", 
                   "              ", "\"\<SVM\>\"", ",", " ", 
                   RowBox[{"classifierSVM", "[", "inputText", "]"}], ",", 
                   "\n", "              ", "\"\<Random Forest\>\"", ",", " ", 
                   RowBox[{"classifierRF", "[", "inputText", "]"}], ",", "\n",
                    "              ", "\"\<Neural Network\>\"", ",", " ", 
                   RowBox[{"classifierNN", "[", "inputText", "]"}], ",", "\n",
                    "              ", "\"\<Gradient Boosting\>\"", ",", " ", 
                   RowBox[{"classifierGB", "[", "inputText", "]"}]}], "\n", 
                  "            ", "]"}]}], ",", "\n", "            ", 
                RowBox[{"Background", " ", "->", " ", "Blue"}], ",", "\n", 
                "            ", 
                RowBox[{"BaseStyle", " ", "->", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"FontColor", " ", "->", " ", "White"}], ",", " ", 
                   "Bold"}], "}"}]}]}], "\n", "          ", "]"}], ",", "\n", 
              "          ", "\n", "          ", 
              RowBox[{"Spacer", "[", "10", "]"}], ",", "\n", "          ", 
              "\n", " ", "\n", "          ", 
              RowBox[{"Dynamic", "[", "\n", "            ", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"result", " ", "!=", " ", "\"\<\>\""}], ",", "\n", 
                 "              ", 
                 RowBox[{"Panel", "[", "\n", "                ", 
                  RowBox[{
                   RowBox[{"Column", "[", 
                    RowBox[{"{", "\n", "                  ", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Classification Result:\>\"", ",", " ", "Bold"}], 
                    "]"}], ",", "\n", "                  ", "result"}], "\n", 
                    "                ", "}"}], "]"}], ",", "\n", 
                   "                ", 
                   RowBox[{"Background", " ", "->", " ", "LightGray"}]}], 
                  "\n", "              ", "]"}]}], "\n", "            ", 
                "]"}], "\n", "          ", "]"}]}], "\n", "        ", "}"}], 
            "]"}], ",", "\n", "        ", "\n", "        ", 
           RowBox[{"Column", "[", 
            RowBox[{"{", "\n", "          ", 
             RowBox[{
              RowBox[{"Button", "[", 
               RowBox[{"\"\<Show Model Comparisons\>\"", ",", " ", 
                RowBox[{"showMetrics", " ", "=", " ", 
                 RowBox[{"!", "showMetrics"}]}]}], "]"}], ",", "\n", 
              "          ", 
              RowBox[{"Dynamic", "[", "\n", "            ", 
               RowBox[{"If", "[", 
                RowBox[{"showMetrics", ",", "\n", "              ", 
                 RowBox[{"BarChart", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"{", "\n", "                ", 
                    RowBox[{
                    RowBox[{"evalMarkov", "[", "\"\<Accuracy\>\"", "]"}], ",",
                     "\n", "                ", 
                    RowBox[{"evalSVM", "[", "\"\<Accuracy\>\"", "]"}], ",", 
                    "\n", "                ", 
                    RowBox[{"evalRF", "[", "\"\<Accuracy\>\"", "]"}], ",", 
                    "\n", "                ", 
                    RowBox[{"evalNN", "[", "\"\<Accuracy\>\"", "]"}], ",", 
                    "\n", "                ", 
                    RowBox[{"evalGB", "[", "\"\<Accuracy\>\"", "]"}]}], "\n", 
                    "              ", "}"}], " ", "*", " ", "100"}], ",", 
                   "\n", "                ", 
                   RowBox[{"ChartLabels", " ", "->", " ", 
                    RowBox[{"{", "\n", "                  ", 
                    RowBox[{
                    "\"\<Markov \>\"", ",", "\"\<SVM\>\"", ",", " ", 
                    "\"\<RF\>\"", ",", " ", "\"\<NN\>\"", ",", " ", 
                    "\"\<GB\>\""}], "\n", "                ", "}"}]}], ",", 
                   "\n", "                ", 
                   RowBox[{"ChartStyle", " ", "->", " ", "\"\<Pastel\>\""}], 
                   ",", "\n", "                ", 
                   RowBox[{
                   "PlotLabel", " ", "->", " ", 
                    "\"\<Model Accuracy Comparison (%)\>\""}], ",", "\n", 
                   "                ", 
                   RowBox[{"ImageSize", " ", "->", " ", "400"}]}], "\n", 
                  "              ", "]"}]}], "\n", "            ", "]"}], 
               "\n", "          ", "]"}]}], "\n", "        ", "}"}], "]"}]}], 
          "\n", "      ", "}"}], "\n", "    ", "}"}], "]"}]}], "\n", "  ", 
      "}"}], ",", " ", 
     RowBox[{"Spacings", " ", "->", " ", "2"}]}], "]"}], ",", "\n", "  ", 
   "\n", "  ", 
   RowBox[{"Initialization", " ", ":>", " ", 
    RowBox[{"(", 
     RowBox[{"result", " ", "=", " ", "\"\<\>\""}], ")"}]}]}], "\n", 
  "]"}]], "Code",
 CellChangeTimes->{
  3.940979712274439*^9, {3.9409797559635353`*^9, 3.940979991393633*^9}, {
   3.9409800226934376`*^9, 3.940980085031399*^9}, {3.94098038121134*^9, 
   3.9409803825551224`*^9}, {3.9409805810397797`*^9, 3.9409805852257214`*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"f1d82975-b54b-d945-bf78-b68c1347086d"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`selectedModel$$ = 
  "Markov", $CellContext`inputText$$ = 
  "Aku cinta BAScii", $CellContext`result$$ = 
  "BENAR", $CellContext`showMetrics$$ = True}, 
  TagBox[GridBox[{
     {
      PanelBox[
       StyleBox["\<\"Indonesian Text Sentiment Classifier\"\>",
        StripOnInput->False,
        LineColor->RGBColor[0, 0, 1],
        FrontFaceColor->RGBColor[0, 0, 1],
        BackFaceColor->RGBColor[0, 0, 1],
        GraphicsColor->RGBColor[0, 0, 1],
        FontSize->20,
        FontWeight->Bold,
        FontColor->RGBColor[0, 0, 1]],
       Background->RGBColor[0.87, 0.94, 1]]},
     {
      TagBox[GridBox[{
         {
          TagBox[GridBox[{
             {
              StyleBox["\<\"Select Model:\"\>",
               StripOnInput->False,
               FontWeight->Bold]},
             {
              
              PopupMenuBox[Dynamic[$CellContext`selectedModel$$], {
               "Markov"->"\<\"Markov\"\>", "SVM"->"\<\"SVM\"\>", 
               "Random Forest"->"\<\"Random Forest\"\>", 
               "Neural Network"->"\<\"Neural Network\"\>", 
               "Gradient Boosting"->"\<\"Gradient Boosting\"\>"},
               ImageSize->200]},
             {
              TemplateBox[{10},
               "Spacer1"]},
             {
              DynamicBox[ToBoxes[
                Panel[
                 
                 Grid[{{"Accuracy:", 
                    NumberForm[Switch[$CellContext`selectedModel$$, "Markov", 
                    $CellContext`evalMarkov["Accuracy"], "SVM", 
                    $CellContext`evalSVM["Accuracy"], "Random Forest", 
                    $CellContext`evalRF["Accuracy"], "Neural Network", 
                    $CellContext`evalNN["Accuracy"], "Gradient Boosting", 
                    $CellContext`evalGB["Accuracy"]] 100, {4, 2}] "%"}}], 
                 Background -> LightYellow], StandardForm],
               
               ImageSizeCache->{
                80.79690131835946, {14.056274414063227`, 
                 17.775805664063228`}}]},
             {
              TemplateBox[{20},
               "Spacer1"]},
             {
              StyleBox["\<\"Enter Text for Classification:\"\>",
               StripOnInput->False,
               FontWeight->Bold]},
             {
              InputFieldBox[Dynamic[$CellContext`inputText$$], String,
               Background->GrayLevel[1],
               ContinuousAction->True,
               ImageSize->{400, 100}]},
             {
              ButtonBox["\<\"Classify Text\"\>",
               Appearance->Automatic,
               Background->RGBColor[0, 0, 1],
               BaseStyle->{FontColor -> GrayLevel[1], Bold},
               
               ButtonFunction:>($CellContext`result$$ = 
                Switch[$CellContext`selectedModel$$, "Markov", 
                  $CellContext`classifier[$CellContext`inputText$$], "SVM", 
                  $CellContext`classifierSVM[$CellContext`inputText$$], 
                  "Random Forest", 
                  $CellContext`classifierRF[$CellContext`inputText$$], 
                  "Neural Network", 
                  $CellContext`classifierNN[$CellContext`inputText$$], 
                  "Gradient Boosting", 
                  $CellContext`classifierGB[$CellContext`inputText$$]]),
               Evaluator->Automatic,
               Method->"Preemptive"]},
             {
              TemplateBox[{10},
               "Spacer1"]},
             {
              DynamicBox[ToBoxes[
                If[$CellContext`result$$ != "", 
                 Panel[
                  Column[{
                    Style[
                    "Classification Result:", Bold], $CellContext`result$$}], 
                  Background -> LightGray]], StandardForm],
               
               ImageSizeCache->{
                94.80070312500007, {18.209941406250728`, 
                 21.929472656250727`}}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Column"], 
          TagBox[GridBox[{
             {
              ButtonBox["\<\"Show Model Comparisons\"\>",
               Appearance->Automatic,
               
               ButtonFunction:>($CellContext`showMetrics$$ = 
                Not[$CellContext`showMetrics$$]),
               Evaluator->Automatic,
               Method->"Preemptive"]},
             {
              DynamicBox[ToBoxes[
                If[$CellContext`showMetrics$$, 
                 BarChart[{
                    $CellContext`evalMarkov["Accuracy"], 
                    $CellContext`evalSVM["Accuracy"], 
                    $CellContext`evalRF["Accuracy"], 
                    $CellContext`evalNN["Accuracy"], 
                    $CellContext`evalGB["Accuracy"]} 100, 
                  ChartLabels -> {"Markov ", "SVM", "RF", "NN", "GB"}, 
                  ChartStyle -> "Pastel", PlotLabel -> 
                  "Model Accuracy Comparison (%)", ImageSize -> 400]], 
                StandardForm],
               
               ImageSizeCache->{
                360., {117.11505176636254`, 122.27379200073753`}}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Column"]}
        },
        AutoDelete->False,
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{2}}}],
   "Column"],
  DynamicModuleValues:>{},
  Initialization:>($CellContext`result$$ = "")]], "Output",
 CellChangeTimes->{3.9409872671185856`*^9, 3.9418667980730076`*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"1195b914-2ead-c24f-b0c9-44242bcaa5d0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152, 579.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
Magnification:>0.9 Inherited,
FrontEndVersion->"14.1 for Microsoft Windows (64-bit) (July 16, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"5b368266-9595-d74b-8c08-4a4b90b0b47e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 197, 3, 86, "Title",ExpressionUUID->"c11fae8b-c376-0d48-9faf-c6eb54e4cd43"],
Cell[776, 27, 237, 6, 46, "Subtitle",ExpressionUUID->"4b6e9c16-0a37-ed44-af82-458cfed1889c"],
Cell[1016, 35, 227, 4, 27, "Author",ExpressionUUID->"cd11e50a-1595-4240-9bab-e96f5c79dc33"],
Cell[CellGroupData[{
Cell[1268, 43, 165, 3, 59, "Section",ExpressionUUID->"71c22328-a905-2e44-ba7d-42c772832173"],
Cell[1436, 48, 350, 8, 45, "Code",ExpressionUUID->"25088308-0438-814f-9282-b716465a1d1e"],
Cell[CellGroupData[{
Cell[1811, 60, 247, 4, 45, "Code",ExpressionUUID->"909732c1-338c-c54a-b3c3-b7a3891e6904"],
Cell[2061, 66, 222366, 4323, 530, "Output",ExpressionUUID->"1e1e9d1f-d7f1-de49-8061-23039040d11a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224464, 4394, 251, 4, 45, "Code",ExpressionUUID->"2c70602b-3308-ab4a-a4c9-91896a30605a"],
Cell[224718, 4400, 265, 5, 28, "Output",ExpressionUUID->"898345fb-9ed2-fd46-b905-07668f574d0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[225020, 4410, 430, 10, 45, "Code",ExpressionUUID->"c3cbd4b5-fd67-0f4b-ae53-eb5f2a4a7732"],
Cell[225453, 4422, 95058, 1742, 513, "Output",ExpressionUUID->"2b144ff6-0d3a-f948-a992-825d2a03bb1e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[320560, 6170, 174, 3, 59, "Section",ExpressionUUID->"100ad0eb-5a17-6f45-8f49-7868b181d15e"],
Cell[CellGroupData[{
Cell[320759, 6177, 183, 3, 47, "Subsection",ExpressionUUID->"0e3a9171-3ef3-d140-aeb7-0bf524856fdf"],
Cell[320945, 6182, 366, 8, 45, "Code",ExpressionUUID->"dc3fcea3-3790-684b-bf7e-7f47ea5c2423"],
Cell[321314, 6192, 245, 5, 45, "Code",ExpressionUUID->"1d6800e7-d001-ad44-8ff5-a4fe1c394e52"],
Cell[321562, 6199, 294, 7, 45, "Code",ExpressionUUID->"af01ceb6-ce50-8945-8c26-4e0e9bd9eaf3"],
Cell[CellGroupData[{
Cell[321881, 6210, 188, 3, 45, "Code",ExpressionUUID->"294cf92f-ad21-e142-bdd5-51772510b06e"],
Cell[322072, 6215, 23987, 570, 336, "Output",ExpressionUUID->"d0fbb000-1988-864a-b9e1-977fe5f25e6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[346096, 6790, 544, 13, 60, "Code",ExpressionUUID->"f5c1abd4-bb07-e24b-9046-4e1818c870d3"],
Cell[346643, 6805, 24145, 433, 111, "Output",ExpressionUUID->"0da89cde-0ba7-1b46-aa34-989e87a436e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[370825, 7243, 1046, 25, 108, "Code",ExpressionUUID->"6711ce11-fcad-804f-9d58-5f436a439235"],
Cell[371874, 7270, 4305, 109, 344, "Output",ExpressionUUID->"1cf2d656-6fb5-784c-8557-6e46a95076ba"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[376228, 7385, 172, 3, 47, "Subsection",ExpressionUUID->"562098b4-07b0-7b42-933c-7b41f9786c74"],
Cell[CellGroupData[{
Cell[376425, 7392, 545, 14, 60, "Code",ExpressionUUID->"36552a52-58ba-7342-ba45-42812ff1eaf8"],
Cell[376973, 7408, 21378, 376, 29, "Output",ExpressionUUID->"a18f7f7d-7eab-c746-b02d-10e92c3ca00c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[398400, 7790, 172, 3, 47, "Subsection",ExpressionUUID->"dc06492d-7135-314c-ae8a-67095ae1b620"],
Cell[CellGroupData[{
Cell[398597, 7797, 1473, 36, 155, "Code",ExpressionUUID->"24f37ea7-b7f0-384e-ae22-5bb6482b5fad"],
Cell[400073, 7835, 658, 13, 46, "Output",ExpressionUUID->"c504d7ad-56a1-9a4d-ab7e-11bef64a7518"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[400780, 7854, 171, 3, 47, "Subsection",ExpressionUUID->"0a021c7f-7da2-1249-9c3a-ca5f9f2492ae"],
Cell[CellGroupData[{
Cell[400976, 7861, 708, 18, 76, "Code",ExpressionUUID->"9d835488-0cf1-fb40-a2cc-c894275fb3b9"],
Cell[401687, 7881, 58604, 1122, 513, "Output",ExpressionUUID->"2a92e898-f4e4-2e4e-a5dc-4b34448a541f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[460352, 9010, 160, 3, 59, "Section",ExpressionUUID->"cdde58de-4a96-534f-9371-5b851209578b"],
Cell[CellGroupData[{
Cell[460537, 9017, 168, 3, 47, "Subsection",ExpressionUUID->"65ae144a-c41b-274a-b70f-1287cb24a3e1"],
Cell[CellGroupData[{
Cell[460730, 9024, 345, 5, 45, "Code",ExpressionUUID->"8ed51e36-76b4-3747-9f17-01908669193a"],
Cell[461078, 9031, 91698, 1682, 513, "Output",ExpressionUUID->"97b9b941-68d1-aa4a-9c2b-675a54432401"]
}, Open  ]],
Cell[CellGroupData[{
Cell[552813, 10718, 403, 8, 45, "Code",ExpressionUUID->"21eda600-f513-e24b-8ffc-e2b45965ca56"],
Cell[553219, 10728, 29532, 529, 111, "Output",ExpressionUUID->"e2235911-4a64-a942-a1cc-8514c565d810"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[582800, 11263, 278, 4, 47, "Subsection",ExpressionUUID->"0b16df1b-f9d6-b04c-b0ab-2e9661cfcf4e"],
Cell[583081, 11269, 1086, 24, 108, "Code",ExpressionUUID->"1f894f13-c1b4-a340-821f-72f41db9ba9d"],
Cell[CellGroupData[{
Cell[584192, 11297, 403, 8, 45, "Code",ExpressionUUID->"a91a9c68-a613-2a40-adda-b3612601c8f1"],
Cell[584598, 11307, 26950, 478, 88, "Output",ExpressionUUID->"31ca4798-524d-204e-a9c4-eb86ab3b4531"]
}, Open  ]],
Cell[611563, 11788, 439, 11, 45, "Code",ExpressionUUID->"e153c45d-e125-7243-8deb-8d06b91ba525"]
}, Open  ]],
Cell[CellGroupData[{
Cell[612039, 11804, 167, 3, 47, "Subsection",ExpressionUUID->"e30853e1-6298-b440-a95a-bcdaab9b2772"],
Cell[612209, 11809, 1238, 32, 203, "Code",ExpressionUUID->"58cd3100-15de-0e4a-84ef-975284a9ad35"],
Cell[613450, 11843, 307, 6, 45, "Code",ExpressionUUID->"c6c607a1-4232-c74b-ae79-706df2575eba"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[613806, 11855, 164, 3, 59, "Section",ExpressionUUID->"0d612dc2-44f3-a34d-b042-3f233f0a4c00"],
Cell[CellGroupData[{
Cell[613995, 11862, 208, 4, 47, "Subsection",ExpressionUUID->"e5be4f57-b3c2-9e4f-8db9-f016578a1ded"],
Cell[614206, 11868, 224, 4, 30, "Text",ExpressionUUID->"9f34ec37-8f5a-5546-8b24-93d2832beb25"],
Cell[614433, 11874, 4185, 94, 629, "Code",ExpressionUUID->"a887cf03-ca72-7444-894b-298366e2b77e"],
Cell[CellGroupData[{
Cell[618643, 11972, 425, 9, 60, "Code",ExpressionUUID->"c6f4a699-c281-9d46-8cce-d963edbc36dd"],
Cell[619071, 11983, 418, 5, 28, "Output",ExpressionUUID->"ba24f575-6ca9-994c-8e27-b3b330cf6e36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[619526, 11993, 416, 8, 45, "Code",ExpressionUUID->"67ad1388-6fee-8d48-994d-ac337b779aaa"],
Cell[619945, 12003, 70791, 1334, 513, "Output",ExpressionUUID->"bb4fb0d9-8ece-1045-912c-2885159ae9ee"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[690785, 13343, 162, 3, 47, "Subsection",ExpressionUUID->"3056ee3e-250a-0044-8237-1cae13b1d96c"],
Cell[690950, 13348, 196, 3, 30, "Text",ExpressionUUID->"7f227819-c8d7-464e-8a6f-85bd2ee04dc2"],
Cell[691149, 13353, 3197, 78, 519, "Code",ExpressionUUID->"d88c2557-75c6-e74d-a449-122fcb48b8c4"],
Cell[694349, 13433, 330, 8, 60, "Code",ExpressionUUID->"fc42097c-0ba0-c049-8ff7-36c17cf79331"],
Cell[CellGroupData[{
Cell[694704, 13445, 322, 7, 25, "Input",ExpressionUUID->"34c357ff-4aa7-0441-97f5-8b8b918f6439"],
Cell[695029, 13454, 286, 6, 28, "Output",ExpressionUUID->"35a29521-5186-1544-bcec-56c0ef523195"]
}, Open  ]],
Cell[695330, 13463, 1272, 32, 139, "Code",ExpressionUUID->"34e70230-a753-0948-bd36-23d507e5c156"]
}, Open  ]],
Cell[CellGroupData[{
Cell[696639, 13500, 161, 3, 47, "Subsection",ExpressionUUID->"8ada68e5-a560-a948-b97f-ec6c7f958ceb"],
Cell[696803, 13505, 391, 8, 30, "Text",ExpressionUUID->"a68d5fa8-07d1-5841-a6b5-f5094239f3d8"],
Cell[697197, 13515, 4065, 61, 313, "Code",ExpressionUUID->"d71230cc-e3cb-a649-b1ca-6c1cd02f1d41"],
Cell[701265, 13578, 3816, 93, 550, "Code",ExpressionUUID->"2bf1f31f-68fe-a849-abc3-27332cd5ddd9"],
Cell[CellGroupData[{
Cell[705106, 13675, 368, 9, 60, "Code",ExpressionUUID->"1ccb2020-f61f-6a43-a06f-e04a8daac492"],
Cell[705477, 13686, 425, 7, 28, "Output",ExpressionUUID->"737e031b-0b77-e74a-8e1c-819ed780e897"]
}, Open  ]],
Cell[705917, 13696, 661, 17, 60, "Code",ExpressionUUID->"d34603be-2fb0-4040-97d3-aac36c403ae3"],
Cell[706581, 13715, 1068, 27, 124, "Code",ExpressionUUID->"1f7aa3e7-5f24-c446-a7d3-d9d77de90e70"],
Cell[707652, 13744, 396, 9, 60, "Code",ExpressionUUID->"69e11547-33bb-a949-8a14-55d9236700ff"],
Cell[CellGroupData[{
Cell[708073, 13757, 1160, 29, 155, "Code",ExpressionUUID->"0717218f-a429-f34b-b7bc-848468eb4223"],
Cell[709236, 13788, 53812, 1023, 397, "Output",ExpressionUUID->"e300ffc8-a326-6747-8c69-2fa71bd9f1f5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[763097, 14817, 156, 3, 47, "Subsection",ExpressionUUID->"450273a6-0687-0242-a23a-753197bd9df5"],
Cell[763256, 14822, 274, 5, 30, "Text",ExpressionUUID->"8362eb40-2720-954b-ad65-19255d9d5d8c"],
Cell[763533, 14829, 1541, 38, 124, "Code",ExpressionUUID->"343940c9-3673-ab4b-b190-c08e8638423d"],
Cell[765077, 14869, 10555, 246, 1309, "Code",ExpressionUUID->"ffd02282-10ef-bd4b-8ceb-5888dbed67a0"],
Cell[CellGroupData[{
Cell[775657, 15119, 589, 12, 76, "Code",ExpressionUUID->"fd33bd2f-6a33-0a4b-84ca-93c9f231e59d"],
Cell[776249, 15133, 235, 3, 28, "Output",ExpressionUUID->"618ef277-42f7-1c44-b51b-1f7251741d6f"],
Cell[776487, 15138, 235, 3, 28, "Output",ExpressionUUID->"b4471338-a95a-d84c-bfae-8e63ba008356"]
}, Open  ]],
Cell[CellGroupData[{
Cell[776759, 15146, 483, 12, 76, "Code",ExpressionUUID->"c5e3155b-8dce-0c45-8e8a-a1ae1f06965b"],
Cell[777245, 15160, 394, 7, 28, "Output",ExpressionUUID->"298b0620-18a0-7649-88a3-6a4a541a0c6a"]
}, Open  ]],
Cell[777654, 15170, 241, 4, 54, "Abstract",ExpressionUUID->"7ef04cfb-bffd-8541-8177-52550ed1e55b"],
Cell[CellGroupData[{
Cell[777920, 15178, 185, 2, 45, "Code",ExpressionUUID->"c5783fdc-065a-f44c-994d-59359946c12c"],
Cell[778108, 15182, 92970, 1730, 513, "Output",ExpressionUUID->"4be4b4f5-1e40-7540-a82b-c672c50cbbfa"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[871139, 16919, 170, 3, 59, "Section",ExpressionUUID->"7420ab37-d52c-9c4d-bc0d-7351da858956"],
Cell[871312, 16924, 1139, 22, 60, "Code",ExpressionUUID->"5ebb4379-8341-2f48-ad7f-4ccaf7e41119"],
Cell[CellGroupData[{
Cell[872476, 16950, 170, 3, 47, "Subsection",ExpressionUUID->"9c0c7776-66ae-2a4f-acf5-00e82df75203"],
Cell[872649, 16955, 1016, 26, 139, "Code",ExpressionUUID->"a24ad965-8368-8e4f-8ae9-5065118da253"],
Cell[CellGroupData[{
Cell[873690, 16985, 186, 2, 25, "Input",ExpressionUUID->"86e477b7-53eb-c647-a2ad-afe746ad7bee"],
Cell[873879, 16989, 68774, 1281, 513, "Output",ExpressionUUID->"cf43a7b4-738c-424a-89de-c36cde5fd2be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[942690, 18275, 751, 16, 60, "Code",ExpressionUUID->"62cbb5da-5625-484f-ab4e-e8ed8d331817"],
Cell[943444, 18293, 12801, 209, 1296, "Output",ExpressionUUID->"321a8854-2075-7a40-87c5-4cdbd8bd05df"],
Cell[956248, 18504, 3876, 58, 131, "Output",ExpressionUUID->"877a5c58-2d9e-a54a-b751-3f092eef1bd2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[960161, 18567, 522, 10, 45, "Code",ExpressionUUID->"d050489d-d176-2146-b904-2ae0c8053be2"],
Cell[960686, 18579, 295, 4, 28, "Output",ExpressionUUID->"4ce2578a-7c1f-f54d-aab3-f5440dba43e7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[961030, 18589, 173, 3, 47, "Subsection",ExpressionUUID->"c132f351-793f-4a46-9521-60dcc8459a6f"],
Cell[CellGroupData[{
Cell[961228, 18596, 271, 5, 45, "Code",ExpressionUUID->"a32f4eab-1e10-3443-b00e-f85f5d6db8e7"],
Cell[961502, 18603, 19320, 329, 1450, "Output",ExpressionUUID->"9a8cd1b6-fc41-b749-8cfa-5f96663a5796"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[980871, 18938, 191, 3, 47, "Subsection",ExpressionUUID->"1be27858-b4b3-8d4e-a446-8a1a1aba0433"],
Cell[981065, 18943, 657, 14, 45, "Code",ExpressionUUID->"f5715c2a-99c6-7747-a2b9-62ff0d49fd2d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[981759, 18962, 167, 3, 47, "Subsection",ExpressionUUID->"754fa6c8-5082-ca48-89f1-56462b26abf7"],
Cell[CellGroupData[{
Cell[981951, 18969, 233, 4, 45, "Code",ExpressionUUID->"82f65d35-7a40-d44c-b418-9d5c96efc7c8"],
Cell[982187, 18975, 55791, 1069, 53, "Output",ExpressionUUID->"c0e498ba-753e-d744-ab37-926d5fca18d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1038015, 20049, 281, 5, 45, "Code",ExpressionUUID->"7a92ca6d-5749-4f43-b50e-f5619a2610a7"],
Cell[1038299, 20056, 236, 4, 28, "Output",ExpressionUUID->"1c22567d-9f9b-8143-87f0-833200b3a06f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1038572, 20065, 346, 7, 45, "Code",ExpressionUUID->"439cada6-37b7-4242-a2a7-2a54e029f749"],
Cell[1038921, 20074, 228, 4, 28, "Output",ExpressionUUID->"4d775013-c052-d54b-92ff-4a992032b4d9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1039198, 20084, 166, 3, 47, "Subsection",ExpressionUUID->"5520d230-7628-a647-9f67-57894c7f6cdd"],
Cell[CellGroupData[{
Cell[1039389, 20091, 315, 6, 45, "Code",ExpressionUUID->"75a04f76-cde6-9645-b3fa-ba8da842b8c1"],
Cell[1039707, 20099, 200, 3, 28, "Output",ExpressionUUID->"76cc063c-3a31-ee46-8b42-dc44bf78aa5c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1039944, 20107, 440, 8, 45, "Code",ExpressionUUID->"fda7feea-a81f-3e41-a13d-ccfd2d0777e6"],
Cell[1040387, 20117, 75667, 1517, 407, "Output",ExpressionUUID->"8f3f0f14-f0b5-b64e-a328-80fab7c06573"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1116091, 21639, 647, 13, 76, "Code",ExpressionUUID->"a5fa2282-d7c9-9547-bc1c-17c8f1f19578"],
Cell[1116741, 21654, 474, 9, 28, "Output",ExpressionUUID->"6037f3b9-fb95-ce44-ab3e-e50ead4f0218"],
Cell[1117218, 21665, 474, 9, 28, "Output",ExpressionUUID->"8427fd42-effd-1144-8367-256c092069d0"],
Cell[1117695, 21676, 474, 9, 28, "Output",ExpressionUUID->"3379a618-856b-a748-b0de-d5348d5f99ae"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1118218, 21691, 163, 3, 47, "Subsection",ExpressionUUID->"1312ce66-1c3d-b74c-af8f-41b27f69e0d3"],
Cell[CellGroupData[{
Cell[1118406, 21698, 1122, 27, 108, "Code",ExpressionUUID->"8a25ab35-ee6f-e34b-9a00-03d9ab5715f8"],
Cell[1119531, 21727, 11069, 221, 73, "Output",ExpressionUUID->"6a7a9ff8-f03a-454c-8a2a-9f04f1906bf7"],
Cell[1130603, 21950, 905734, 14970, 53, "Output",ExpressionUUID->"03085f8a-6232-5e4e-951a-dab22d54aa9d"],
Cell[2036340, 36922, 118349, 2114, 53, "Output",ExpressionUUID->"db2fad58-215a-8045-b1a9-1709a5ba4f51"],
Cell[2154692, 39038, 11071, 221, 73, "Output",ExpressionUUID->"1397068a-3c4b-1f48-8e53-19079330def3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2165800, 39264, 1280, 32, 171, "Code",ExpressionUUID->"39460c25-de19-8f4a-8755-1c08dbe47690"],
Cell[2167083, 39298, 213393, 4206, 435, "Output",ExpressionUUID->"1528d7aa-77cb-3346-a6af-57c7a5c8f376"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2380537, 43511, 221, 4, 59, "Section",ExpressionUUID->"13dfcac2-f0a9-934b-a1fe-65eceae8cdce"],
Cell[CellGroupData[{
Cell[2380783, 43519, 11089, 209, 1720, "Code",ExpressionUUID->"f1d82975-b54b-d945-bf78-b68c1347086d"],
Cell[2391875, 43730, 6145, 151, 384, "Output",ExpressionUUID->"1195b914-2ead-c24f-b0c9-44242bcaa5d0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

